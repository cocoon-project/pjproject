/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN int SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN int SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN int SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN int  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_int swig_types[0]
#define SWIGTYPE_p_p_void swig_types[1]
#define SWIGTYPE_p_pj__Account swig_types[2]
#define SWIGTYPE_p_pj__AccountCallConfig swig_types[3]
#define SWIGTYPE_p_pj__AccountConfig swig_types[4]
#define SWIGTYPE_p_pj__AccountInfo swig_types[5]
#define SWIGTYPE_p_pj__AccountMediaConfig swig_types[6]
#define SWIGTYPE_p_pj__AccountMwiConfig swig_types[7]
#define SWIGTYPE_p_pj__AccountNatConfig swig_types[8]
#define SWIGTYPE_p_pj__AccountPresConfig swig_types[9]
#define SWIGTYPE_p_pj__AccountRegConfig swig_types[10]
#define SWIGTYPE_p_pj__AccountSipConfig swig_types[11]
#define SWIGTYPE_p_pj__AccountVideoConfig swig_types[12]
#define SWIGTYPE_p_pj__AudDevManager swig_types[13]
#define SWIGTYPE_p_pj__AudioDevInfo swig_types[14]
#define SWIGTYPE_p_pj__AudioMedia swig_types[15]
#define SWIGTYPE_p_pj__AudioMediaPlayer swig_types[16]
#define SWIGTYPE_p_pj__AudioMediaPlayerInfo swig_types[17]
#define SWIGTYPE_p_pj__AudioMediaRecorder swig_types[18]
#define SWIGTYPE_p_pj__AuthCredInfo swig_types[19]
#define SWIGTYPE_p_pj__Buddy swig_types[20]
#define SWIGTYPE_p_pj__BuddyConfig swig_types[21]
#define SWIGTYPE_p_pj__BuddyInfo swig_types[22]
#define SWIGTYPE_p_pj__Call swig_types[23]
#define SWIGTYPE_p_pj__CallInfo swig_types[24]
#define SWIGTYPE_p_pj__CallMediaInfo swig_types[25]
#define SWIGTYPE_p_pj__CallOpParam swig_types[26]
#define SWIGTYPE_p_pj__CallSendRequestParam swig_types[27]
#define SWIGTYPE_p_pj__CallSetting swig_types[28]
#define SWIGTYPE_p_pj__CallVidSetStreamParam swig_types[29]
#define SWIGTYPE_p_pj__CodecInfo swig_types[30]
#define SWIGTYPE_p_pj__ConfPortInfo swig_types[31]
#define SWIGTYPE_p_pj__ContainerNode swig_types[32]
#define SWIGTYPE_p_pj__Endpoint swig_types[33]
#define SWIGTYPE_p_pj__EpConfig swig_types[34]
#define SWIGTYPE_p_pj__Error swig_types[35]
#define SWIGTYPE_p_pj__FindBuddyMatch swig_types[36]
#define SWIGTYPE_p_pj__JbufState swig_types[37]
#define SWIGTYPE_p_pj__JsonDocument swig_types[38]
#define SWIGTYPE_p_pj__LogConfig swig_types[39]
#define SWIGTYPE_p_pj__LogEntry swig_types[40]
#define SWIGTYPE_p_pj__LogWriter swig_types[41]
#define SWIGTYPE_p_pj__MathStat swig_types[42]
#define SWIGTYPE_p_pj__Media swig_types[43]
#define SWIGTYPE_p_pj__MediaConfig swig_types[44]
#define SWIGTYPE_p_pj__MediaEvent swig_types[45]
#define SWIGTYPE_p_pj__MediaFmtChangedEvent swig_types[46]
#define SWIGTYPE_p_pj__MediaFormat swig_types[47]
#define SWIGTYPE_p_pj__MediaFormatAudio swig_types[48]
#define SWIGTYPE_p_pj__MediaFormatVideo swig_types[49]
#define SWIGTYPE_p_pj__MediaTransportInfo swig_types[50]
#define SWIGTYPE_p_pj__OnCallMediaEventParam swig_types[51]
#define SWIGTYPE_p_pj__OnCallMediaStateParam swig_types[52]
#define SWIGTYPE_p_pj__OnCallMediaTransportStateParam swig_types[53]
#define SWIGTYPE_p_pj__OnCallRedirectedParam swig_types[54]
#define SWIGTYPE_p_pj__OnCallReplaceRequestParam swig_types[55]
#define SWIGTYPE_p_pj__OnCallReplacedParam swig_types[56]
#define SWIGTYPE_p_pj__OnCallRxOfferParam swig_types[57]
#define SWIGTYPE_p_pj__OnCallSdpCreatedParam swig_types[58]
#define SWIGTYPE_p_pj__OnCallStateParam swig_types[59]
#define SWIGTYPE_p_pj__OnCallTransferRequestParam swig_types[60]
#define SWIGTYPE_p_pj__OnCallTransferStatusParam swig_types[61]
#define SWIGTYPE_p_pj__OnCallTsxStateParam swig_types[62]
#define SWIGTYPE_p_pj__OnCreateMediaTransportParam swig_types[63]
#define SWIGTYPE_p_pj__OnDtmfDigitParam swig_types[64]
#define SWIGTYPE_p_pj__OnIncomingCallParam swig_types[65]
#define SWIGTYPE_p_pj__OnIncomingSubscribeParam swig_types[66]
#define SWIGTYPE_p_pj__OnInstantMessageParam swig_types[67]
#define SWIGTYPE_p_pj__OnInstantMessageStatusParam swig_types[68]
#define SWIGTYPE_p_pj__OnMwiInfoParam swig_types[69]
#define SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam swig_types[70]
#define SWIGTYPE_p_pj__OnNatDetectionCompleteParam swig_types[71]
#define SWIGTYPE_p_pj__OnRegStartedParam swig_types[72]
#define SWIGTYPE_p_pj__OnRegStateParam swig_types[73]
#define SWIGTYPE_p_pj__OnSelectAccountParam swig_types[74]
#define SWIGTYPE_p_pj__OnStreamCreatedParam swig_types[75]
#define SWIGTYPE_p_pj__OnStreamDestroyedParam swig_types[76]
#define SWIGTYPE_p_pj__OnTimerParam swig_types[77]
#define SWIGTYPE_p_pj__OnTransportStateParam swig_types[78]
#define SWIGTYPE_p_pj__OnTypingIndicationParam swig_types[79]
#define SWIGTYPE_p_pj__PendingJob swig_types[80]
#define SWIGTYPE_p_pj__PersistentDocument swig_types[81]
#define SWIGTYPE_p_pj__PersistentObject swig_types[82]
#define SWIGTYPE_p_pj__PresNotifyParam swig_types[83]
#define SWIGTYPE_p_pj__PresenceStatus swig_types[84]
#define SWIGTYPE_p_pj__RtcpSdes swig_types[85]
#define SWIGTYPE_p_pj__RtcpStat swig_types[86]
#define SWIGTYPE_p_pj__RtcpStreamStat swig_types[87]
#define SWIGTYPE_p_pj__RxMsgEvent swig_types[88]
#define SWIGTYPE_p_pj__SdpSession swig_types[89]
#define SWIGTYPE_p_pj__SendInstantMessageParam swig_types[90]
#define SWIGTYPE_p_pj__SendTypingIndicationParam swig_types[91]
#define SWIGTYPE_p_pj__SipEvent swig_types[92]
#define SWIGTYPE_p_pj__SipHeader swig_types[93]
#define SWIGTYPE_p_pj__SipMediaType swig_types[94]
#define SWIGTYPE_p_pj__SipMultipartPart swig_types[95]
#define SWIGTYPE_p_pj__SipRxData swig_types[96]
#define SWIGTYPE_p_pj__SipTransaction swig_types[97]
#define SWIGTYPE_p_pj__SipTxData swig_types[98]
#define SWIGTYPE_p_pj__SipTxOption swig_types[99]
#define SWIGTYPE_p_pj__StreamInfo swig_types[100]
#define SWIGTYPE_p_pj__StreamStat swig_types[101]
#define SWIGTYPE_p_pj__TimeVal swig_types[102]
#define SWIGTYPE_p_pj__TimerEvent swig_types[103]
#define SWIGTYPE_p_pj__TlsConfig swig_types[104]
#define SWIGTYPE_p_pj__ToneDesc swig_types[105]
#define SWIGTYPE_p_pj__ToneDigit swig_types[106]
#define SWIGTYPE_p_pj__ToneDigitMapDigit swig_types[107]
#define SWIGTYPE_p_pj__ToneGenerator swig_types[108]
#define SWIGTYPE_p_pj__TransportConfig swig_types[109]
#define SWIGTYPE_p_pj__TransportInfo swig_types[110]
#define SWIGTYPE_p_pj__TsxStateEvent swig_types[111]
#define SWIGTYPE_p_pj__TxErrorEvent swig_types[112]
#define SWIGTYPE_p_pj__TxMsgEvent swig_types[113]
#define SWIGTYPE_p_pj__UaConfig swig_types[114]
#define SWIGTYPE_p_pj__UserEvent swig_types[115]
#define SWIGTYPE_p_pj__Version swig_types[116]
#define SWIGTYPE_p_pj_bool_t swig_types[117]
#define SWIGTYPE_p_pj_qos_flag swig_types[118]
#define SWIGTYPE_p_pj_qos_params swig_types[119]
#define SWIGTYPE_p_pj_qos_type swig_types[120]
#define SWIGTYPE_p_pj_qos_wmm_prio swig_types[121]
#define SWIGTYPE_p_pj_ssize_t swig_types[122]
#define SWIGTYPE_p_pj_ssl_cipher swig_types[123]
#define SWIGTYPE_p_pj_stun_nat_type swig_types[124]
#define SWIGTYPE_p_pj_turn_tp_type swig_types[125]
#define SWIGTYPE_p_pjmedia_aud_dev_cap swig_types[126]
#define SWIGTYPE_p_pjmedia_aud_dev_route swig_types[127]
#define SWIGTYPE_p_pjmedia_dir swig_types[128]
#define SWIGTYPE_p_pjmedia_event_type swig_types[129]
#define SWIGTYPE_p_pjmedia_format_id swig_types[130]
#define SWIGTYPE_p_pjmedia_srtp_use swig_types[131]
#define SWIGTYPE_p_pjmedia_tone_desc swig_types[132]
#define SWIGTYPE_p_pjmedia_tone_digit swig_types[133]
#define SWIGTYPE_p_pjmedia_tone_digit_map swig_types[134]
#define SWIGTYPE_p_pjmedia_tp_proto swig_types[135]
#define SWIGTYPE_p_pjmedia_type swig_types[136]
#define SWIGTYPE_p_pjmedia_vid_stream_rc_method swig_types[137]
#define SWIGTYPE_p_pjrpid_activity swig_types[138]
#define SWIGTYPE_p_pjsip_cred_data_type swig_types[139]
#define SWIGTYPE_p_pjsip_dialog_cap_status swig_types[140]
#define SWIGTYPE_p_pjsip_event_id_e swig_types[141]
#define SWIGTYPE_p_pjsip_evsub_state swig_types[142]
#define SWIGTYPE_p_pjsip_hdr_e swig_types[143]
#define SWIGTYPE_p_pjsip_inv_state swig_types[144]
#define SWIGTYPE_p_pjsip_redirect_op swig_types[145]
#define SWIGTYPE_p_pjsip_role_e swig_types[146]
#define SWIGTYPE_p_pjsip_ssl_method swig_types[147]
#define SWIGTYPE_p_pjsip_status_code swig_types[148]
#define SWIGTYPE_p_pjsip_transport_state swig_types[149]
#define SWIGTYPE_p_pjsip_transport_type_e swig_types[150]
#define SWIGTYPE_p_pjsip_tsx_state_e swig_types[151]
#define SWIGTYPE_p_pjsua_100rel_use swig_types[152]
#define SWIGTYPE_p_pjsua_buddy_status swig_types[153]
#define SWIGTYPE_p_pjsua_call_flag swig_types[154]
#define SWIGTYPE_p_pjsua_call_hold_type swig_types[155]
#define SWIGTYPE_p_pjsua_call_media_status swig_types[156]
#define SWIGTYPE_p_pjsua_call_vid_strm_op swig_types[157]
#define SWIGTYPE_p_pjsua_create_media_transport_flag swig_types[158]
#define SWIGTYPE_p_pjsua_destroy_flag swig_types[159]
#define SWIGTYPE_p_pjsua_ipv6_use swig_types[160]
#define SWIGTYPE_p_pjsua_med_tp_st swig_types[161]
#define SWIGTYPE_p_pjsua_sip_timer_use swig_types[162]
#define SWIGTYPE_p_pjsua_state swig_types[163]
#define SWIGTYPE_p_pjsua_stun_use swig_types[164]
#define SWIGTYPE_p_pjsua_vid_req_keyframe_method swig_types[165]
#define SWIGTYPE_p_std__string swig_types[166]
#define SWIGTYPE_p_std__vectorT_int_t swig_types[167]
#define SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t swig_types[168]
#define SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t swig_types[169]
#define SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t swig_types[170]
#define SWIGTYPE_p_std__vectorT_pj__Buddy_p_t swig_types[171]
#define SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t swig_types[172]
#define SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t swig_types[173]
#define SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t swig_types[174]
#define SWIGTYPE_p_std__vectorT_pj__SipHeader_t swig_types[175]
#define SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t swig_types[176]
#define SWIGTYPE_p_std__vectorT_pj__ToneDesc_t swig_types[177]
#define SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t swig_types[178]
#define SWIGTYPE_p_std__vectorT_pj__ToneDigit_t swig_types[179]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[180]
#define SWIGTYPE_p_unsigned_char swig_types[181]
#define SWIGTYPE_p_unsigned_int swig_types[182]
#define SWIGTYPE_p_unsigned_short swig_types[183]
#define SWIGTYPE_p_void swig_types[184]
#define SWIGTYPE_pj__Error swig_types[185]
static swig_type_info *swig_types[187];
static swig_module_info swig_module = {swig_types, 186, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "pjsua2"
#define SWIG_init      luaopen_pjsua2
#define SWIG_init_user luaopen_pjsua2_user

#define SWIG_LUACODE   luaopen_pjsua2_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "pjsua2.hpp"
using namespace std;
using namespace pj;


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <string>


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>

SWIGINTERN std::string std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,unsigned int idx,std::string val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN int std_vector_Sl_int_Sg____getitem__(std::vector< int > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector< int > *self,unsigned int idx,int val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::SipHeader std_vector_Sl_pj_SipHeader_Sg____getitem__(std::vector< pj::SipHeader > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg____setitem__(std::vector< pj::SipHeader > *self,unsigned int idx,pj::SipHeader val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::AuthCredInfo std_vector_Sl_pj_AuthCredInfo_Sg____getitem__(std::vector< pj::AuthCredInfo > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg____setitem__(std::vector< pj::AuthCredInfo > *self,unsigned int idx,pj::AuthCredInfo val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::SipMultipartPart std_vector_Sl_pj_SipMultipartPart_Sg____getitem__(std::vector< pj::SipMultipartPart > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg____setitem__(std::vector< pj::SipMultipartPart > *self,unsigned int idx,pj::SipMultipartPart val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::Buddy *std_vector_Sl_pj_Buddy_Sm__Sg____getitem__(std::vector< pj::Buddy * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg____setitem__(std::vector< pj::Buddy * > *self,unsigned int idx,pj::Buddy *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::AudioMedia *std_vector_Sl_pj_AudioMedia_Sm__Sg____getitem__(std::vector< pj::AudioMedia * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg____setitem__(std::vector< pj::AudioMedia * > *self,unsigned int idx,pj::AudioMedia *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::ToneDesc std_vector_Sl_pj_ToneDesc_Sg____getitem__(std::vector< pj::ToneDesc > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg____setitem__(std::vector< pj::ToneDesc > *self,unsigned int idx,pj::ToneDesc val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::ToneDigit std_vector_Sl_pj_ToneDigit_Sg____getitem__(std::vector< pj::ToneDigit > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg____setitem__(std::vector< pj::ToneDigit > *self,unsigned int idx,pj::ToneDigit val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::ToneDigitMapDigit std_vector_Sl_pj_ToneDigitMapDigit_Sg____getitem__(std::vector< pj::ToneDigitMapDigit > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg____setitem__(std::vector< pj::ToneDigitMapDigit > *self,unsigned int idx,pj::ToneDigitMapDigit val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::MediaFormat *std_vector_Sl_pj_MediaFormat_Sm__Sg____getitem__(std::vector< pj::MediaFormat * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg____setitem__(std::vector< pj::MediaFormat * > *self,unsigned int idx,pj::MediaFormat *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::AudioDevInfo *std_vector_Sl_pj_AudioDevInfo_Sm__Sg____getitem__(std::vector< pj::AudioDevInfo * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg____setitem__(std::vector< pj::AudioDevInfo * > *self,unsigned int idx,pj::AudioDevInfo *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::CodecInfo *std_vector_Sl_pj_CodecInfo_Sm__Sg____getitem__(std::vector< pj::CodecInfo * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg____setitem__(std::vector< pj::CodecInfo * > *self,unsigned int idx,pj::CodecInfo *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
SWIGINTERN pj::CallMediaInfo std_vector_Sl_pj_CallMediaInfo_Sg____getitem__(std::vector< pj::CallMediaInfo > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg____setitem__(std::vector< pj::CallMediaInfo > *self,unsigned int idx,pj::CallMediaInfo val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_pj_qos_params_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  SWIG_check_num_args("pj_qos_params::flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::flags",1,"pj_qos_params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj_qos_params::flags",2,"pj_uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_flags_set",1,SWIGTYPE_p_pj_qos_params);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  SWIG_check_num_args("pj_qos_params::flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::flags",1,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_flags_get",1,SWIGTYPE_p_pj_qos_params);
  }
  
  result = (pj_uint8_t) ((arg1)->flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_dscp_val_set(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  SWIG_check_num_args("pj_qos_params::dscp_val",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::dscp_val",1,"pj_qos_params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj_qos_params::dscp_val",2,"pj_uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_dscp_val_set",1,SWIGTYPE_p_pj_qos_params);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->dscp_val = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_dscp_val_get(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  SWIG_check_num_args("pj_qos_params::dscp_val",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::dscp_val",1,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_dscp_val_get",1,SWIGTYPE_p_pj_qos_params);
  }
  
  result = (pj_uint8_t) ((arg1)->dscp_val);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_so_prio_set(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  SWIG_check_num_args("pj_qos_params::so_prio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::so_prio",1,"pj_qos_params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj_qos_params::so_prio",2,"pj_uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_so_prio_set",1,SWIGTYPE_p_pj_qos_params);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->so_prio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_so_prio_get(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  SWIG_check_num_args("pj_qos_params::so_prio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::so_prio",1,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_so_prio_get",1,SWIGTYPE_p_pj_qos_params);
  }
  
  result = (pj_uint8_t) ((arg1)->so_prio);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_wmm_prio_set(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio arg2 ;
  
  SWIG_check_num_args("pj_qos_params::wmm_prio",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::wmm_prio",1,"pj_qos_params *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj_qos_params::wmm_prio",2,"pj_qos_wmm_prio");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_wmm_prio_set",1,SWIGTYPE_p_pj_qos_params);
  }
  
  arg2 = (pj_qos_wmm_prio)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->wmm_prio = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pj_qos_params_wmm_prio_get(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio result;
  
  SWIG_check_num_args("pj_qos_params::wmm_prio",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj_qos_params::wmm_prio",1,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("pj_qos_params_wmm_prio_get",1,SWIGTYPE_p_pj_qos_params);
  }
  
  result = (pj_qos_wmm_prio) ((arg1)->wmm_prio);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pj_qos_params(lua_State* L) {
  int SWIG_arg = 0;
  pj_qos_params *result = 0 ;
  
  SWIG_check_num_args("pj_qos_params::pj_qos_params",0,0)
  result = (pj_qos_params *)new pj_qos_params();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj_qos_params,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pj_qos_params(void *obj) {
pj_qos_params *arg1 = (pj_qos_params *) obj;
delete arg1;
}
static int _proxy__wrap_new_pj_qos_params(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pj_qos_params);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pj_qos_params_attributes[] = {
    { "flags", _wrap_pj_qos_params_flags_get, _wrap_pj_qos_params_flags_set },
    { "dscp_val", _wrap_pj_qos_params_dscp_val_get, _wrap_pj_qos_params_dscp_val_set },
    { "so_prio", _wrap_pj_qos_params_so_prio_get, _wrap_pj_qos_params_so_prio_set },
    { "wmm_prio", _wrap_pj_qos_params_wmm_prio_get, _wrap_pj_qos_params_wmm_prio_set },
    {0,0,0}
};
static swig_lua_method swig_pj_qos_params_methods[]= {
    {0,0}
};
static swig_lua_method swig_pj_qos_params_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_pj_qos_params_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pj_qos_params_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pj_qos_params_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pj_qos_params_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pj_qos_params_Sf_SwigStatic = {
    "pj_qos_params",
    swig_pj_qos_params_Sf_SwigStatic_methods,
    swig_pj_qos_params_Sf_SwigStatic_attributes,
    swig_pj_qos_params_Sf_SwigStatic_constants,
    swig_pj_qos_params_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pj_qos_params_bases[] = {0};
static const char *swig_pj_qos_params_base_names[] = {0};
static swig_lua_class _wrap_class_pj_qos_params = { "pj_qos_params", "pj_qos_params", &SWIGTYPE_p_pj_qos_params,_proxy__wrap_new_pj_qos_params, swig_delete_pj_qos_params, swig_pj_qos_params_methods, swig_pj_qos_params_attributes, &swig_pj_qos_params_Sf_SwigStatic, swig_pj_qos_params_meta, swig_pj_qos_params_bases, swig_pj_qos_params_base_names };

static int _wrap_pjmedia_tone_digit_digit_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_digit::digit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::digit",1,"pjmedia_tone_digit *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("pjmedia_tone_digit::digit",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_digit_set",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->digit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_digit_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char result;
  
  SWIG_check_num_args("pjmedia_tone_digit::digit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::digit",1,"pjmedia_tone_digit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_digit_get",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  result = (char) ((arg1)->digit);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_on_msec_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_digit::on_msec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::on_msec",1,"pjmedia_tone_digit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_digit::on_msec",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_on_msec_set",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->on_msec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_on_msec_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_digit::on_msec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::on_msec",1,"pjmedia_tone_digit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_on_msec_get",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  result = (short) ((arg1)->on_msec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_off_msec_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_digit::off_msec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::off_msec",1,"pjmedia_tone_digit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_digit::off_msec",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_off_msec_set",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->off_msec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_off_msec_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_digit::off_msec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::off_msec",1,"pjmedia_tone_digit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_off_msec_get",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  result = (short) ((arg1)->off_msec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_volume_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_digit::volume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::volume",1,"pjmedia_tone_digit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_digit::volume",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_volume_set",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->volume = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_volume_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_digit::volume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit::volume",1,"pjmedia_tone_digit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_volume_get",1,SWIGTYPE_p_pjmedia_tone_digit);
  }
  
  result = (short) ((arg1)->volume);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pjmedia_tone_digit(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit *result = 0 ;
  
  SWIG_check_num_args("pjmedia_tone_digit::pjmedia_tone_digit",0,0)
  result = (pjmedia_tone_digit *)new pjmedia_tone_digit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pjmedia_tone_digit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pjmedia_tone_digit(void *obj) {
pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) obj;
delete arg1;
}
static int _proxy__wrap_new_pjmedia_tone_digit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pjmedia_tone_digit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pjmedia_tone_digit_attributes[] = {
    { "digit", _wrap_pjmedia_tone_digit_digit_get, _wrap_pjmedia_tone_digit_digit_set },
    { "on_msec", _wrap_pjmedia_tone_digit_on_msec_get, _wrap_pjmedia_tone_digit_on_msec_set },
    { "off_msec", _wrap_pjmedia_tone_digit_off_msec_get, _wrap_pjmedia_tone_digit_off_msec_set },
    { "volume", _wrap_pjmedia_tone_digit_volume_get, _wrap_pjmedia_tone_digit_volume_set },
    {0,0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_methods[]= {
    {0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_pjmedia_tone_digit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pjmedia_tone_digit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pjmedia_tone_digit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pjmedia_tone_digit_Sf_SwigStatic = {
    "pjmedia_tone_digit",
    swig_pjmedia_tone_digit_Sf_SwigStatic_methods,
    swig_pjmedia_tone_digit_Sf_SwigStatic_attributes,
    swig_pjmedia_tone_digit_Sf_SwigStatic_constants,
    swig_pjmedia_tone_digit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pjmedia_tone_digit_bases[] = {0};
static const char *swig_pjmedia_tone_digit_base_names[] = {0};
static swig_lua_class _wrap_class_pjmedia_tone_digit = { "pjmedia_tone_digit", "pjmedia_tone_digit", &SWIGTYPE_p_pjmedia_tone_digit,_proxy__wrap_new_pjmedia_tone_digit, swig_delete_pjmedia_tone_digit, swig_pjmedia_tone_digit_methods, swig_pjmedia_tone_digit_attributes, &swig_pjmedia_tone_digit_Sf_SwigStatic, swig_pjmedia_tone_digit_meta, swig_pjmedia_tone_digit_bases, swig_pjmedia_tone_digit_base_names };

static int _wrap_pjmedia_tone_digit_map_count_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_digit_map::count",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit_map::count",1,"pjmedia_tone_digit_map *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_digit_map::count",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit_map,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_map_count_set",1,SWIGTYPE_p_pjmedia_tone_digit_map);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->count = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_digit_map_count_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pjmedia_tone_digit_map::count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_digit_map::count",1,"pjmedia_tone_digit_map *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_digit_map,0))){
    SWIG_fail_ptr("pjmedia_tone_digit_map_count_get",1,SWIGTYPE_p_pjmedia_tone_digit_map);
  }
  
  result = (unsigned int) ((arg1)->count);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pjmedia_tone_digit_map(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_digit_map *result = 0 ;
  
  SWIG_check_num_args("pjmedia_tone_digit_map::pjmedia_tone_digit_map",0,0)
  result = (pjmedia_tone_digit_map *)new pjmedia_tone_digit_map();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pjmedia_tone_digit_map,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pjmedia_tone_digit_map(void *obj) {
pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) obj;
delete arg1;
}
static int _proxy__wrap_new_pjmedia_tone_digit_map(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pjmedia_tone_digit_map);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pjmedia_tone_digit_map_attributes[] = {
    { "count", _wrap_pjmedia_tone_digit_map_count_get, _wrap_pjmedia_tone_digit_map_count_set },
    {0,0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_map_methods[]= {
    {0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_map_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_pjmedia_tone_digit_map_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pjmedia_tone_digit_map_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pjmedia_tone_digit_map_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pjmedia_tone_digit_map_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pjmedia_tone_digit_map_SwigStatic = {
    "pjmedia_tone_digit_map",
    swig_pjmedia_tone_digit_map_SwigStatic_methods,
    swig_pjmedia_tone_digit_map_SwigStatic_attributes,
    swig_pjmedia_tone_digit_map_SwigStatic_constants,
    swig_pjmedia_tone_digit_map_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pjmedia_tone_digit_map_bases[] = {0};
static const char *swig_pjmedia_tone_digit_map_base_names[] = {0};
static swig_lua_class _wrap_class_pjmedia_tone_digit_map = { "pjmedia_tone_digit_map", "pjmedia_tone_digit_map", &SWIGTYPE_p_pjmedia_tone_digit_map,_proxy__wrap_new_pjmedia_tone_digit_map, swig_delete_pjmedia_tone_digit_map, swig_pjmedia_tone_digit_map_methods, swig_pjmedia_tone_digit_map_attributes, &swig_pjmedia_tone_digit_map_SwigStatic, swig_pjmedia_tone_digit_map_meta, swig_pjmedia_tone_digit_map_bases, swig_pjmedia_tone_digit_map_base_names };

static int _wrap_pjmedia_tone_desc_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::freq1",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::freq1",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_freq1_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::freq1",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_freq1_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::freq2",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::freq2",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_freq2_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::freq2",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_freq2_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_on_msec_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::on_msec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::on_msec",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::on_msec",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_on_msec_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->on_msec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_on_msec_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::on_msec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::on_msec",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_on_msec_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->on_msec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_off_msec_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::off_msec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::off_msec",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::off_msec",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_off_msec_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->off_msec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_off_msec_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::off_msec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::off_msec",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_off_msec_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->off_msec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_volume_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::volume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::volume",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::volume",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_volume_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->volume = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_volume_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::volume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::volume",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_volume_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->volume);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::flags",1,"pjmedia_tone_desc *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pjmedia_tone_desc::flags",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_flags_set",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_pjmedia_tone_desc_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  SWIG_check_num_args("pjmedia_tone_desc::flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pjmedia_tone_desc::flags",1,"pjmedia_tone_desc *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pjmedia_tone_desc,0))){
    SWIG_fail_ptr("pjmedia_tone_desc_flags_get",1,SWIGTYPE_p_pjmedia_tone_desc);
  }
  
  result = (short) ((arg1)->flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_pjmedia_tone_desc(lua_State* L) {
  int SWIG_arg = 0;
  pjmedia_tone_desc *result = 0 ;
  
  SWIG_check_num_args("pjmedia_tone_desc::pjmedia_tone_desc",0,0)
  result = (pjmedia_tone_desc *)new pjmedia_tone_desc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pjmedia_tone_desc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_pjmedia_tone_desc(void *obj) {
pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) obj;
delete arg1;
}
static int _proxy__wrap_new_pjmedia_tone_desc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_pjmedia_tone_desc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_pjmedia_tone_desc_attributes[] = {
    { "freq1", _wrap_pjmedia_tone_desc_freq1_get, _wrap_pjmedia_tone_desc_freq1_set },
    { "freq2", _wrap_pjmedia_tone_desc_freq2_get, _wrap_pjmedia_tone_desc_freq2_set },
    { "on_msec", _wrap_pjmedia_tone_desc_on_msec_get, _wrap_pjmedia_tone_desc_on_msec_set },
    { "off_msec", _wrap_pjmedia_tone_desc_off_msec_get, _wrap_pjmedia_tone_desc_off_msec_set },
    { "volume", _wrap_pjmedia_tone_desc_volume_get, _wrap_pjmedia_tone_desc_volume_set },
    { "flags", _wrap_pjmedia_tone_desc_flags_get, _wrap_pjmedia_tone_desc_flags_set },
    {0,0,0}
};
static swig_lua_method swig_pjmedia_tone_desc_methods[]= {
    {0,0}
};
static swig_lua_method swig_pjmedia_tone_desc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_pjmedia_tone_desc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_pjmedia_tone_desc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_pjmedia_tone_desc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_pjmedia_tone_desc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_pjmedia_tone_desc_Sf_SwigStatic = {
    "pjmedia_tone_desc",
    swig_pjmedia_tone_desc_Sf_SwigStatic_methods,
    swig_pjmedia_tone_desc_Sf_SwigStatic_attributes,
    swig_pjmedia_tone_desc_Sf_SwigStatic_constants,
    swig_pjmedia_tone_desc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_pjmedia_tone_desc_bases[] = {0};
static const char *swig_pjmedia_tone_desc_base_names[] = {0};
static swig_lua_class _wrap_class_pjmedia_tone_desc = { "pjmedia_tone_desc", "pjmedia_tone_desc", &SWIGTYPE_p_pjmedia_tone_desc,_proxy__wrap_new_pjmedia_tone_desc, swig_delete_pjmedia_tone_desc, swig_pjmedia_tone_desc_methods, swig_pjmedia_tone_desc_attributes, &swig_pjmedia_tone_desc_Sf_SwigStatic, swig_pjmedia_tone_desc_meta, swig_pjmedia_tone_desc_bases, swig_pjmedia_tone_desc_base_names };

static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_new_StringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",0,0)
  result = (std::vector< std::string > *)new std::vector< std::string >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"std::vector< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::string arg2 ;
  std::vector< std::string > *result = 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< std::string >::vector",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::vector",2,"std::string");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_StringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(unsigned int)\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(unsigned int,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< std::string > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< std::string >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::max_size",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_max_size",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (unsigned int)((std::vector< std::string > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< std::string >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::empty",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_empty",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::clear",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_clear",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("std::vector< std::string >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::push_back",1,"std::vector< std::string > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector< std::string >::push_back",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_push_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  SWIG_check_num_args("std::vector< std::string >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::pop_back",1,"std::vector< std::string > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_pop_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::front",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_front",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< std::string > const *)arg1)->front();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::back",1,"std::vector< std::string > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector_back",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  result = ((std::vector< std::string > const *)arg1)->back();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string result;
  
  SWIG_check_num_args("std::vector< std::string >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__getitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___getitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_std_string_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  unsigned int arg2 ;
  std::string arg3 ;
  
  SWIG_check_num_args("std::vector< std::string >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< std::string >::__setitem__",1,"std::vector< std::string > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< std::string >::__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("std::vector< std::string >::__setitem__",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("StringVector___setitem",1,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  try {
    std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringVector(void *obj) {
std::vector< std::string > *arg1 = (std::vector< std::string > *) obj;
delete arg1;
}
static int _proxy__wrap_new_StringVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StringVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StringVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_StringVector_methods[]= {
    { "size", _wrap_StringVector_size},
    { "max_size", _wrap_StringVector_max_size},
    { "empty", _wrap_StringVector_empty},
    { "clear", _wrap_StringVector_clear},
    { "push_back", _wrap_StringVector_push_back},
    { "pop_back", _wrap_StringVector_pop_back},
    { "front", _wrap_StringVector_front},
    { "back", _wrap_StringVector_back},
    { "__getitem", _wrap_StringVector___getitem},
    { "__setitem", _wrap_StringVector___setitem},
    {0,0}
};
static swig_lua_method swig_StringVector_meta[] = {
    { "__getitem", _wrap_StringVector___getitem},
    { "__setitem", _wrap_StringVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_StringVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StringVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StringVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StringVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StringVector_Sf_SwigStatic = {
    "StringVector",
    swig_StringVector_Sf_SwigStatic_methods,
    swig_StringVector_Sf_SwigStatic_attributes,
    swig_StringVector_Sf_SwigStatic_constants,
    swig_StringVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StringVector_bases[] = {0};
static const char *swig_StringVector_base_names[] = {0};
static swig_lua_class _wrap_class_StringVector = { "StringVector", "StringVector", &SWIGTYPE_p_std__vectorT_std__string_t,_proxy__wrap_new_StringVector, swig_delete_StringVector, swig_StringVector_methods, swig_StringVector_attributes, &swig_StringVector_Sf_SwigStatic, swig_StringVector_meta, swig_StringVector_bases, swig_StringVector_base_names };

static int _wrap_new_IntVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",0,0)
  result = (std::vector< int > *)new std::vector< int >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IntVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< int > *)new std::vector< int >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IntVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"std::vector< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("new_IntVector",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IntVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  int arg2 ;
  std::vector< int > *result = 0 ;
  
  SWIG_check_num_args("std::vector< int >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< int >::vector",1,"unsigned int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::vector",2,"int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (std::vector< int > *)new std::vector< int >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IntVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_IntVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_int_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_IntVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_IntVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IntVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< int >::vector()\n"
    "    std::vector< int >::vector(unsigned int)\n"
    "    std::vector< int >::vector(std::vector< int > const &)\n"
    "    std::vector< int >::vector(unsigned int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_IntVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< int >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::max_size",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_max_size",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (unsigned int)((std::vector< int > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< int >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::empty",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_empty",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (bool)((std::vector< int > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::clear",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_clear",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("std::vector< int >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::push_back",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::push_back",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_push_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIG_check_num_args("std::vector< int >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::pop_back",1,"std::vector< int > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_pop_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::front",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_front",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->front();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::back",1,"std::vector< int > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector_back",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  result = (int)((std::vector< int > const *)arg1)->back();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("std::vector< int >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__getitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector___getitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (int)std_vector_Sl_int_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IntVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("std::vector< int >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< int >::__setitem__",1,"std::vector< int > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< int >::__setitem__",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::vector< int >::__setitem__",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("IntVector___setitem",1,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  try {
    std_vector_Sl_int_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IntVector(void *obj) {
std::vector< int > *arg1 = (std::vector< int > *) obj;
delete arg1;
}
static int _proxy__wrap_new_IntVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IntVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IntVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IntVector_methods[]= {
    { "size", _wrap_IntVector_size},
    { "max_size", _wrap_IntVector_max_size},
    { "empty", _wrap_IntVector_empty},
    { "clear", _wrap_IntVector_clear},
    { "push_back", _wrap_IntVector_push_back},
    { "pop_back", _wrap_IntVector_pop_back},
    { "front", _wrap_IntVector_front},
    { "back", _wrap_IntVector_back},
    { "__getitem", _wrap_IntVector___getitem},
    { "__setitem", _wrap_IntVector___setitem},
    {0,0}
};
static swig_lua_method swig_IntVector_meta[] = {
    { "__getitem", _wrap_IntVector___getitem},
    { "__setitem", _wrap_IntVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_IntVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IntVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IntVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IntVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IntVector_Sf_SwigStatic = {
    "IntVector",
    swig_IntVector_Sf_SwigStatic_methods,
    swig_IntVector_Sf_SwigStatic_attributes,
    swig_IntVector_Sf_SwigStatic_constants,
    swig_IntVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IntVector_bases[] = {0};
static const char *swig_IntVector_base_names[] = {0};
static swig_lua_class _wrap_class_IntVector = { "IntVector", "IntVector", &SWIGTYPE_p_std__vectorT_int_t,_proxy__wrap_new_IntVector, swig_delete_IntVector, swig_IntVector_methods, swig_IntVector_attributes, &swig_IntVector_Sf_SwigStatic, swig_IntVector_meta, swig_IntVector_bases, swig_IntVector_base_names };

static int _wrap_Error_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::Error::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::status",1,"pj::Error *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Error::status",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_status_set",1,SWIGTYPE_p_pj__Error);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::Error::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::status",1,"pj::Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_status_get",1,SWIGTYPE_p_pj__Error);
  }
  
  result = (pj_status_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_title_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Error::title",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::title",1,"pj::Error *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Error::title",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_title_set",1,SWIGTYPE_p_pj__Error);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->title = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_title_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::Error::title",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::title",1,"pj::Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_title_get",1,SWIGTYPE_p_pj__Error);
  }
  
  result = (pj::string *) & ((arg1)->title);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Error::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::reason",1,"pj::Error *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Error::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_reason_set",1,SWIGTYPE_p_pj__Error);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::Error::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::reason",1,"pj::Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_reason_get",1,SWIGTYPE_p_pj__Error);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_srcFile_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Error::srcFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::srcFile",1,"pj::Error *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Error::srcFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_srcFile_set",1,SWIGTYPE_p_pj__Error);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->srcFile = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_srcFile_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::Error::srcFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::srcFile",1,"pj::Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_srcFile_get",1,SWIGTYPE_p_pj__Error);
  }
  
  result = (pj::string *) & ((arg1)->srcFile);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_srcLine_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::Error::srcLine",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::srcLine",1,"pj::Error *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Error::srcLine",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_srcLine_set",1,SWIGTYPE_p_pj__Error);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->srcLine = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_srcLine_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Error::srcLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::srcLine",1,"pj::Error *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_srcLine_get",1,SWIGTYPE_p_pj__Error);
  }
  
  result = (int) ((arg1)->srcLine);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_info__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  bool arg2 ;
  pj::string result;
  
  SWIG_check_num_args("pj::Error::info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::info",1,"pj::Error const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::Error::info",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_info",1,SWIGTYPE_p_pj__Error);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((pj::Error const *)arg1)->info(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_info__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::Error::info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Error::info",1,"pj::Error const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Error,0))){
    SWIG_fail_ptr("Error_info",1,SWIGTYPE_p_pj__Error);
  }
  
  result = ((pj::Error const *)arg1)->info();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Error_info(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Error, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Error_info__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Error, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Error_info__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Error_info'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Error::info(bool) const\n"
    "    pj::Error::info() const\n");
  lua_error(L);return 0;
}


static int _wrap_new_Error__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Error *result = 0 ;
  
  SWIG_check_num_args("pj::Error::Error",0,0)
  result = (pj::Error *)new pj::Error();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Error,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Error__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj_status_t arg1 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  int arg5 ;
  pj::string temp2 ;
  pj::string temp3 ;
  pj::string temp4 ;
  pj::Error *result = 0 ;
  
  SWIG_check_num_args("pj::Error::Error",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pj::Error::Error",1,"pj_status_t");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Error::Error",2,"pj::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::Error::Error",3,"pj::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("pj::Error::Error",4,"pj::string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("pj::Error::Error",5,"int");
  arg1 = (pj_status_t)lua_tonumber(L, 1);
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  arg5 = (int)lua_tonumber(L, 5);
  result = (pj::Error *)new pj::Error(arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,(pj::string const &)*arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Error,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Error(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Error__SWIG_0(L);
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_Error__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Error'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Error::Error()\n"
    "    pj::Error::Error(pj_status_t,pj::string const &,pj::string const &,pj::string const &,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_Error(void *obj) {
pj::Error *arg1 = (pj::Error *) obj;
delete arg1;
}
static int _proxy__wrap_new_Error(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Error);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Error_attributes[] = {
    { "status", _wrap_Error_status_get, _wrap_Error_status_set },
    { "title", _wrap_Error_title_get, _wrap_Error_title_set },
    { "reason", _wrap_Error_reason_get, _wrap_Error_reason_set },
    { "srcFile", _wrap_Error_srcFile_get, _wrap_Error_srcFile_set },
    { "srcLine", _wrap_Error_srcLine_get, _wrap_Error_srcLine_set },
    {0,0,0}
};
static swig_lua_method swig_Error_methods[]= {
    { "info", _wrap_Error_info},
    {0,0}
};
static swig_lua_method swig_Error_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Error_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Error_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Error_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Error_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Error_Sf_SwigStatic = {
    "Error",
    swig_Error_Sf_SwigStatic_methods,
    swig_Error_Sf_SwigStatic_attributes,
    swig_Error_Sf_SwigStatic_constants,
    swig_Error_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Error_bases[] = {0};
static const char *swig_Error_base_names[] = {0};
static swig_lua_class _wrap_class_Error = { "Error", "Error", &SWIGTYPE_p_pj__Error,_proxy__wrap_new_Error, swig_delete_Error, swig_Error_methods, swig_Error_attributes, &swig_Error_Sf_SwigStatic, swig_Error_meta, swig_Error_bases, swig_Error_base_names };

static int _wrap_Version_major_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::Version::major",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::major",1,"pj::Version *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Version::major",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_major_set",1,SWIGTYPE_p_pj__Version);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->major = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_major_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Version::major",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::major",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_major_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (int) ((arg1)->major);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_minor_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::Version::minor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::minor",1,"pj::Version *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Version::minor",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_minor_set",1,SWIGTYPE_p_pj__Version);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_minor_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Version::minor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::minor",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_minor_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (int) ((arg1)->minor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_rev_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::Version::rev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::rev",1,"pj::Version *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Version::rev",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_rev_set",1,SWIGTYPE_p_pj__Version);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_rev_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Version::rev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::rev",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_rev_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (int) ((arg1)->rev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_suffix_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Version::suffix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::suffix",1,"pj::Version *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Version::suffix",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_suffix_set",1,SWIGTYPE_p_pj__Version);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->suffix = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_suffix_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::Version::suffix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::suffix",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_suffix_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (pj::string *) & ((arg1)->suffix);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_full_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Version::full",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::full",1,"pj::Version *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Version::full",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_full_set",1,SWIGTYPE_p_pj__Version);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->full = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_full_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::Version::full",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::full",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_full_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (pj::string *) & ((arg1)->full);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_numeric_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::Version::numeric",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::numeric",1,"pj::Version *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Version::numeric",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_numeric_set",1,SWIGTYPE_p_pj__Version);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->numeric = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Version_numeric_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::Version::numeric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Version::numeric",1,"pj::Version *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Version,0))){
    SWIG_fail_ptr("Version_numeric_get",1,SWIGTYPE_p_pj__Version);
  }
  
  result = (unsigned int) ((arg1)->numeric);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Version(lua_State* L) {
  int SWIG_arg = 0;
  pj::Version *result = 0 ;
  
  SWIG_check_num_args("pj::Version::Version",0,0)
  result = (pj::Version *)new pj::Version();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Version,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Version(void *obj) {
pj::Version *arg1 = (pj::Version *) obj;
delete arg1;
}
static int _proxy__wrap_new_Version(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Version);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Version_attributes[] = {
    { "major", _wrap_Version_major_get, _wrap_Version_major_set },
    { "minor", _wrap_Version_minor_get, _wrap_Version_minor_set },
    { "rev", _wrap_Version_rev_get, _wrap_Version_rev_set },
    { "suffix", _wrap_Version_suffix_get, _wrap_Version_suffix_set },
    { "full", _wrap_Version_full_get, _wrap_Version_full_set },
    { "numeric", _wrap_Version_numeric_get, _wrap_Version_numeric_set },
    {0,0,0}
};
static swig_lua_method swig_Version_methods[]= {
    {0,0}
};
static swig_lua_method swig_Version_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Version_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Version_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Version_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Version_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Version_Sf_SwigStatic = {
    "Version",
    swig_Version_Sf_SwigStatic_methods,
    swig_Version_Sf_SwigStatic_attributes,
    swig_Version_Sf_SwigStatic_constants,
    swig_Version_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Version_bases[] = {0};
static const char *swig_Version_base_names[] = {0};
static swig_lua_class _wrap_class_Version = { "Version", "Version", &SWIGTYPE_p_pj__Version,_proxy__wrap_new_Version, swig_delete_Version, swig_Version_methods, swig_Version_attributes, &swig_Version_Sf_SwigStatic, swig_Version_meta, swig_Version_bases, swig_Version_base_names };

static int _wrap_TimeVal_sec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("pj::TimeVal::sec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimeVal::sec",1,"pj::TimeVal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TimeVal::sec",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("TimeVal_sec_set",1,SWIGTYPE_p_pj__TimeVal);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->sec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeVal_sec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  SWIG_check_num_args("pj::TimeVal::sec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimeVal::sec",1,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("TimeVal_sec_get",1,SWIGTYPE_p_pj__TimeVal);
  }
  
  result = (long) ((arg1)->sec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeVal_msec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("pj::TimeVal::msec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimeVal::msec",1,"pj::TimeVal *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TimeVal::msec",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("TimeVal_msec_set",1,SWIGTYPE_p_pj__TimeVal);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->msec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimeVal_msec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  SWIG_check_num_args("pj::TimeVal::msec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimeVal::msec",1,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("TimeVal_msec_get",1,SWIGTYPE_p_pj__TimeVal);
  }
  
  result = (long) ((arg1)->msec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimeVal(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimeVal *result = 0 ;
  
  SWIG_check_num_args("pj::TimeVal::TimeVal",0,0)
  result = (pj::TimeVal *)new pj::TimeVal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimeVal,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimeVal(void *obj) {
pj::TimeVal *arg1 = (pj::TimeVal *) obj;
delete arg1;
}
static int _proxy__wrap_new_TimeVal(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TimeVal);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TimeVal_attributes[] = {
    { "sec", _wrap_TimeVal_sec_get, _wrap_TimeVal_sec_set },
    { "msec", _wrap_TimeVal_msec_get, _wrap_TimeVal_msec_set },
    {0,0,0}
};
static swig_lua_method swig_TimeVal_methods[]= {
    {0,0}
};
static swig_lua_method swig_TimeVal_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TimeVal_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TimeVal_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TimeVal_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TimeVal_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TimeVal_Sf_SwigStatic = {
    "TimeVal",
    swig_TimeVal_Sf_SwigStatic_methods,
    swig_TimeVal_Sf_SwigStatic_attributes,
    swig_TimeVal_Sf_SwigStatic_constants,
    swig_TimeVal_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TimeVal_bases[] = {0};
static const char *swig_TimeVal_base_names[] = {0};
static swig_lua_class _wrap_class_TimeVal = { "TimeVal", "TimeVal", &SWIGTYPE_p_pj__TimeVal,_proxy__wrap_new_TimeVal, swig_delete_TimeVal, swig_TimeVal_methods, swig_TimeVal_attributes, &swig_TimeVal_Sf_SwigStatic, swig_TimeVal_meta, swig_TimeVal_bases, swig_TimeVal_base_names };

static int _wrap_PersistentObject_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::PersistentObject::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentObject::readObject",1,"pj::PersistentObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::PersistentObject::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("PersistentObject_readObject",1,SWIGTYPE_p_pj__PersistentObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("PersistentObject_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentObject_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::PersistentObject::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentObject::writeObject",1,"pj::PersistentObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::PersistentObject::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("PersistentObject_writeObject",1,SWIGTYPE_p_pj__PersistentObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("PersistentObject_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::PersistentObject const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PersistentObject(void *obj) {
pj::PersistentObject *arg1 = (pj::PersistentObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_PersistentObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PersistentObject_methods[]= {
    { "readObject", _wrap_PersistentObject_readObject},
    { "writeObject", _wrap_PersistentObject_writeObject},
    {0,0}
};
static swig_lua_method swig_PersistentObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PersistentObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PersistentObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PersistentObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PersistentObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PersistentObject_Sf_SwigStatic = {
    "PersistentObject",
    swig_PersistentObject_Sf_SwigStatic_methods,
    swig_PersistentObject_Sf_SwigStatic_attributes,
    swig_PersistentObject_Sf_SwigStatic_constants,
    swig_PersistentObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PersistentObject_bases[] = {0};
static const char *swig_PersistentObject_base_names[] = {0};
static swig_lua_class _wrap_class_PersistentObject = { "PersistentObject", "PersistentObject", &SWIGTYPE_p_pj__PersistentObject,0, swig_delete_PersistentObject, swig_PersistentObject_methods, swig_PersistentObject_attributes, &swig_PersistentObject_Sf_SwigStatic, swig_PersistentObject_meta, swig_PersistentObject_bases, swig_PersistentObject_base_names };

static int _wrap_PersistentDocument_loadFile(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::loadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::loadFile",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::loadFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_loadFile",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_loadString(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::loadString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::loadString",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::loadString",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_loadString",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_saveFile(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::saveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::saveFile",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::saveFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_saveFile",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_saveString(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::PersistentDocument::saveString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::saveString",1,"pj::PersistentDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_saveString",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = (arg1)->saveString();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_getRootContainer(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  SWIG_check_num_args("pj::PersistentDocument::getRootContainer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::getRootContainer",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_getRootContainer",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  result = (pj::ContainerNode *) &((pj::PersistentDocument const *)arg1)->getRootContainer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ContainerNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_hasUnread(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::PersistentDocument::hasUnread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::hasUnread",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_hasUnread",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  result = (bool)((pj::PersistentDocument const *)arg1)->hasUnread();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_unreadName(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::PersistentDocument::unreadName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::unreadName",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_unreadName",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = ((pj::PersistentDocument const *)arg1)->unreadName();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  int result;
  
  SWIG_check_num_args("pj::PersistentDocument::readInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readInt",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readInt",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readInt",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::PersistentDocument::readInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readInt",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readInt",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readInt__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readInt(pj::string const &) const\n"
    "    pj::PersistentDocument::readInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readNumber__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  float result;
  
  SWIG_check_num_args("pj::PersistentDocument::readNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readNumber",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readNumber",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readNumber",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readNumber__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  float result;
  
  SWIG_check_num_args("pj::PersistentDocument::readNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readNumber",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readNumber",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readNumber(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readNumber__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readNumber__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readNumber'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readNumber(pj::string const &) const\n"
    "    pj::PersistentDocument::readNumber() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  bool result;
  
  SWIG_check_num_args("pj::PersistentDocument::readBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readBool",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readBool",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readBool",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::PersistentDocument::readBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readBool",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readBool",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readBool(pj::string const &) const\n"
    "    pj::PersistentDocument::readBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::string result;
  
  SWIG_check_num_args("pj::PersistentDocument::readString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readString",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readString",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readString",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::PersistentDocument::readString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readString",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readString",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readString(pj::string const &) const\n"
    "    pj::PersistentDocument::readString() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readStringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::StringVector result;
  
  SWIG_check_num_args("pj::PersistentDocument::readStringVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readStringVector",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readStringVector",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readStringVector",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StringVector * resultptr = new pj::StringVector((const pj::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readStringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::StringVector result;
  
  SWIG_check_num_args("pj::PersistentDocument::readStringVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readStringVector",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readStringVector",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StringVector * resultptr = new pj::StringVector((const pj::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readStringVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readStringVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readStringVector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readStringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readStringVector(pj::string const &) const\n"
    "    pj::PersistentDocument::readStringVector() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  SWIG_check_num_args("pj::PersistentDocument::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readObject",1,"pj::PersistentDocument const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::PersistentDocument::readObject",2,"pj::PersistentObject &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readObject",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("PersistentDocument_readObject",2,SWIGTYPE_p_pj__PersistentObject);
  }
  
  try {
    ((pj::PersistentDocument const *)arg1)->readObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readContainer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::readContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readContainer",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readContainer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readContainer",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readContainer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::readContainer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readContainer",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readContainer",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readContainer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readContainer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readContainer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readContainer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readContainer(pj::string const &) const\n"
    "    pj::PersistentDocument::readContainer() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_readArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::readArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readArray",1,"pj::PersistentDocument const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::readArray",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readArray",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::readArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::readArray",1,"pj::PersistentDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_readArray",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_readArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_PersistentDocument_readArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__PersistentDocument, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PersistentDocument_readArray__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PersistentDocument_readArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::PersistentDocument::readArray(pj::string const &) const\n"
    "    pj::PersistentDocument::readArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_PersistentDocument_writeNumber(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeNumber",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeNumber",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeNumber",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::PersistentDocument::writeNumber",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeNumber",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3);
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeInt(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeInt",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeInt",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::PersistentDocument::writeInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeInt",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeBool(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeBool",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeBool",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeBool",2,"pj::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::PersistentDocument::writeBool",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeBool",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeString(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string temp2 ;
  pj::string temp3 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeString",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeString",2,"pj::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::PersistentDocument::writeString",3,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeString",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeStringVector(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeStringVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeStringVector",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeStringVector",2,"pj::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::PersistentDocument::writeStringVector",3,"pj::StringVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeStringVector",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("PersistentDocument_writeStringVector",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  SWIG_check_num_args("pj::PersistentDocument::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeObject",1,"pj::PersistentDocument *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeObject",2,"pj::PersistentObject const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeObject",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("PersistentDocument_writeObject",2,SWIGTYPE_p_pj__PersistentObject);
  }
  
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeNewContainer(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::writeNewContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeNewContainer",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeNewContainer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeNewContainer",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PersistentDocument_writeNewArray(lua_State* L) {
  int SWIG_arg = 0;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::PersistentDocument::writeNewArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PersistentDocument::writeNewArray",1,"pj::PersistentDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PersistentDocument::writeNewArray",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PersistentDocument,0))){
    SWIG_fail_ptr("PersistentDocument_writeNewArray",1,SWIGTYPE_p_pj__PersistentDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PersistentDocument(void *obj) {
pj::PersistentDocument *arg1 = (pj::PersistentDocument *) obj;
delete arg1;
}
static swig_lua_attribute swig_PersistentDocument_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PersistentDocument_methods[]= {
    { "loadFile", _wrap_PersistentDocument_loadFile},
    { "loadString", _wrap_PersistentDocument_loadString},
    { "saveFile", _wrap_PersistentDocument_saveFile},
    { "saveString", _wrap_PersistentDocument_saveString},
    { "getRootContainer", _wrap_PersistentDocument_getRootContainer},
    { "hasUnread", _wrap_PersistentDocument_hasUnread},
    { "unreadName", _wrap_PersistentDocument_unreadName},
    { "readInt", _wrap_PersistentDocument_readInt},
    { "readNumber", _wrap_PersistentDocument_readNumber},
    { "readBool", _wrap_PersistentDocument_readBool},
    { "readString", _wrap_PersistentDocument_readString},
    { "readStringVector", _wrap_PersistentDocument_readStringVector},
    { "readObject", _wrap_PersistentDocument_readObject},
    { "readContainer", _wrap_PersistentDocument_readContainer},
    { "readArray", _wrap_PersistentDocument_readArray},
    { "writeNumber", _wrap_PersistentDocument_writeNumber},
    { "writeInt", _wrap_PersistentDocument_writeInt},
    { "writeBool", _wrap_PersistentDocument_writeBool},
    { "writeString", _wrap_PersistentDocument_writeString},
    { "writeStringVector", _wrap_PersistentDocument_writeStringVector},
    { "writeObject", _wrap_PersistentDocument_writeObject},
    { "writeNewContainer", _wrap_PersistentDocument_writeNewContainer},
    { "writeNewArray", _wrap_PersistentDocument_writeNewArray},
    {0,0}
};
static swig_lua_method swig_PersistentDocument_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PersistentDocument_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PersistentDocument_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PersistentDocument_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PersistentDocument_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PersistentDocument_Sf_SwigStatic = {
    "PersistentDocument",
    swig_PersistentDocument_Sf_SwigStatic_methods,
    swig_PersistentDocument_Sf_SwigStatic_attributes,
    swig_PersistentDocument_Sf_SwigStatic_constants,
    swig_PersistentDocument_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PersistentDocument_bases[] = {0};
static const char *swig_PersistentDocument_base_names[] = {0};
static swig_lua_class _wrap_class_PersistentDocument = { "PersistentDocument", "PersistentDocument", &SWIGTYPE_p_pj__PersistentDocument,0, swig_delete_PersistentDocument, swig_PersistentDocument_methods, swig_PersistentDocument_attributes, &swig_PersistentDocument_Sf_SwigStatic, swig_PersistentDocument_meta, swig_PersistentDocument_bases, swig_PersistentDocument_base_names };

static int _wrap_ContainerNode_hasUnread(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::ContainerNode::hasUnread",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::hasUnread",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_hasUnread",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  result = (bool)((pj::ContainerNode const *)arg1)->hasUnread();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_unreadName(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::ContainerNode::unreadName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::unreadName",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_unreadName",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = ((pj::ContainerNode const *)arg1)->unreadName();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  int result;
  
  SWIG_check_num_args("pj::ContainerNode::readInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readInt",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readInt",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readInt",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::ContainerNode::readInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readInt",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readInt",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readInt__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readInt(pj::string const &) const\n"
    "    pj::ContainerNode::readInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readNumber__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  float result;
  
  SWIG_check_num_args("pj::ContainerNode::readNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readNumber",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readNumber",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readNumber",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readNumber__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  float result;
  
  SWIG_check_num_args("pj::ContainerNode::readNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readNumber",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readNumber",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readNumber(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readNumber__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readNumber__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readNumber'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readNumber(pj::string const &) const\n"
    "    pj::ContainerNode::readNumber() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  bool result;
  
  SWIG_check_num_args("pj::ContainerNode::readBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readBool",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readBool",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readBool",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::ContainerNode::readBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readBool",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readBool",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readBool(pj::string const &) const\n"
    "    pj::ContainerNode::readBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::string result;
  
  SWIG_check_num_args("pj::ContainerNode::readString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readString",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readString",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readString",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::ContainerNode const *)arg1)->readString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::ContainerNode::readString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readString",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readString",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = ((pj::ContainerNode const *)arg1)->readString();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readString(pj::string const &) const\n"
    "    pj::ContainerNode::readString() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readStringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::StringVector result;
  
  SWIG_check_num_args("pj::ContainerNode::readStringVector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readStringVector",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readStringVector",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readStringVector",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StringVector * resultptr = new pj::StringVector((const pj::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readStringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::StringVector result;
  
  SWIG_check_num_args("pj::ContainerNode::readStringVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readStringVector",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readStringVector",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StringVector * resultptr = new pj::StringVector((const pj::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readStringVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readStringVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readStringVector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readStringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readStringVector(pj::string const &) const\n"
    "    pj::ContainerNode::readStringVector() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  SWIG_check_num_args("pj::ContainerNode::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readObject",1,"pj::ContainerNode const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ContainerNode::readObject",2,"pj::PersistentObject &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readObject",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("ContainerNode_readObject",2,SWIGTYPE_p_pj__PersistentObject);
  }
  
  try {
    ((pj::ContainerNode const *)arg1)->readObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readContainer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::readContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readContainer",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readContainer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readContainer",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readContainer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::readContainer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readContainer",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readContainer",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readContainer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readContainer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readContainer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readContainer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readContainer(pj::string const &) const\n"
    "    pj::ContainerNode::readContainer() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_readArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::readArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readArray",1,"pj::ContainerNode const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::readArray",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readArray",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::readArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::readArray",1,"pj::ContainerNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_readArray",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_readArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ContainerNode_readArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ContainerNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_ContainerNode_readArray__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ContainerNode_readArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ContainerNode::readArray(pj::string const &) const\n"
    "    pj::ContainerNode::readArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_ContainerNode_writeNumber(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeNumber",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeNumber",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeNumber",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::ContainerNode::writeNumber",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeNumber",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3);
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeInt(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeInt",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeInt",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::ContainerNode::writeInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeInt",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeBool(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeBool",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeBool",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeBool",2,"pj::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::ContainerNode::writeBool",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeBool",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeString(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string temp2 ;
  pj::string temp3 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeString",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeString",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeString",2,"pj::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::ContainerNode::writeString",3,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeString",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeStringVector(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeStringVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeStringVector",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeStringVector",2,"pj::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::ContainerNode::writeStringVector",3,"pj::StringVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeStringVector",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("ContainerNode_writeStringVector",3,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  SWIG_check_num_args("pj::ContainerNode::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeObject",1,"pj::ContainerNode *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ContainerNode::writeObject",2,"pj::PersistentObject const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeObject",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PersistentObject,0))){
    SWIG_fail_ptr("ContainerNode_writeObject",2,SWIGTYPE_p_pj__PersistentObject);
  }
  
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeNewContainer(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::writeNewContainer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeNewContainer",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeNewContainer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeNewContainer",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ContainerNode_writeNewArray(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::ContainerNode result;
  
  SWIG_check_num_args("pj::ContainerNode::writeNewArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ContainerNode::writeNewArray",1,"pj::ContainerNode *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ContainerNode::writeNewArray",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("ContainerNode_writeNewArray",1,SWIGTYPE_p_pj__ContainerNode);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ContainerNode * resultptr = new pj::ContainerNode((const pj::ContainerNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ContainerNode(lua_State* L) {
  int SWIG_arg = 0;
  pj::ContainerNode *result = 0 ;
  
  SWIG_check_num_args("pj::ContainerNode::ContainerNode",0,0)
  result = (pj::ContainerNode *)new pj::ContainerNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ContainerNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ContainerNode(void *obj) {
pj::ContainerNode *arg1 = (pj::ContainerNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_ContainerNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ContainerNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ContainerNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ContainerNode_methods[]= {
    { "hasUnread", _wrap_ContainerNode_hasUnread},
    { "unreadName", _wrap_ContainerNode_unreadName},
    { "readInt", _wrap_ContainerNode_readInt},
    { "readNumber", _wrap_ContainerNode_readNumber},
    { "readBool", _wrap_ContainerNode_readBool},
    { "readString", _wrap_ContainerNode_readString},
    { "readStringVector", _wrap_ContainerNode_readStringVector},
    { "readObject", _wrap_ContainerNode_readObject},
    { "readContainer", _wrap_ContainerNode_readContainer},
    { "readArray", _wrap_ContainerNode_readArray},
    { "writeNumber", _wrap_ContainerNode_writeNumber},
    { "writeInt", _wrap_ContainerNode_writeInt},
    { "writeBool", _wrap_ContainerNode_writeBool},
    { "writeString", _wrap_ContainerNode_writeString},
    { "writeStringVector", _wrap_ContainerNode_writeStringVector},
    { "writeObject", _wrap_ContainerNode_writeObject},
    { "writeNewContainer", _wrap_ContainerNode_writeNewContainer},
    { "writeNewArray", _wrap_ContainerNode_writeNewArray},
    {0,0}
};
static swig_lua_method swig_ContainerNode_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ContainerNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ContainerNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ContainerNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ContainerNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ContainerNode_Sf_SwigStatic = {
    "ContainerNode",
    swig_ContainerNode_Sf_SwigStatic_methods,
    swig_ContainerNode_Sf_SwigStatic_attributes,
    swig_ContainerNode_Sf_SwigStatic_constants,
    swig_ContainerNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ContainerNode_bases[] = {0};
static const char *swig_ContainerNode_base_names[] = {0};
static swig_lua_class _wrap_class_ContainerNode = { "ContainerNode", "ContainerNode", &SWIGTYPE_p_pj__ContainerNode,_proxy__wrap_new_ContainerNode, swig_delete_ContainerNode, swig_ContainerNode_methods, swig_ContainerNode_attributes, &swig_ContainerNode_Sf_SwigStatic, swig_ContainerNode_meta, swig_ContainerNode_bases, swig_ContainerNode_base_names };

static int _wrap_AuthCredInfo_scheme_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::scheme",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::scheme",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::scheme",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_scheme_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->scheme = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_scheme_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::scheme",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::scheme",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_scheme_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->scheme);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_realm_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::realm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::realm",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::realm",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_realm_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->realm = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_realm_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::realm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::realm",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_realm_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->realm);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_username_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::username",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::username",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::username",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_username_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->username = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_username_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::username",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::username",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_username_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->username);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_dataType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::dataType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::dataType",1,"pj::AuthCredInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AuthCredInfo::dataType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_dataType_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dataType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_dataType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AuthCredInfo::dataType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::dataType",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_dataType_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (int) ((arg1)->dataType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_data_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::data",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::data",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_data_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->data = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_data_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::data",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_data_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->data);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaK_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaK",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaK",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::akaK",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaK_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->akaK = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaK_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaK",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaK",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaK_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->akaK);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaOp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaOp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaOp",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::akaOp",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaOp_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->akaOp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaOp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaOp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaOp",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaOp_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->akaOp);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaAmf_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaAmf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaAmf",1,"pj::AuthCredInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::akaAmf",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaAmf_set",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->akaAmf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_akaAmf_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::akaAmf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::akaAmf",1,"pj::AuthCredInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_akaAmf_get",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  result = (pj::string *) & ((arg1)->akaAmf);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfo__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::AuthCredInfo",0,0)
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AuthCredInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfo__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::string *arg1 = 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int arg4 ;
  pj::string arg5 ;
  pj::string temp1 ;
  pj::string temp2 ;
  pj::string temp3 ;
  pj::AuthCredInfo *result = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::AuthCredInfo",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("pj::AuthCredInfo::AuthCredInfo",1,"pj::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AuthCredInfo::AuthCredInfo",2,"pj::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::AuthCredInfo::AuthCredInfo",3,"pj::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("pj::AuthCredInfo::AuthCredInfo",4,"int const");
  if(!lua_isstring(L,5)) SWIG_fail_arg("pj::AuthCredInfo::AuthCredInfo",5,"pj::string const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int const)lua_tonumber(L, 4);
  (&arg5)->assign(lua_tostring(L,5),lua_rawlen(L,5));
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo((pj::string const &)*arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AuthCredInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfo(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AuthCredInfo__SWIG_0(L);
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_AuthCredInfo__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AuthCredInfo'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AuthCredInfo::AuthCredInfo()\n"
    "    pj::AuthCredInfo::AuthCredInfo(pj::string const &,pj::string const &,pj::string const &,int const,pj::string const)\n");
  lua_error(L);return 0;
}


static int _wrap_AuthCredInfo_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::readObject",1,"pj::AuthCredInfo *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AuthCredInfo::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_readObject",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AuthCredInfo_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfo_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AuthCredInfo::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AuthCredInfo::writeObject",1,"pj::AuthCredInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AuthCredInfo::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfo_writeObject",1,SWIGTYPE_p_pj__AuthCredInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AuthCredInfo_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AuthCredInfo const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AuthCredInfo(void *obj) {
pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_AuthCredInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AuthCredInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AuthCredInfo_attributes[] = {
    { "scheme", _wrap_AuthCredInfo_scheme_get, _wrap_AuthCredInfo_scheme_set },
    { "realm", _wrap_AuthCredInfo_realm_get, _wrap_AuthCredInfo_realm_set },
    { "username", _wrap_AuthCredInfo_username_get, _wrap_AuthCredInfo_username_set },
    { "dataType", _wrap_AuthCredInfo_dataType_get, _wrap_AuthCredInfo_dataType_set },
    { "data", _wrap_AuthCredInfo_data_get, _wrap_AuthCredInfo_data_set },
    { "akaK", _wrap_AuthCredInfo_akaK_get, _wrap_AuthCredInfo_akaK_set },
    { "akaOp", _wrap_AuthCredInfo_akaOp_get, _wrap_AuthCredInfo_akaOp_set },
    { "akaAmf", _wrap_AuthCredInfo_akaAmf_get, _wrap_AuthCredInfo_akaAmf_set },
    {0,0,0}
};
static swig_lua_method swig_AuthCredInfo_methods[]= {
    { "readObject", _wrap_AuthCredInfo_readObject},
    { "writeObject", _wrap_AuthCredInfo_writeObject},
    {0,0}
};
static swig_lua_method swig_AuthCredInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AuthCredInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AuthCredInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AuthCredInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AuthCredInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AuthCredInfo_Sf_SwigStatic = {
    "AuthCredInfo",
    swig_AuthCredInfo_Sf_SwigStatic_methods,
    swig_AuthCredInfo_Sf_SwigStatic_attributes,
    swig_AuthCredInfo_Sf_SwigStatic_constants,
    swig_AuthCredInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AuthCredInfo_bases[] = {0,0};
static const char *swig_AuthCredInfo_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AuthCredInfo = { "AuthCredInfo", "AuthCredInfo", &SWIGTYPE_p_pj__AuthCredInfo,_proxy__wrap_new_AuthCredInfo, swig_delete_AuthCredInfo, swig_AuthCredInfo_methods, swig_AuthCredInfo_attributes, &swig_AuthCredInfo_Sf_SwigStatic, swig_AuthCredInfo_meta, swig_AuthCredInfo_bases, swig_AuthCredInfo_base_names };

static int _wrap_TlsConfig_CaListFile_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TlsConfig::CaListFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::CaListFile",1,"pj::TlsConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TlsConfig::CaListFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_CaListFile_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->CaListFile = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_CaListFile_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::CaListFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::CaListFile",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_CaListFile_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj::string *) & ((arg1)->CaListFile);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_certFile_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TlsConfig::certFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::certFile",1,"pj::TlsConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TlsConfig::certFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_certFile_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->certFile = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_certFile_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::certFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::certFile",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_certFile_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj::string *) & ((arg1)->certFile);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_privKeyFile_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TlsConfig::privKeyFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::privKeyFile",1,"pj::TlsConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TlsConfig::privKeyFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_privKeyFile_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->privKeyFile = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_privKeyFile_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::privKeyFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::privKeyFile",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_privKeyFile_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj::string *) & ((arg1)->privKeyFile);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_password_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TlsConfig::password",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::password",1,"pj::TlsConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TlsConfig::password",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_password_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->password = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_password_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::password",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::password",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_password_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj::string *) & ((arg1)->password);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_method_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::method",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::method",1,"pj::TlsConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TlsConfig::method",2,"pjsip_ssl_method");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_method_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (pjsip_ssl_method)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->method = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_method_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method result;
  
  SWIG_check_num_args("pj::TlsConfig::method",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::method",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_method_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pjsip_ssl_method) ((arg1)->method);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_ciphers_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::ciphers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::ciphers",1,"pj::TlsConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TlsConfig::ciphers",2,"pj::IntVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_ciphers_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("TlsConfig_ciphers_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  if (arg1) (arg1)->ciphers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_ciphers_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::ciphers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::ciphers",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_ciphers_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj::IntVector *)& ((arg1)->ciphers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_verifyServer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::verifyServer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::verifyServer",1,"pj::TlsConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::TlsConfig::verifyServer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_verifyServer_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->verifyServer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_verifyServer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::TlsConfig::verifyServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::verifyServer",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_verifyServer_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (bool) ((arg1)->verifyServer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_verifyClient_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::verifyClient",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::verifyClient",1,"pj::TlsConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::TlsConfig::verifyClient",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_verifyClient_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->verifyClient = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_verifyClient_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::TlsConfig::verifyClient",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::verifyClient",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_verifyClient_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (bool) ((arg1)->verifyClient);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_requireClientCert_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::requireClientCert",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::requireClientCert",1,"pj::TlsConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::TlsConfig::requireClientCert",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_requireClientCert_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->requireClientCert = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_requireClientCert_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::TlsConfig::requireClientCert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::requireClientCert",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_requireClientCert_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (bool) ((arg1)->requireClientCert);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_msecTimeout_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::msecTimeout",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::msecTimeout",1,"pj::TlsConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TlsConfig::msecTimeout",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_msecTimeout_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->msecTimeout = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_msecTimeout_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::TlsConfig::msecTimeout",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::msecTimeout",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_msecTimeout_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (unsigned int) ((arg1)->msecTimeout);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::qosType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosType",1,"pj::TlsConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TlsConfig::qosType",2,"pj_qos_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosType_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (pj_qos_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->qosType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type result;
  
  SWIG_check_num_args("pj::TlsConfig::qosType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosType",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosType_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj_qos_type) ((arg1)->qosType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosParams_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::qosParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosParams",1,"pj::TlsConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TlsConfig::qosParams",2,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosParams_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("TlsConfig_qosParams_set",2,SWIGTYPE_p_pj_qos_params);
  }
  
  if (arg1) (arg1)->qosParams = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosParams_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::qosParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosParams",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosParams_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (pj_qos_params *)& ((arg1)->qosParams);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj_qos_params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosIgnoreError_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::TlsConfig::qosIgnoreError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosIgnoreError",1,"pj::TlsConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::TlsConfig::qosIgnoreError",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosIgnoreError_set",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->qosIgnoreError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_qosIgnoreError_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::TlsConfig::qosIgnoreError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::qosIgnoreError",1,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_qosIgnoreError_get",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  result = (bool) ((arg1)->qosIgnoreError);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TlsConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *result = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::TlsConfig",0,0)
  result = (pj::TlsConfig *)new pj::TlsConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TlsConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::readObject",1,"pj::TlsConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::TlsConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_readObject",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("TlsConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TlsConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::TlsConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TlsConfig::writeObject",1,"pj::TlsConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::TlsConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TlsConfig_writeObject",1,SWIGTYPE_p_pj__TlsConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("TlsConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::TlsConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TlsConfig(void *obj) {
pj::TlsConfig *arg1 = (pj::TlsConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_TlsConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TlsConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TlsConfig_attributes[] = {
    { "CaListFile", _wrap_TlsConfig_CaListFile_get, _wrap_TlsConfig_CaListFile_set },
    { "certFile", _wrap_TlsConfig_certFile_get, _wrap_TlsConfig_certFile_set },
    { "privKeyFile", _wrap_TlsConfig_privKeyFile_get, _wrap_TlsConfig_privKeyFile_set },
    { "password", _wrap_TlsConfig_password_get, _wrap_TlsConfig_password_set },
    { "method", _wrap_TlsConfig_method_get, _wrap_TlsConfig_method_set },
    { "ciphers", _wrap_TlsConfig_ciphers_get, _wrap_TlsConfig_ciphers_set },
    { "verifyServer", _wrap_TlsConfig_verifyServer_get, _wrap_TlsConfig_verifyServer_set },
    { "verifyClient", _wrap_TlsConfig_verifyClient_get, _wrap_TlsConfig_verifyClient_set },
    { "requireClientCert", _wrap_TlsConfig_requireClientCert_get, _wrap_TlsConfig_requireClientCert_set },
    { "msecTimeout", _wrap_TlsConfig_msecTimeout_get, _wrap_TlsConfig_msecTimeout_set },
    { "qosType", _wrap_TlsConfig_qosType_get, _wrap_TlsConfig_qosType_set },
    { "qosParams", _wrap_TlsConfig_qosParams_get, _wrap_TlsConfig_qosParams_set },
    { "qosIgnoreError", _wrap_TlsConfig_qosIgnoreError_get, _wrap_TlsConfig_qosIgnoreError_set },
    {0,0,0}
};
static swig_lua_method swig_TlsConfig_methods[]= {
    { "readObject", _wrap_TlsConfig_readObject},
    { "writeObject", _wrap_TlsConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_TlsConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TlsConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TlsConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TlsConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TlsConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TlsConfig_Sf_SwigStatic = {
    "TlsConfig",
    swig_TlsConfig_Sf_SwigStatic_methods,
    swig_TlsConfig_Sf_SwigStatic_attributes,
    swig_TlsConfig_Sf_SwigStatic_constants,
    swig_TlsConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TlsConfig_bases[] = {0,0};
static const char *swig_TlsConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_TlsConfig = { "TlsConfig", "TlsConfig", &SWIGTYPE_p_pj__TlsConfig,_proxy__wrap_new_TlsConfig, swig_delete_TlsConfig, swig_TlsConfig_methods, swig_TlsConfig_attributes, &swig_TlsConfig_Sf_SwigStatic, swig_TlsConfig_meta, swig_TlsConfig_bases, swig_TlsConfig_base_names };

static int _wrap_TransportConfig_port_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::TransportConfig::port",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::port",1,"pj::TransportConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportConfig::port",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_port_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->port = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_port_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::TransportConfig::port",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::port",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_port_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (unsigned int) ((arg1)->port);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_portRange_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::TransportConfig::portRange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::portRange",1,"pj::TransportConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportConfig::portRange",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_portRange_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->portRange = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_portRange_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::TransportConfig::portRange",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::portRange",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_portRange_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (unsigned int) ((arg1)->portRange);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_publicAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TransportConfig::publicAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::publicAddress",1,"pj::TransportConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportConfig::publicAddress",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_publicAddress_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->publicAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_publicAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::publicAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::publicAddress",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_publicAddress_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (pj::string *) & ((arg1)->publicAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_boundAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TransportConfig::boundAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::boundAddress",1,"pj::TransportConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportConfig::boundAddress",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_boundAddress_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->boundAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_boundAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::boundAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::boundAddress",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_boundAddress_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (pj::string *) & ((arg1)->boundAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_tlsConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *arg2 = (pj::TlsConfig *) 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::tlsConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::tlsConfig",1,"pj::TransportConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TransportConfig::tlsConfig",2,"pj::TlsConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_tlsConfig_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TlsConfig,0))){
    SWIG_fail_ptr("TransportConfig_tlsConfig_set",2,SWIGTYPE_p_pj__TlsConfig);
  }
  
  if (arg1) (arg1)->tlsConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_tlsConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *result = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::tlsConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::tlsConfig",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_tlsConfig_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (pj::TlsConfig *)& ((arg1)->tlsConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TlsConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_qosType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type arg2 ;
  
  SWIG_check_num_args("pj::TransportConfig::qosType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::qosType",1,"pj::TransportConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportConfig::qosType",2,"pj_qos_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_qosType_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  arg2 = (pj_qos_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->qosType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_qosType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type result;
  
  SWIG_check_num_args("pj::TransportConfig::qosType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::qosType",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_qosType_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (pj_qos_type) ((arg1)->qosType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_qosParams_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::qosParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::qosParams",1,"pj::TransportConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TransportConfig::qosParams",2,"pj_qos_params *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_qosParams_set",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj_qos_params,0))){
    SWIG_fail_ptr("TransportConfig_qosParams_set",2,SWIGTYPE_p_pj_qos_params);
  }
  
  if (arg1) (arg1)->qosParams = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_qosParams_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::qosParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::qosParams",1,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_qosParams_get",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  result = (pj_qos_params *)& ((arg1)->qosParams);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj_qos_params,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransportConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *result = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::TransportConfig",0,0)
  result = (pj::TransportConfig *)new pj::TransportConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TransportConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::readObject",1,"pj::TransportConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::TransportConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_readObject",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("TransportConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::TransportConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportConfig::writeObject",1,"pj::TransportConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::TransportConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("TransportConfig_writeObject",1,SWIGTYPE_p_pj__TransportConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("TransportConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::TransportConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransportConfig(void *obj) {
pj::TransportConfig *arg1 = (pj::TransportConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransportConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransportConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransportConfig_attributes[] = {
    { "port", _wrap_TransportConfig_port_get, _wrap_TransportConfig_port_set },
    { "portRange", _wrap_TransportConfig_portRange_get, _wrap_TransportConfig_portRange_set },
    { "publicAddress", _wrap_TransportConfig_publicAddress_get, _wrap_TransportConfig_publicAddress_set },
    { "boundAddress", _wrap_TransportConfig_boundAddress_get, _wrap_TransportConfig_boundAddress_set },
    { "tlsConfig", _wrap_TransportConfig_tlsConfig_get, _wrap_TransportConfig_tlsConfig_set },
    { "qosType", _wrap_TransportConfig_qosType_get, _wrap_TransportConfig_qosType_set },
    { "qosParams", _wrap_TransportConfig_qosParams_get, _wrap_TransportConfig_qosParams_set },
    {0,0,0}
};
static swig_lua_method swig_TransportConfig_methods[]= {
    { "readObject", _wrap_TransportConfig_readObject},
    { "writeObject", _wrap_TransportConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_TransportConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransportConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransportConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransportConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransportConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransportConfig_Sf_SwigStatic = {
    "TransportConfig",
    swig_TransportConfig_Sf_SwigStatic_methods,
    swig_TransportConfig_Sf_SwigStatic_attributes,
    swig_TransportConfig_Sf_SwigStatic_constants,
    swig_TransportConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransportConfig_bases[] = {0,0};
static const char *swig_TransportConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_TransportConfig = { "TransportConfig", "TransportConfig", &SWIGTYPE_p_pj__TransportConfig,_proxy__wrap_new_TransportConfig, swig_delete_TransportConfig, swig_TransportConfig_methods, swig_TransportConfig_attributes, &swig_TransportConfig_Sf_SwigStatic, swig_TransportConfig_meta, swig_TransportConfig_bases, swig_TransportConfig_base_names };

static int _wrap_TransportInfo_id_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId arg2 ;
  
  SWIG_check_num_args("pj::TransportInfo::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::id",1,"pj::TransportInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportInfo::id",2,"pj::TransportId");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_id_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_id_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId result;
  
  SWIG_check_num_args("pj::TransportInfo::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::id",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_id_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pj::TransportId) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e arg2 ;
  
  SWIG_check_num_args("pj::TransportInfo::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::type",1,"pj::TransportInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportInfo::type",2,"pjsip_transport_type_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_type_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  arg2 = (pjsip_transport_type_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e result;
  
  SWIG_check_num_args("pj::TransportInfo::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::type",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_type_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pjsip_transport_type_e) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_typeName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TransportInfo::typeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::typeName",1,"pj::TransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportInfo::typeName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_typeName_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->typeName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_typeName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TransportInfo::typeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::typeName",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_typeName_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pj::string *) & ((arg1)->typeName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_info_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::TransportInfo::info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::info",1,"pj::TransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportInfo::info",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_info_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->info = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_info_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::TransportInfo::info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::info",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_info_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pj::string *) & ((arg1)->info);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::TransportInfo::flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::flags",1,"pj::TransportInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportInfo::flags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_flags_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::TransportInfo::flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::flags",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_flags_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (unsigned int) ((arg1)->flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_localAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::TransportInfo::localAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::localAddress",1,"pj::TransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportInfo::localAddress",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_localAddress_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->localAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_localAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::TransportInfo::localAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::localAddress",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_localAddress_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->localAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_localName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::TransportInfo::localName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::localName",1,"pj::TransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::TransportInfo::localName",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_localName_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->localName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_localName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::TransportInfo::localName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::localName",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_localName_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->localName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_usageCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::TransportInfo::usageCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::usageCount",1,"pj::TransportInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TransportInfo::usageCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_usageCount_set",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->usageCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransportInfo_usageCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::TransportInfo::usageCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TransportInfo::usageCount",1,"pj::TransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TransportInfo,0))){
    SWIG_fail_ptr("TransportInfo_usageCount_get",1,SWIGTYPE_p_pj__TransportInfo);
  }
  
  result = (unsigned int) ((arg1)->usageCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TransportInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::TransportInfo *result = 0 ;
  
  SWIG_check_num_args("pj::TransportInfo::TransportInfo",0,0)
  result = (pj::TransportInfo *)new pj::TransportInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TransportInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransportInfo(void *obj) {
pj::TransportInfo *arg1 = (pj::TransportInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_TransportInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TransportInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TransportInfo_attributes[] = {
    { "id", _wrap_TransportInfo_id_get, _wrap_TransportInfo_id_set },
    { "type", _wrap_TransportInfo_type_get, _wrap_TransportInfo_type_set },
    { "typeName", _wrap_TransportInfo_typeName_get, _wrap_TransportInfo_typeName_set },
    { "info", _wrap_TransportInfo_info_get, _wrap_TransportInfo_info_set },
    { "flags", _wrap_TransportInfo_flags_get, _wrap_TransportInfo_flags_set },
    { "localAddress", _wrap_TransportInfo_localAddress_get, _wrap_TransportInfo_localAddress_set },
    { "localName", _wrap_TransportInfo_localName_get, _wrap_TransportInfo_localName_set },
    { "usageCount", _wrap_TransportInfo_usageCount_get, _wrap_TransportInfo_usageCount_set },
    {0,0,0}
};
static swig_lua_method swig_TransportInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_TransportInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransportInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransportInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransportInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransportInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransportInfo_Sf_SwigStatic = {
    "TransportInfo",
    swig_TransportInfo_Sf_SwigStatic_methods,
    swig_TransportInfo_Sf_SwigStatic_attributes,
    swig_TransportInfo_Sf_SwigStatic_constants,
    swig_TransportInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransportInfo_bases[] = {0};
static const char *swig_TransportInfo_base_names[] = {0};
static swig_lua_class _wrap_class_TransportInfo = { "TransportInfo", "TransportInfo", &SWIGTYPE_p_pj__TransportInfo,_proxy__wrap_new_TransportInfo, swig_delete_TransportInfo, swig_TransportInfo_methods, swig_TransportInfo_attributes, &swig_TransportInfo_Sf_SwigStatic, swig_TransportInfo_meta, swig_TransportInfo_bases, swig_TransportInfo_base_names };

static int _wrap_SipRxData_info_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipRxData::info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::info",1,"pj::SipRxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipRxData::info",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_info_set",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->info = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_info_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipRxData::info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::info",1,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_info_get",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  result = (pj::string *) & ((arg1)->info);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_wholeMsg_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipRxData::wholeMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::wholeMsg",1,"pj::SipRxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipRxData::wholeMsg",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_wholeMsg_set",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->wholeMsg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_wholeMsg_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipRxData::wholeMsg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::wholeMsg",1,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_wholeMsg_get",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  result = (pj::string *) & ((arg1)->wholeMsg);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_srcAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::SipRxData::srcAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::srcAddress",1,"pj::SipRxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipRxData::srcAddress",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_srcAddress_set",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->srcAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_srcAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::SipRxData::srcAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::srcAddress",1,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_srcAddress_get",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->srcAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_pjRxData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::SipRxData::pjRxData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::pjRxData",1,"pj::SipRxData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipRxData::pjRxData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_pjRxData_set",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SipRxData_pjRxData_set");
  if (arg1) (arg1)->pjRxData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipRxData_pjRxData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::SipRxData::pjRxData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipRxData::pjRxData",1,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("SipRxData_pjRxData_get",1,SWIGTYPE_p_pj__SipRxData);
  }
  
  result = (void *) ((arg1)->pjRxData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipRxData(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::SipRxData::SipRxData",0,0)
  result = (pj::SipRxData *)new pj::SipRxData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipRxData(void *obj) {
pj::SipRxData *arg1 = (pj::SipRxData *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipRxData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipRxData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipRxData_attributes[] = {
    { "info", _wrap_SipRxData_info_get, _wrap_SipRxData_info_set },
    { "wholeMsg", _wrap_SipRxData_wholeMsg_get, _wrap_SipRxData_wholeMsg_set },
    { "srcAddress", _wrap_SipRxData_srcAddress_get, _wrap_SipRxData_srcAddress_set },
    { "pjRxData", _wrap_SipRxData_pjRxData_get, _wrap_SipRxData_pjRxData_set },
    {0,0,0}
};
static swig_lua_method swig_SipRxData_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipRxData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipRxData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipRxData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipRxData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipRxData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipRxData_Sf_SwigStatic = {
    "SipRxData",
    swig_SipRxData_Sf_SwigStatic_methods,
    swig_SipRxData_Sf_SwigStatic_attributes,
    swig_SipRxData_Sf_SwigStatic_constants,
    swig_SipRxData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipRxData_bases[] = {0};
static const char *swig_SipRxData_base_names[] = {0};
static swig_lua_class _wrap_class_SipRxData = { "SipRxData", "SipRxData", &SWIGTYPE_p_pj__SipRxData,_proxy__wrap_new_SipRxData, swig_delete_SipRxData, swig_SipRxData_methods, swig_SipRxData_attributes, &swig_SipRxData_Sf_SwigStatic, swig_SipRxData_meta, swig_SipRxData_bases, swig_SipRxData_base_names };

static int _wrap_SipTxData_info_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTxData::info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::info",1,"pj::SipTxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxData::info",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_info_set",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->info = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_info_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxData::info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::info",1,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_info_get",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  result = (pj::string *) & ((arg1)->info);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_wholeMsg_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTxData::wholeMsg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::wholeMsg",1,"pj::SipTxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxData::wholeMsg",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_wholeMsg_set",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->wholeMsg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_wholeMsg_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxData::wholeMsg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::wholeMsg",1,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_wholeMsg_get",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  result = (pj::string *) & ((arg1)->wholeMsg);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_dstAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::SipTxData::dstAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::dstAddress",1,"pj::SipTxData *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxData::dstAddress",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_dstAddress_set",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->dstAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_dstAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxData::dstAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::dstAddress",1,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_dstAddress_get",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->dstAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_pjTxData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::SipTxData::pjTxData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::pjTxData",1,"pj::SipTxData *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTxData::pjTxData",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_pjTxData_set",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SipTxData_pjTxData_set");
  if (arg1) (arg1)->pjTxData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxData_pjTxData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxData::pjTxData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxData::pjTxData",1,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTxData_pjTxData_get",1,SWIGTYPE_p_pj__SipTxData);
  }
  
  result = (void *) ((arg1)->pjTxData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipTxData(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxData *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxData::SipTxData",0,0)
  result = (pj::SipTxData *)new pj::SipTxData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipTxData(void *obj) {
pj::SipTxData *arg1 = (pj::SipTxData *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipTxData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipTxData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipTxData_attributes[] = {
    { "info", _wrap_SipTxData_info_get, _wrap_SipTxData_info_set },
    { "wholeMsg", _wrap_SipTxData_wholeMsg_get, _wrap_SipTxData_wholeMsg_set },
    { "dstAddress", _wrap_SipTxData_dstAddress_get, _wrap_SipTxData_dstAddress_set },
    { "pjTxData", _wrap_SipTxData_pjTxData_get, _wrap_SipTxData_pjTxData_set },
    {0,0,0}
};
static swig_lua_method swig_SipTxData_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipTxData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipTxData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipTxData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipTxData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipTxData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipTxData_Sf_SwigStatic = {
    "SipTxData",
    swig_SipTxData_Sf_SwigStatic_methods,
    swig_SipTxData_Sf_SwigStatic_attributes,
    swig_SipTxData_Sf_SwigStatic_constants,
    swig_SipTxData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipTxData_bases[] = {0};
static const char *swig_SipTxData_base_names[] = {0};
static swig_lua_class _wrap_class_SipTxData = { "SipTxData", "SipTxData", &SWIGTYPE_p_pj__SipTxData,_proxy__wrap_new_SipTxData, swig_delete_SipTxData, swig_SipTxData_methods, swig_SipTxData_attributes, &swig_SipTxData_Sf_SwigStatic, swig_SipTxData_meta, swig_SipTxData_bases, swig_SipTxData_base_names };

static int _wrap_SipTransaction_role_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e arg2 ;
  
  SWIG_check_num_args("pj::SipTransaction::role",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::role",1,"pj::SipTransaction *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::SipTransaction::role",2,"pjsip_role_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_role_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  arg2 = (pjsip_role_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->role = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_role_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e result;
  
  SWIG_check_num_args("pj::SipTransaction::role",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::role",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_role_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (pjsip_role_e) ((arg1)->role);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_method_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTransaction::method",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::method",1,"pj::SipTransaction *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTransaction::method",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_method_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->method = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_method_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::method",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::method",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_method_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (pj::string *) & ((arg1)->method);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::SipTransaction::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::statusCode",1,"pj::SipTransaction *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::SipTransaction::statusCode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_statusCode_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::SipTransaction::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::statusCode",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_statusCode_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (int) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_statusText_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTransaction::statusText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::statusText",1,"pj::SipTransaction *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTransaction::statusText",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_statusText_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->statusText = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_statusText_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::statusText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::statusText",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_statusText_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (pj::string *) & ((arg1)->statusText);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  SWIG_check_num_args("pj::SipTransaction::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::state",1,"pj::SipTransaction *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::SipTransaction::state",2,"pjsip_tsx_state_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_state_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  arg2 = (pjsip_tsx_state_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e result;
  
  SWIG_check_num_args("pj::SipTransaction::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::state",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_state_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (pjsip_tsx_state_e) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_lastTx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::lastTx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::lastTx",1,"pj::SipTransaction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTransaction::lastTx",2,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_lastTx_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("SipTransaction_lastTx_set",2,SWIGTYPE_p_pj__SipTxData);
  }
  
  if (arg1) (arg1)->lastTx = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_lastTx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *result = 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::lastTx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::lastTx",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_lastTx_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (pj::SipTxData *)& ((arg1)->lastTx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_pjTransaction_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::pjTransaction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::pjTransaction",1,"pj::SipTransaction *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTransaction::pjTransaction",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_pjTransaction_set",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SipTransaction_pjTransaction_set");
  if (arg1) (arg1)->pjTransaction = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTransaction_pjTransaction_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::pjTransaction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTransaction::pjTransaction",1,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("SipTransaction_pjTransaction_get",1,SWIGTYPE_p_pj__SipTransaction);
  }
  
  result = (void *) ((arg1)->pjTransaction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipTransaction(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTransaction *result = 0 ;
  
  SWIG_check_num_args("pj::SipTransaction::SipTransaction",0,0)
  result = (pj::SipTransaction *)new pj::SipTransaction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTransaction,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipTransaction(void *obj) {
pj::SipTransaction *arg1 = (pj::SipTransaction *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipTransaction(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipTransaction);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipTransaction_attributes[] = {
    { "role", _wrap_SipTransaction_role_get, _wrap_SipTransaction_role_set },
    { "method", _wrap_SipTransaction_method_get, _wrap_SipTransaction_method_set },
    { "statusCode", _wrap_SipTransaction_statusCode_get, _wrap_SipTransaction_statusCode_set },
    { "statusText", _wrap_SipTransaction_statusText_get, _wrap_SipTransaction_statusText_set },
    { "state", _wrap_SipTransaction_state_get, _wrap_SipTransaction_state_set },
    { "lastTx", _wrap_SipTransaction_lastTx_get, _wrap_SipTransaction_lastTx_set },
    { "pjTransaction", _wrap_SipTransaction_pjTransaction_get, _wrap_SipTransaction_pjTransaction_set },
    {0,0,0}
};
static swig_lua_method swig_SipTransaction_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipTransaction_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipTransaction_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipTransaction_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipTransaction_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipTransaction_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipTransaction_Sf_SwigStatic = {
    "SipTransaction",
    swig_SipTransaction_Sf_SwigStatic_methods,
    swig_SipTransaction_Sf_SwigStatic_attributes,
    swig_SipTransaction_Sf_SwigStatic_constants,
    swig_SipTransaction_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipTransaction_bases[] = {0};
static const char *swig_SipTransaction_base_names[] = {0};
static swig_lua_class _wrap_class_SipTransaction = { "SipTransaction", "SipTransaction", &SWIGTYPE_p_pj__SipTransaction,_proxy__wrap_new_SipTransaction, swig_delete_SipTransaction, swig_SipTransaction_methods, swig_SipTransaction_attributes, &swig_SipTransaction_Sf_SwigStatic, swig_SipTransaction_meta, swig_SipTransaction_bases, swig_SipTransaction_base_names };

static int _wrap_TimerEvent_entry_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  SWIG_check_num_args("pj::TimerEvent::entry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimerEvent::entry",1,"pj::TimerEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TimerEvent::entry",2,"pj::TimerEntry");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimerEvent,0))){
    SWIG_fail_ptr("TimerEvent_entry_set",1,SWIGTYPE_p_pj__TimerEvent);
  }
  
  arg2=(pj::TimerEntry)SWIG_MustGetPtr(L,2,0,0,2,"TimerEvent_entry_set");
  if (arg1) (arg1)->entry = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TimerEvent_entry_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry result;
  
  SWIG_check_num_args("pj::TimerEvent::entry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TimerEvent::entry",1,"pj::TimerEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TimerEvent,0))){
    SWIG_fail_ptr("TimerEvent_entry_get",1,SWIGTYPE_p_pj__TimerEvent);
  }
  
  result = (pj::TimerEntry) ((arg1)->entry);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TimerEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::TimerEvent *result = 0 ;
  
  SWIG_check_num_args("pj::TimerEvent::TimerEvent",0,0)
  result = (pj::TimerEvent *)new pj::TimerEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimerEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TimerEvent(void *obj) {
pj::TimerEvent *arg1 = (pj::TimerEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_TimerEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TimerEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TimerEvent_attributes[] = {
    { "entry", _wrap_TimerEvent_entry_get, _wrap_TimerEvent_entry_set },
    {0,0,0}
};
static swig_lua_method swig_TimerEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_TimerEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TimerEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TimerEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TimerEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TimerEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TimerEvent_Sf_SwigStatic = {
    "TimerEvent",
    swig_TimerEvent_Sf_SwigStatic_methods,
    swig_TimerEvent_Sf_SwigStatic_attributes,
    swig_TimerEvent_Sf_SwigStatic_constants,
    swig_TimerEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TimerEvent_bases[] = {0};
static const char *swig_TimerEvent_base_names[] = {0};
static swig_lua_class _wrap_class_TimerEvent = { "TimerEvent", "TimerEvent", &SWIGTYPE_p_pj__TimerEvent,_proxy__wrap_new_TimerEvent, swig_delete_TimerEvent, swig_TimerEvent_methods, swig_TimerEvent_attributes, &swig_TimerEvent_Sf_SwigStatic, swig_TimerEvent_meta, swig_TimerEvent_bases, swig_TimerEvent_base_names };

static int _wrap_TsxStateEvent_tsx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  SWIG_check_num_args("pj::TsxStateEvent::tsx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::tsx",1,"pj::TsxStateEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TsxStateEvent::tsx",2,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_tsx_set",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("TsxStateEvent_tsx_set",2,SWIGTYPE_p_pj__SipTransaction);
  }
  
  if (arg1) (arg1)->tsx = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TsxStateEvent_tsx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  SWIG_check_num_args("pj::TsxStateEvent::tsx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::tsx",1,"pj::TsxStateEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_tsx_get",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTransaction,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TsxStateEvent_prevState_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  SWIG_check_num_args("pj::TsxStateEvent::prevState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::prevState",1,"pj::TsxStateEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TsxStateEvent::prevState",2,"pjsip_tsx_state_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_prevState_set",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  arg2 = (pjsip_tsx_state_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->prevState = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TsxStateEvent_prevState_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e result;
  
  SWIG_check_num_args("pj::TsxStateEvent::prevState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::prevState",1,"pj::TsxStateEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_prevState_get",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  result = (pjsip_tsx_state_e) ((arg1)->prevState);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TsxStateEvent_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  SWIG_check_num_args("pj::TsxStateEvent::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::type",1,"pj::TsxStateEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::TsxStateEvent::type",2,"pjsip_event_id_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_type_set",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  arg2 = (pjsip_event_id_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TsxStateEvent_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e result;
  
  SWIG_check_num_args("pj::TsxStateEvent::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TsxStateEvent::type",1,"pj::TsxStateEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TsxStateEvent,0))){
    SWIG_fail_ptr("TsxStateEvent_type_get",1,SWIGTYPE_p_pj__TsxStateEvent);
  }
  
  result = (pjsip_event_id_e) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TsxStateEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::TsxStateEvent *result = 0 ;
  
  SWIG_check_num_args("pj::TsxStateEvent::TsxStateEvent",0,0)
  result = (pj::TsxStateEvent *)new pj::TsxStateEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TsxStateEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TsxStateEvent(void *obj) {
pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_TsxStateEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TsxStateEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TsxStateEvent_attributes[] = {
    { "tsx", _wrap_TsxStateEvent_tsx_get, _wrap_TsxStateEvent_tsx_set },
    { "prevState", _wrap_TsxStateEvent_prevState_get, _wrap_TsxStateEvent_prevState_set },
    { "type", _wrap_TsxStateEvent_type_get, _wrap_TsxStateEvent_type_set },
    {0,0,0}
};
static swig_lua_method swig_TsxStateEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_TsxStateEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TsxStateEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TsxStateEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TsxStateEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TsxStateEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TsxStateEvent_Sf_SwigStatic = {
    "TsxStateEvent",
    swig_TsxStateEvent_Sf_SwigStatic_methods,
    swig_TsxStateEvent_Sf_SwigStatic_attributes,
    swig_TsxStateEvent_Sf_SwigStatic_constants,
    swig_TsxStateEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TsxStateEvent_bases[] = {0};
static const char *swig_TsxStateEvent_base_names[] = {0};
static swig_lua_class _wrap_class_TsxStateEvent = { "TsxStateEvent", "TsxStateEvent", &SWIGTYPE_p_pj__TsxStateEvent,_proxy__wrap_new_TsxStateEvent, swig_delete_TsxStateEvent, swig_TsxStateEvent_methods, swig_TsxStateEvent_attributes, &swig_TsxStateEvent_Sf_SwigStatic, swig_TsxStateEvent_meta, swig_TsxStateEvent_bases, swig_TsxStateEvent_base_names };

static int _wrap_TxMsgEvent_tdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  SWIG_check_num_args("pj::TxMsgEvent::tdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxMsgEvent::tdata",1,"pj::TxMsgEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TxMsgEvent::tdata",2,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxMsgEvent,0))){
    SWIG_fail_ptr("TxMsgEvent_tdata_set",1,SWIGTYPE_p_pj__TxMsgEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("TxMsgEvent_tdata_set",2,SWIGTYPE_p_pj__SipTxData);
  }
  
  if (arg1) (arg1)->tdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TxMsgEvent_tdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  SWIG_check_num_args("pj::TxMsgEvent::tdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxMsgEvent::tdata",1,"pj::TxMsgEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxMsgEvent,0))){
    SWIG_fail_ptr("TxMsgEvent_tdata_get",1,SWIGTYPE_p_pj__TxMsgEvent);
  }
  
  result = (pj::SipTxData *)& ((arg1)->tdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TxMsgEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxMsgEvent *result = 0 ;
  
  SWIG_check_num_args("pj::TxMsgEvent::TxMsgEvent",0,0)
  result = (pj::TxMsgEvent *)new pj::TxMsgEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TxMsgEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TxMsgEvent(void *obj) {
pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_TxMsgEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TxMsgEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TxMsgEvent_attributes[] = {
    { "tdata", _wrap_TxMsgEvent_tdata_get, _wrap_TxMsgEvent_tdata_set },
    {0,0,0}
};
static swig_lua_method swig_TxMsgEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_TxMsgEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TxMsgEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TxMsgEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TxMsgEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TxMsgEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TxMsgEvent_Sf_SwigStatic = {
    "TxMsgEvent",
    swig_TxMsgEvent_Sf_SwigStatic_methods,
    swig_TxMsgEvent_Sf_SwigStatic_attributes,
    swig_TxMsgEvent_Sf_SwigStatic_constants,
    swig_TxMsgEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TxMsgEvent_bases[] = {0};
static const char *swig_TxMsgEvent_base_names[] = {0};
static swig_lua_class _wrap_class_TxMsgEvent = { "TxMsgEvent", "TxMsgEvent", &SWIGTYPE_p_pj__TxMsgEvent,_proxy__wrap_new_TxMsgEvent, swig_delete_TxMsgEvent, swig_TxMsgEvent_methods, swig_TxMsgEvent_attributes, &swig_TxMsgEvent_Sf_SwigStatic, swig_TxMsgEvent_meta, swig_TxMsgEvent_bases, swig_TxMsgEvent_base_names };

static int _wrap_TxErrorEvent_tdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  SWIG_check_num_args("pj::TxErrorEvent::tdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxErrorEvent::tdata",1,"pj::TxErrorEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TxErrorEvent::tdata",2,"pj::SipTxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxErrorEvent,0))){
    SWIG_fail_ptr("TxErrorEvent_tdata_set",1,SWIGTYPE_p_pj__TxErrorEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxData,0))){
    SWIG_fail_ptr("TxErrorEvent_tdata_set",2,SWIGTYPE_p_pj__SipTxData);
  }
  
  if (arg1) (arg1)->tdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TxErrorEvent_tdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  SWIG_check_num_args("pj::TxErrorEvent::tdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxErrorEvent::tdata",1,"pj::TxErrorEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxErrorEvent,0))){
    SWIG_fail_ptr("TxErrorEvent_tdata_get",1,SWIGTYPE_p_pj__TxErrorEvent);
  }
  
  result = (pj::SipTxData *)& ((arg1)->tdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TxErrorEvent_tsx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  SWIG_check_num_args("pj::TxErrorEvent::tsx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxErrorEvent::tsx",1,"pj::TxErrorEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::TxErrorEvent::tsx",2,"pj::SipTransaction *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxErrorEvent,0))){
    SWIG_fail_ptr("TxErrorEvent_tsx_set",1,SWIGTYPE_p_pj__TxErrorEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTransaction,0))){
    SWIG_fail_ptr("TxErrorEvent_tsx_set",2,SWIGTYPE_p_pj__SipTransaction);
  }
  
  if (arg1) (arg1)->tsx = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TxErrorEvent_tsx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  SWIG_check_num_args("pj::TxErrorEvent::tsx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::TxErrorEvent::tsx",1,"pj::TxErrorEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__TxErrorEvent,0))){
    SWIG_fail_ptr("TxErrorEvent_tsx_get",1,SWIGTYPE_p_pj__TxErrorEvent);
  }
  
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTransaction,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TxErrorEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::TxErrorEvent *result = 0 ;
  
  SWIG_check_num_args("pj::TxErrorEvent::TxErrorEvent",0,0)
  result = (pj::TxErrorEvent *)new pj::TxErrorEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TxErrorEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TxErrorEvent(void *obj) {
pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_TxErrorEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TxErrorEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TxErrorEvent_attributes[] = {
    { "tdata", _wrap_TxErrorEvent_tdata_get, _wrap_TxErrorEvent_tdata_set },
    { "tsx", _wrap_TxErrorEvent_tsx_get, _wrap_TxErrorEvent_tsx_set },
    {0,0,0}
};
static swig_lua_method swig_TxErrorEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_TxErrorEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TxErrorEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TxErrorEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TxErrorEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TxErrorEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TxErrorEvent_Sf_SwigStatic = {
    "TxErrorEvent",
    swig_TxErrorEvent_Sf_SwigStatic_methods,
    swig_TxErrorEvent_Sf_SwigStatic_attributes,
    swig_TxErrorEvent_Sf_SwigStatic_constants,
    swig_TxErrorEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TxErrorEvent_bases[] = {0};
static const char *swig_TxErrorEvent_base_names[] = {0};
static swig_lua_class _wrap_class_TxErrorEvent = { "TxErrorEvent", "TxErrorEvent", &SWIGTYPE_p_pj__TxErrorEvent,_proxy__wrap_new_TxErrorEvent, swig_delete_TxErrorEvent, swig_TxErrorEvent_methods, swig_TxErrorEvent_attributes, &swig_TxErrorEvent_Sf_SwigStatic, swig_TxErrorEvent_meta, swig_TxErrorEvent_bases, swig_TxErrorEvent_base_names };

static int _wrap_RxMsgEvent_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::RxMsgEvent::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RxMsgEvent::rdata",1,"pj::RxMsgEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RxMsgEvent::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RxMsgEvent,0))){
    SWIG_fail_ptr("RxMsgEvent_rdata_set",1,SWIGTYPE_p_pj__RxMsgEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("RxMsgEvent_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RxMsgEvent_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::RxMsgEvent::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RxMsgEvent::rdata",1,"pj::RxMsgEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RxMsgEvent,0))){
    SWIG_fail_ptr("RxMsgEvent_rdata_get",1,SWIGTYPE_p_pj__RxMsgEvent);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RxMsgEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::RxMsgEvent *result = 0 ;
  
  SWIG_check_num_args("pj::RxMsgEvent::RxMsgEvent",0,0)
  result = (pj::RxMsgEvent *)new pj::RxMsgEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RxMsgEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RxMsgEvent(void *obj) {
pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_RxMsgEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RxMsgEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RxMsgEvent_attributes[] = {
    { "rdata", _wrap_RxMsgEvent_rdata_get, _wrap_RxMsgEvent_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_RxMsgEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_RxMsgEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RxMsgEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RxMsgEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RxMsgEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RxMsgEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RxMsgEvent_Sf_SwigStatic = {
    "RxMsgEvent",
    swig_RxMsgEvent_Sf_SwigStatic_methods,
    swig_RxMsgEvent_Sf_SwigStatic_attributes,
    swig_RxMsgEvent_Sf_SwigStatic_constants,
    swig_RxMsgEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RxMsgEvent_bases[] = {0};
static const char *swig_RxMsgEvent_base_names[] = {0};
static swig_lua_class _wrap_class_RxMsgEvent = { "RxMsgEvent", "RxMsgEvent", &SWIGTYPE_p_pj__RxMsgEvent,_proxy__wrap_new_RxMsgEvent, swig_delete_RxMsgEvent, swig_RxMsgEvent_methods, swig_RxMsgEvent_attributes, &swig_RxMsgEvent_Sf_SwigStatic, swig_RxMsgEvent_meta, swig_RxMsgEvent_bases, swig_RxMsgEvent_base_names };

static int _wrap_UserEvent_user1_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  SWIG_check_num_args("pj::UserEvent::user1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user1",1,"pj::UserEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UserEvent::user1",2,"pj::GenericData");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user1_set",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  arg2=(pj::GenericData)SWIG_MustGetPtr(L,2,0,0,2,"UserEvent_user1_set");
  if (arg1) (arg1)->user1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user1_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  SWIG_check_num_args("pj::UserEvent::user1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user1",1,"pj::UserEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user1_get",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  result = (pj::GenericData) ((arg1)->user1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user2_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  SWIG_check_num_args("pj::UserEvent::user2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user2",1,"pj::UserEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UserEvent::user2",2,"pj::GenericData");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user2_set",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  arg2=(pj::GenericData)SWIG_MustGetPtr(L,2,0,0,2,"UserEvent_user2_set");
  if (arg1) (arg1)->user2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user2_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  SWIG_check_num_args("pj::UserEvent::user2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user2",1,"pj::UserEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user2_get",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  result = (pj::GenericData) ((arg1)->user2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user3_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  SWIG_check_num_args("pj::UserEvent::user3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user3",1,"pj::UserEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UserEvent::user3",2,"pj::GenericData");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user3_set",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  arg2=(pj::GenericData)SWIG_MustGetPtr(L,2,0,0,2,"UserEvent_user3_set");
  if (arg1) (arg1)->user3 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user3_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  SWIG_check_num_args("pj::UserEvent::user3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user3",1,"pj::UserEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user3_get",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  result = (pj::GenericData) ((arg1)->user3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user4_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  SWIG_check_num_args("pj::UserEvent::user4",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user4",1,"pj::UserEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UserEvent::user4",2,"pj::GenericData");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user4_set",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  arg2=(pj::GenericData)SWIG_MustGetPtr(L,2,0,0,2,"UserEvent_user4_set");
  if (arg1) (arg1)->user4 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UserEvent_user4_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  SWIG_check_num_args("pj::UserEvent::user4",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UserEvent::user4",1,"pj::UserEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UserEvent,0))){
    SWIG_fail_ptr("UserEvent_user4_get",1,SWIGTYPE_p_pj__UserEvent);
  }
  
  result = (pj::GenericData) ((arg1)->user4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UserEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::UserEvent *result = 0 ;
  
  SWIG_check_num_args("pj::UserEvent::UserEvent",0,0)
  result = (pj::UserEvent *)new pj::UserEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__UserEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UserEvent(void *obj) {
pj::UserEvent *arg1 = (pj::UserEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_UserEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UserEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UserEvent_attributes[] = {
    { "user1", _wrap_UserEvent_user1_get, _wrap_UserEvent_user1_set },
    { "user2", _wrap_UserEvent_user2_get, _wrap_UserEvent_user2_set },
    { "user3", _wrap_UserEvent_user3_get, _wrap_UserEvent_user3_set },
    { "user4", _wrap_UserEvent_user4_get, _wrap_UserEvent_user4_set },
    {0,0,0}
};
static swig_lua_method swig_UserEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_UserEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UserEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UserEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UserEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UserEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UserEvent_Sf_SwigStatic = {
    "UserEvent",
    swig_UserEvent_Sf_SwigStatic_methods,
    swig_UserEvent_Sf_SwigStatic_attributes,
    swig_UserEvent_Sf_SwigStatic_constants,
    swig_UserEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UserEvent_bases[] = {0};
static const char *swig_UserEvent_base_names[] = {0};
static swig_lua_class _wrap_class_UserEvent = { "UserEvent", "UserEvent", &SWIGTYPE_p_pj__UserEvent,_proxy__wrap_new_UserEvent, swig_delete_UserEvent, swig_UserEvent_methods, swig_UserEvent_attributes, &swig_UserEvent_Sf_SwigStatic, swig_UserEvent_meta, swig_UserEvent_bases, swig_UserEvent_base_names };

static int _wrap_SipEvent_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  SWIG_check_num_args("pj::SipEvent::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipEvent::type",1,"pj::SipEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::SipEvent::type",2,"pjsip_event_id_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("SipEvent_type_set",1,SWIGTYPE_p_pj__SipEvent);
  }
  
  arg2 = (pjsip_event_id_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipEvent_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e result;
  
  SWIG_check_num_args("pj::SipEvent::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipEvent::type",1,"pj::SipEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("SipEvent_type_get",1,SWIGTYPE_p_pj__SipEvent);
  }
  
  result = (pjsip_event_id_e) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipEvent_pjEvent_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::SipEvent::pjEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipEvent::pjEvent",1,"pj::SipEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipEvent::pjEvent",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("SipEvent_pjEvent_set",1,SWIGTYPE_p_pj__SipEvent);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SipEvent_pjEvent_set");
  if (arg1) (arg1)->pjEvent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipEvent_pjEvent_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::SipEvent::pjEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipEvent::pjEvent",1,"pj::SipEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("SipEvent_pjEvent_get",1,SWIGTYPE_p_pj__SipEvent);
  }
  
  result = (void *) ((arg1)->pjEvent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipEvent *result = 0 ;
  
  SWIG_check_num_args("pj::SipEvent::SipEvent",0,0)
  result = (pj::SipEvent *)new pj::SipEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipEvent(void *obj) {
pj::SipEvent *arg1 = (pj::SipEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipEvent_attributes[] = {
    { "type", _wrap_SipEvent_type_get, _wrap_SipEvent_type_set },
    { "pjEvent", _wrap_SipEvent_pjEvent_get, _wrap_SipEvent_pjEvent_set },
    {0,0,0}
};
static swig_lua_method swig_SipEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipEvent_Sf_SwigStatic = {
    "SipEvent",
    swig_SipEvent_Sf_SwigStatic_methods,
    swig_SipEvent_Sf_SwigStatic_attributes,
    swig_SipEvent_Sf_SwigStatic_constants,
    swig_SipEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipEvent_bases[] = {0};
static const char *swig_SipEvent_base_names[] = {0};
static swig_lua_class _wrap_class_SipEvent = { "SipEvent", "SipEvent", &SWIGTYPE_p_pj__SipEvent,_proxy__wrap_new_SipEvent, swig_delete_SipEvent, swig_SipEvent_methods, swig_SipEvent_attributes, &swig_SipEvent_Sf_SwigStatic, swig_SipEvent_meta, swig_SipEvent_bases, swig_SipEvent_base_names };

static int _wrap_SipMediaType_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipMediaType::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMediaType::type",1,"pj::SipMediaType *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipMediaType::type",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipMediaType_type_set",1,SWIGTYPE_p_pj__SipMediaType);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->type = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMediaType_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipMediaType::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMediaType::type",1,"pj::SipMediaType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipMediaType_type_get",1,SWIGTYPE_p_pj__SipMediaType);
  }
  
  result = (pj::string *) & ((arg1)->type);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMediaType_subType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipMediaType::subType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMediaType::subType",1,"pj::SipMediaType *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipMediaType::subType",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipMediaType_subType_set",1,SWIGTYPE_p_pj__SipMediaType);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->subType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMediaType_subType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipMediaType::subType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMediaType::subType",1,"pj::SipMediaType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipMediaType_subType_get",1,SWIGTYPE_p_pj__SipMediaType);
  }
  
  result = (pj::string *) & ((arg1)->subType);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMediaType(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMediaType *result = 0 ;
  
  SWIG_check_num_args("pj::SipMediaType::SipMediaType",0,0)
  result = (pj::SipMediaType *)new pj::SipMediaType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipMediaType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipMediaType(void *obj) {
pj::SipMediaType *arg1 = (pj::SipMediaType *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipMediaType(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipMediaType);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipMediaType_attributes[] = {
    { "type", _wrap_SipMediaType_type_get, _wrap_SipMediaType_type_set },
    { "subType", _wrap_SipMediaType_subType_get, _wrap_SipMediaType_subType_set },
    {0,0,0}
};
static swig_lua_method swig_SipMediaType_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipMediaType_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipMediaType_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipMediaType_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipMediaType_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipMediaType_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipMediaType_Sf_SwigStatic = {
    "SipMediaType",
    swig_SipMediaType_Sf_SwigStatic_methods,
    swig_SipMediaType_Sf_SwigStatic_attributes,
    swig_SipMediaType_Sf_SwigStatic_constants,
    swig_SipMediaType_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipMediaType_bases[] = {0};
static const char *swig_SipMediaType_base_names[] = {0};
static swig_lua_class _wrap_class_SipMediaType = { "SipMediaType", "SipMediaType", &SWIGTYPE_p_pj__SipMediaType,_proxy__wrap_new_SipMediaType, swig_delete_SipMediaType, swig_SipMediaType_methods, swig_SipMediaType_attributes, &swig_SipMediaType_Sf_SwigStatic, swig_SipMediaType_meta, swig_SipMediaType_bases, swig_SipMediaType_base_names };

static int _wrap_SipHeader_hName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipHeader::hName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipHeader::hName",1,"pj::SipHeader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipHeader::hName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeader_hName_set",1,SWIGTYPE_p_pj__SipHeader);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->hName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeader_hName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipHeader::hName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipHeader::hName",1,"pj::SipHeader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeader_hName_get",1,SWIGTYPE_p_pj__SipHeader);
  }
  
  result = (pj::string *) & ((arg1)->hName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeader_hValue_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipHeader::hValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipHeader::hValue",1,"pj::SipHeader *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipHeader::hValue",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeader_hValue_set",1,SWIGTYPE_p_pj__SipHeader);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->hValue = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeader_hValue_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipHeader::hValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipHeader::hValue",1,"pj::SipHeader *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeader_hValue_get",1,SWIGTYPE_p_pj__SipHeader);
  }
  
  result = (pj::string *) & ((arg1)->hValue);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipHeader(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipHeader *result = 0 ;
  
  SWIG_check_num_args("pj::SipHeader::SipHeader",0,0)
  result = (pj::SipHeader *)new pj::SipHeader();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipHeader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipHeader(void *obj) {
pj::SipHeader *arg1 = (pj::SipHeader *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipHeader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipHeader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipHeader_attributes[] = {
    { "hName", _wrap_SipHeader_hName_get, _wrap_SipHeader_hName_set },
    { "hValue", _wrap_SipHeader_hValue_get, _wrap_SipHeader_hValue_set },
    {0,0,0}
};
static swig_lua_method swig_SipHeader_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipHeader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipHeader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipHeader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipHeader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipHeader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipHeader_Sf_SwigStatic = {
    "SipHeader",
    swig_SipHeader_Sf_SwigStatic_methods,
    swig_SipHeader_Sf_SwigStatic_attributes,
    swig_SipHeader_Sf_SwigStatic_constants,
    swig_SipHeader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipHeader_bases[] = {0};
static const char *swig_SipHeader_base_names[] = {0};
static swig_lua_class _wrap_class_SipHeader = { "SipHeader", "SipHeader", &SWIGTYPE_p_pj__SipHeader,_proxy__wrap_new_SipHeader, swig_delete_SipHeader, swig_SipHeader_methods, swig_SipHeader_attributes, &swig_SipHeader_Sf_SwigStatic, swig_SipHeader_meta, swig_SipHeader_bases, swig_SipHeader_base_names };

static int _wrap_SipMultipartPart_headers_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::headers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::headers",1,"pj::SipMultipartPart *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipMultipartPart::headers",2,"pj::SipHeaderVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_headers_set",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipMultipartPart_headers_set",2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  if (arg1) (arg1)->headers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPart_headers_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::headers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::headers",1,"pj::SipMultipartPart *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_headers_get",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPart_contentType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::contentType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::contentType",1,"pj::SipMultipartPart *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipMultipartPart::contentType",2,"pj::SipMediaType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_contentType_set",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipMultipartPart_contentType_set",2,SWIGTYPE_p_pj__SipMediaType);
  }
  
  if (arg1) (arg1)->contentType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPart_contentType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::contentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::contentType",1,"pj::SipMultipartPart *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_contentType_get",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  result = (pj::SipMediaType *)& ((arg1)->contentType);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipMediaType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPart_body_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::body",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::body",1,"pj::SipMultipartPart *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipMultipartPart::body",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_body_set",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->body = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPart_body_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::body",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipMultipartPart::body",1,"pj::SipMultipartPart *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPart_body_get",1,SWIGTYPE_p_pj__SipMultipartPart);
  }
  
  result = (pj::string *) & ((arg1)->body);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMultipartPart(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipMultipartPart *result = 0 ;
  
  SWIG_check_num_args("pj::SipMultipartPart::SipMultipartPart",0,0)
  result = (pj::SipMultipartPart *)new pj::SipMultipartPart();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipMultipartPart,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipMultipartPart(void *obj) {
pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipMultipartPart(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipMultipartPart);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipMultipartPart_attributes[] = {
    { "headers", _wrap_SipMultipartPart_headers_get, _wrap_SipMultipartPart_headers_set },
    { "contentType", _wrap_SipMultipartPart_contentType_get, _wrap_SipMultipartPart_contentType_set },
    { "body", _wrap_SipMultipartPart_body_get, _wrap_SipMultipartPart_body_set },
    {0,0,0}
};
static swig_lua_method swig_SipMultipartPart_methods[]= {
    {0,0}
};
static swig_lua_method swig_SipMultipartPart_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipMultipartPart_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipMultipartPart_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipMultipartPart_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipMultipartPart_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipMultipartPart_Sf_SwigStatic = {
    "SipMultipartPart",
    swig_SipMultipartPart_Sf_SwigStatic_methods,
    swig_SipMultipartPart_Sf_SwigStatic_attributes,
    swig_SipMultipartPart_Sf_SwigStatic_constants,
    swig_SipMultipartPart_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipMultipartPart_bases[] = {0};
static const char *swig_SipMultipartPart_base_names[] = {0};
static swig_lua_class _wrap_class_SipMultipartPart = { "SipMultipartPart", "SipMultipartPart", &SWIGTYPE_p_pj__SipMultipartPart,_proxy__wrap_new_SipMultipartPart, swig_delete_SipMultipartPart, swig_SipMultipartPart_methods, swig_SipMultipartPart_attributes, &swig_SipMultipartPart_Sf_SwigStatic, swig_SipMultipartPart_meta, swig_SipMultipartPart_bases, swig_SipMultipartPart_base_names };

static int _wrap_SipTxOption_targetUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTxOption::targetUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::targetUri",1,"pj::SipTxOption *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxOption::targetUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_targetUri_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->targetUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_targetUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::targetUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::targetUri",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_targetUri_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::string *) & ((arg1)->targetUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_headers_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::headers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::headers",1,"pj::SipTxOption *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTxOption::headers",2,"pj::SipHeaderVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_headers_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipTxOption_headers_set",2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  if (arg1) (arg1)->headers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_headers_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::headers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::headers",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_headers_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_contentType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTxOption::contentType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::contentType",1,"pj::SipTxOption *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxOption::contentType",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_contentType_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contentType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_contentType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::contentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::contentType",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_contentType_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::string *) & ((arg1)->contentType);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_msgBody_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SipTxOption::msgBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::msgBody",1,"pj::SipTxOption *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SipTxOption::msgBody",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_msgBody_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->msgBody = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_msgBody_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::msgBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::msgBody",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_msgBody_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::string *) & ((arg1)->msgBody);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_multipartContentType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::multipartContentType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::multipartContentType",1,"pj::SipTxOption *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTxOption::multipartContentType",2,"pj::SipMediaType *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_multipartContentType_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipMediaType,0))){
    SWIG_fail_ptr("SipTxOption_multipartContentType_set",2,SWIGTYPE_p_pj__SipMediaType);
  }
  
  if (arg1) (arg1)->multipartContentType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_multipartContentType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::multipartContentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::multipartContentType",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_multipartContentType_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::SipMediaType *)& ((arg1)->multipartContentType);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipMediaType,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_multipartParts_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *arg2 = (pj::SipMultipartPartVector *) 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::multipartParts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::multipartParts",1,"pj::SipTxOption *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SipTxOption::multipartParts",2,"pj::SipMultipartPartVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_multipartParts_set",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipTxOption_multipartParts_set",2,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  if (arg1) (arg1)->multipartParts = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_multipartParts_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::multipartParts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::multipartParts",1,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_multipartParts_get",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (pj::SipMultipartPartVector *)& ((arg1)->multipartParts);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipTxOption_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::SipTxOption::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SipTxOption::isEmpty",1,"pj::SipTxOption const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SipTxOption_isEmpty",1,SWIGTYPE_p_pj__SipTxOption);
  }
  
  result = (bool)((pj::SipTxOption const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipTxOption(lua_State* L) {
  int SWIG_arg = 0;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::SipTxOption::SipTxOption",0,0)
  result = (pj::SipTxOption *)new pj::SipTxOption();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipTxOption(void *obj) {
pj::SipTxOption *arg1 = (pj::SipTxOption *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipTxOption(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipTxOption);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipTxOption_attributes[] = {
    { "targetUri", _wrap_SipTxOption_targetUri_get, _wrap_SipTxOption_targetUri_set },
    { "headers", _wrap_SipTxOption_headers_get, _wrap_SipTxOption_headers_set },
    { "contentType", _wrap_SipTxOption_contentType_get, _wrap_SipTxOption_contentType_set },
    { "msgBody", _wrap_SipTxOption_msgBody_get, _wrap_SipTxOption_msgBody_set },
    { "multipartContentType", _wrap_SipTxOption_multipartContentType_get, _wrap_SipTxOption_multipartContentType_set },
    { "multipartParts", _wrap_SipTxOption_multipartParts_get, _wrap_SipTxOption_multipartParts_set },
    {0,0,0}
};
static swig_lua_method swig_SipTxOption_methods[]= {
    { "isEmpty", _wrap_SipTxOption_isEmpty},
    {0,0}
};
static swig_lua_method swig_SipTxOption_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SipTxOption_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipTxOption_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipTxOption_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipTxOption_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipTxOption_Sf_SwigStatic = {
    "SipTxOption",
    swig_SipTxOption_Sf_SwigStatic_methods,
    swig_SipTxOption_Sf_SwigStatic_attributes,
    swig_SipTxOption_Sf_SwigStatic_constants,
    swig_SipTxOption_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipTxOption_bases[] = {0};
static const char *swig_SipTxOption_base_names[] = {0};
static swig_lua_class _wrap_class_SipTxOption = { "SipTxOption", "SipTxOption", &SWIGTYPE_p_pj__SipTxOption,_proxy__wrap_new_SipTxOption, swig_delete_SipTxOption, swig_SipTxOption_methods, swig_SipTxOption_attributes, &swig_SipTxOption_Sf_SwigStatic, swig_SipTxOption_meta, swig_SipTxOption_bases, swig_SipTxOption_base_names };

static int _wrap_SendInstantMessageParam_contentType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::contentType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::contentType",1,"pj::SendInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SendInstantMessageParam::contentType",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_contentType_set",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contentType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_contentType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::contentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::contentType",1,"pj::SendInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_contentType_get",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->contentType);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_content_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::content",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::content",1,"pj::SendInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SendInstantMessageParam::content",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_content_set",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->content = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_content_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::content",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::content",1,"pj::SendInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_content_get",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->content);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::txOption",1,"pj::SendInstantMessageParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SendInstantMessageParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_txOption_set",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SendInstantMessageParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::txOption",1,"pj::SendInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_txOption_get",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_userData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::userData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::userData",1,"pj::SendInstantMessageParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SendInstantMessageParam::userData",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_userData_set",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"SendInstantMessageParam_userData_set");
  if (arg1) (arg1)->userData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendInstantMessageParam_userData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::userData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendInstantMessageParam::userData",1,"pj::SendInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("SendInstantMessageParam_userData_get",1,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  result = (pj::Token) ((arg1)->userData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SendInstantMessageParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendInstantMessageParam *result = 0 ;
  
  SWIG_check_num_args("pj::SendInstantMessageParam::SendInstantMessageParam",0,0)
  result = (pj::SendInstantMessageParam *)new pj::SendInstantMessageParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SendInstantMessageParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SendInstantMessageParam(void *obj) {
pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_SendInstantMessageParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SendInstantMessageParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SendInstantMessageParam_attributes[] = {
    { "contentType", _wrap_SendInstantMessageParam_contentType_get, _wrap_SendInstantMessageParam_contentType_set },
    { "content", _wrap_SendInstantMessageParam_content_get, _wrap_SendInstantMessageParam_content_set },
    { "txOption", _wrap_SendInstantMessageParam_txOption_get, _wrap_SendInstantMessageParam_txOption_set },
    { "userData", _wrap_SendInstantMessageParam_userData_get, _wrap_SendInstantMessageParam_userData_set },
    {0,0,0}
};
static swig_lua_method swig_SendInstantMessageParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_SendInstantMessageParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SendInstantMessageParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SendInstantMessageParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SendInstantMessageParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SendInstantMessageParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SendInstantMessageParam_Sf_SwigStatic = {
    "SendInstantMessageParam",
    swig_SendInstantMessageParam_Sf_SwigStatic_methods,
    swig_SendInstantMessageParam_Sf_SwigStatic_attributes,
    swig_SendInstantMessageParam_Sf_SwigStatic_constants,
    swig_SendInstantMessageParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SendInstantMessageParam_bases[] = {0};
static const char *swig_SendInstantMessageParam_base_names[] = {0};
static swig_lua_class _wrap_class_SendInstantMessageParam = { "SendInstantMessageParam", "SendInstantMessageParam", &SWIGTYPE_p_pj__SendInstantMessageParam,_proxy__wrap_new_SendInstantMessageParam, swig_delete_SendInstantMessageParam, swig_SendInstantMessageParam_methods, swig_SendInstantMessageParam_attributes, &swig_SendInstantMessageParam_Sf_SwigStatic, swig_SendInstantMessageParam_meta, swig_SendInstantMessageParam_bases, swig_SendInstantMessageParam_base_names };

static int _wrap_SendTypingIndicationParam_isTyping_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::SendTypingIndicationParam::isTyping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendTypingIndicationParam::isTyping",1,"pj::SendTypingIndicationParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::SendTypingIndicationParam::isTyping",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("SendTypingIndicationParam_isTyping_set",1,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isTyping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendTypingIndicationParam_isTyping_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::SendTypingIndicationParam::isTyping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendTypingIndicationParam::isTyping",1,"pj::SendTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("SendTypingIndicationParam_isTyping_get",1,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  result = (bool) ((arg1)->isTyping);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendTypingIndicationParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::SendTypingIndicationParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendTypingIndicationParam::txOption",1,"pj::SendTypingIndicationParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SendTypingIndicationParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("SendTypingIndicationParam_txOption_set",1,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("SendTypingIndicationParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SendTypingIndicationParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::SendTypingIndicationParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SendTypingIndicationParam::txOption",1,"pj::SendTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("SendTypingIndicationParam_txOption_get",1,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SendTypingIndicationParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::SendTypingIndicationParam *result = 0 ;
  
  SWIG_check_num_args("pj::SendTypingIndicationParam::SendTypingIndicationParam",0,0)
  result = (pj::SendTypingIndicationParam *)new pj::SendTypingIndicationParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SendTypingIndicationParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SendTypingIndicationParam(void *obj) {
pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_SendTypingIndicationParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SendTypingIndicationParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SendTypingIndicationParam_attributes[] = {
    { "isTyping", _wrap_SendTypingIndicationParam_isTyping_get, _wrap_SendTypingIndicationParam_isTyping_set },
    { "txOption", _wrap_SendTypingIndicationParam_txOption_get, _wrap_SendTypingIndicationParam_txOption_set },
    {0,0,0}
};
static swig_lua_method swig_SendTypingIndicationParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_SendTypingIndicationParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SendTypingIndicationParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SendTypingIndicationParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SendTypingIndicationParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SendTypingIndicationParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SendTypingIndicationParam_Sf_SwigStatic = {
    "SendTypingIndicationParam",
    swig_SendTypingIndicationParam_Sf_SwigStatic_methods,
    swig_SendTypingIndicationParam_Sf_SwigStatic_attributes,
    swig_SendTypingIndicationParam_Sf_SwigStatic_constants,
    swig_SendTypingIndicationParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SendTypingIndicationParam_bases[] = {0};
static const char *swig_SendTypingIndicationParam_base_names[] = {0};
static swig_lua_class _wrap_class_SendTypingIndicationParam = { "SendTypingIndicationParam", "SendTypingIndicationParam", &SWIGTYPE_p_pj__SendTypingIndicationParam,_proxy__wrap_new_SendTypingIndicationParam, swig_delete_SendTypingIndicationParam, swig_SendTypingIndicationParam_methods, swig_SendTypingIndicationParam_attributes, &swig_SendTypingIndicationParam_Sf_SwigStatic, swig_SendTypingIndicationParam_meta, swig_SendTypingIndicationParam_bases, swig_SendTypingIndicationParam_base_names };

static int _wrap_new_SipHeaderVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::vector",0,0)
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipHeaderVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipHeaderVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::vector",1,"std::vector< pj::SipHeader > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("new_SipHeaderVector",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >((std::vector< pj::SipHeader > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipHeaderVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::SipHeader arg2 ;
  pj::SipHeader *argp2 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::SipHeader >::vector",2,"pj::SipHeader");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("new_SipHeaderVector",2,SWIGTYPE_p_pj__SipHeader);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipHeaderVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SipHeaderVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__SipHeader_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SipHeaderVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SipHeaderVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__SipHeader, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SipHeaderVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SipHeaderVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::SipHeader >::vector()\n"
    "    std::vector< pj::SipHeader >::vector(unsigned int)\n"
    "    std::vector< pj::SipHeader >::vector(std::vector< pj::SipHeader > const &)\n"
    "    std::vector< pj::SipHeader >::vector(unsigned int,pj::SipHeader)\n");
  lua_error(L);return 0;
}


static int _wrap_SipHeaderVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::size",1,"std::vector< pj::SipHeader > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_size",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = (unsigned int)((std::vector< pj::SipHeader > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::max_size",1,"std::vector< pj::SipHeader > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = (unsigned int)((std::vector< pj::SipHeader > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::empty",1,"std::vector< pj::SipHeader > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_empty",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = (bool)((std::vector< pj::SipHeader > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::clear",1,"std::vector< pj::SipHeader > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_clear",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  pj::SipHeader arg2 ;
  pj::SipHeader *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::push_back",1,"std::vector< pj::SipHeader > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::SipHeader >::push_back",2,"pj::SipHeader");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeaderVector_push_back",2,SWIGTYPE_p_pj__SipHeader);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::pop_back",1,"std::vector< pj::SipHeader > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  pj::SipHeader result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::front",1,"std::vector< pj::SipHeader > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_front",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = ((std::vector< pj::SipHeader > const *)arg1)->front();
  {
    pj::SipHeader * resultptr = new pj::SipHeader((const pj::SipHeader &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipHeader,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  pj::SipHeader result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::back",1,"std::vector< pj::SipHeader > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector_back",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  result = ((std::vector< pj::SipHeader > const *)arg1)->back();
  {
    pj::SipHeader * resultptr = new pj::SipHeader((const pj::SipHeader &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipHeader,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  unsigned int arg2 ;
  pj::SipHeader result;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::__getitem__",1,"std::vector< pj::SipHeader > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::SipHeader >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_SipHeader_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::SipHeader * resultptr = new pj::SipHeader((const pj::SipHeader &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipHeader,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipHeaderVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  unsigned int arg2 ;
  pj::SipHeader arg3 ;
  pj::SipHeader *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::SipHeader >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipHeader >::__setitem__",1,"std::vector< pj::SipHeader > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::SipHeader >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::SipHeader >::__setitem__",3,"pj::SipHeader");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("SipHeaderVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__SipHeader,0))){
    SWIG_fail_ptr("SipHeaderVector___setitem",3,SWIGTYPE_p_pj__SipHeader);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_SipHeader_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipHeaderVector(void *obj) {
std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipHeaderVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipHeaderVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipHeaderVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SipHeaderVector_methods[]= {
    { "size", _wrap_SipHeaderVector_size},
    { "max_size", _wrap_SipHeaderVector_max_size},
    { "empty", _wrap_SipHeaderVector_empty},
    { "clear", _wrap_SipHeaderVector_clear},
    { "push_back", _wrap_SipHeaderVector_push_back},
    { "pop_back", _wrap_SipHeaderVector_pop_back},
    { "front", _wrap_SipHeaderVector_front},
    { "back", _wrap_SipHeaderVector_back},
    { "__getitem", _wrap_SipHeaderVector___getitem},
    { "__setitem", _wrap_SipHeaderVector___setitem},
    {0,0}
};
static swig_lua_method swig_SipHeaderVector_meta[] = {
    { "__getitem", _wrap_SipHeaderVector___getitem},
    { "__setitem", _wrap_SipHeaderVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_SipHeaderVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipHeaderVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipHeaderVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipHeaderVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipHeaderVector_Sf_SwigStatic = {
    "SipHeaderVector",
    swig_SipHeaderVector_Sf_SwigStatic_methods,
    swig_SipHeaderVector_Sf_SwigStatic_attributes,
    swig_SipHeaderVector_Sf_SwigStatic_constants,
    swig_SipHeaderVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipHeaderVector_bases[] = {0};
static const char *swig_SipHeaderVector_base_names[] = {0};
static swig_lua_class _wrap_class_SipHeaderVector = { "SipHeaderVector", "SipHeaderVector", &SWIGTYPE_p_std__vectorT_pj__SipHeader_t,_proxy__wrap_new_SipHeaderVector, swig_delete_SipHeaderVector, swig_SipHeaderVector_methods, swig_SipHeaderVector_attributes, &swig_SipHeaderVector_Sf_SwigStatic, swig_SipHeaderVector_meta, swig_SipHeaderVector_bases, swig_SipHeaderVector_base_names };

static int _wrap_new_AuthCredInfoVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::vector",0,0)
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfoVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfoVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::vector",1,"std::vector< pj::AuthCredInfo > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("new_AuthCredInfoVector",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >((std::vector< pj::AuthCredInfo > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfoVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::AuthCredInfo arg2 ;
  pj::AuthCredInfo *argp2 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::vector",2,"pj::AuthCredInfo");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("new_AuthCredInfoVector",2,SWIGTYPE_p_pj__AuthCredInfo);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AuthCredInfoVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AuthCredInfoVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AuthCredInfoVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AuthCredInfoVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__AuthCredInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AuthCredInfoVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AuthCredInfoVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::AuthCredInfo >::vector()\n"
    "    std::vector< pj::AuthCredInfo >::vector(unsigned int)\n"
    "    std::vector< pj::AuthCredInfo >::vector(std::vector< pj::AuthCredInfo > const &)\n"
    "    std::vector< pj::AuthCredInfo >::vector(unsigned int,pj::AuthCredInfo)\n");
  lua_error(L);return 0;
}


static int _wrap_AuthCredInfoVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::size",1,"std::vector< pj::AuthCredInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_size",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = (unsigned int)((std::vector< pj::AuthCredInfo > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::max_size",1,"std::vector< pj::AuthCredInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = (unsigned int)((std::vector< pj::AuthCredInfo > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::empty",1,"std::vector< pj::AuthCredInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_empty",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = (bool)((std::vector< pj::AuthCredInfo > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::clear",1,"std::vector< pj::AuthCredInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_clear",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  pj::AuthCredInfo arg2 ;
  pj::AuthCredInfo *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::push_back",1,"std::vector< pj::AuthCredInfo > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::push_back",2,"pj::AuthCredInfo");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfoVector_push_back",2,SWIGTYPE_p_pj__AuthCredInfo);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::pop_back",1,"std::vector< pj::AuthCredInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  pj::AuthCredInfo result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::front",1,"std::vector< pj::AuthCredInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_front",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->front();
  {
    pj::AuthCredInfo * resultptr = new pj::AuthCredInfo((const pj::AuthCredInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AuthCredInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  pj::AuthCredInfo result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::back",1,"std::vector< pj::AuthCredInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector_back",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->back();
  {
    pj::AuthCredInfo * resultptr = new pj::AuthCredInfo((const pj::AuthCredInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AuthCredInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  unsigned int arg2 ;
  pj::AuthCredInfo result;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::__getitem__",1,"std::vector< pj::AuthCredInfo > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::AuthCredInfo * resultptr = new pj::AuthCredInfo((const pj::AuthCredInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AuthCredInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AuthCredInfoVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  unsigned int arg2 ;
  pj::AuthCredInfo arg3 ;
  pj::AuthCredInfo *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::AuthCredInfo >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::__setitem__",1,"std::vector< pj::AuthCredInfo > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::AuthCredInfo >::__setitem__",3,"pj::AuthCredInfo");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AuthCredInfoVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__AuthCredInfo,0))){
    SWIG_fail_ptr("AuthCredInfoVector___setitem",3,SWIGTYPE_p_pj__AuthCredInfo);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AuthCredInfoVector(void *obj) {
std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AuthCredInfoVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AuthCredInfoVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AuthCredInfoVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AuthCredInfoVector_methods[]= {
    { "size", _wrap_AuthCredInfoVector_size},
    { "max_size", _wrap_AuthCredInfoVector_max_size},
    { "empty", _wrap_AuthCredInfoVector_empty},
    { "clear", _wrap_AuthCredInfoVector_clear},
    { "push_back", _wrap_AuthCredInfoVector_push_back},
    { "pop_back", _wrap_AuthCredInfoVector_pop_back},
    { "front", _wrap_AuthCredInfoVector_front},
    { "back", _wrap_AuthCredInfoVector_back},
    { "__getitem", _wrap_AuthCredInfoVector___getitem},
    { "__setitem", _wrap_AuthCredInfoVector___setitem},
    {0,0}
};
static swig_lua_method swig_AuthCredInfoVector_meta[] = {
    { "__getitem", _wrap_AuthCredInfoVector___getitem},
    { "__setitem", _wrap_AuthCredInfoVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_AuthCredInfoVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AuthCredInfoVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AuthCredInfoVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AuthCredInfoVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AuthCredInfoVector_Sf_SwigStatic = {
    "AuthCredInfoVector",
    swig_AuthCredInfoVector_Sf_SwigStatic_methods,
    swig_AuthCredInfoVector_Sf_SwigStatic_attributes,
    swig_AuthCredInfoVector_Sf_SwigStatic_constants,
    swig_AuthCredInfoVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AuthCredInfoVector_bases[] = {0};
static const char *swig_AuthCredInfoVector_base_names[] = {0};
static swig_lua_class _wrap_class_AuthCredInfoVector = { "AuthCredInfoVector", "AuthCredInfoVector", &SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,_proxy__wrap_new_AuthCredInfoVector, swig_delete_AuthCredInfoVector, swig_AuthCredInfoVector_methods, swig_AuthCredInfoVector_attributes, &swig_AuthCredInfoVector_Sf_SwigStatic, swig_AuthCredInfoVector_meta, swig_AuthCredInfoVector_bases, swig_AuthCredInfoVector_base_names };

static int _wrap_new_SipMultipartPartVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::vector",0,0)
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMultipartPartVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMultipartPartVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::vector",1,"std::vector< pj::SipMultipartPart > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("new_SipMultipartPartVector",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >((std::vector< pj::SipMultipartPart > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMultipartPartVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::SipMultipartPart arg2 ;
  pj::SipMultipartPart *argp2 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::vector",2,"pj::SipMultipartPart");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("new_SipMultipartPartVector",2,SWIGTYPE_p_pj__SipMultipartPart);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SipMultipartPartVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_SipMultipartPartVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_SipMultipartPartVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_SipMultipartPartVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__SipMultipartPart, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_SipMultipartPartVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SipMultipartPartVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::SipMultipartPart >::vector()\n"
    "    std::vector< pj::SipMultipartPart >::vector(unsigned int)\n"
    "    std::vector< pj::SipMultipartPart >::vector(std::vector< pj::SipMultipartPart > const &)\n"
    "    std::vector< pj::SipMultipartPart >::vector(unsigned int,pj::SipMultipartPart)\n");
  lua_error(L);return 0;
}


static int _wrap_SipMultipartPartVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::size",1,"std::vector< pj::SipMultipartPart > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_size",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = (unsigned int)((std::vector< pj::SipMultipartPart > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::max_size",1,"std::vector< pj::SipMultipartPart > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = (unsigned int)((std::vector< pj::SipMultipartPart > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::empty",1,"std::vector< pj::SipMultipartPart > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_empty",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = (bool)((std::vector< pj::SipMultipartPart > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::clear",1,"std::vector< pj::SipMultipartPart > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_clear",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  pj::SipMultipartPart arg2 ;
  pj::SipMultipartPart *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::push_back",1,"std::vector< pj::SipMultipartPart > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::push_back",2,"pj::SipMultipartPart");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPartVector_push_back",2,SWIGTYPE_p_pj__SipMultipartPart);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::pop_back",1,"std::vector< pj::SipMultipartPart > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  pj::SipMultipartPart result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::front",1,"std::vector< pj::SipMultipartPart > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_front",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->front();
  {
    pj::SipMultipartPart * resultptr = new pj::SipMultipartPart((const pj::SipMultipartPart &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipMultipartPart,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  pj::SipMultipartPart result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::back",1,"std::vector< pj::SipMultipartPart > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector_back",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->back();
  {
    pj::SipMultipartPart * resultptr = new pj::SipMultipartPart((const pj::SipMultipartPart &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipMultipartPart,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  unsigned int arg2 ;
  pj::SipMultipartPart result;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::__getitem__",1,"std::vector< pj::SipMultipartPart > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::SipMultipartPart * resultptr = new pj::SipMultipartPart((const pj::SipMultipartPart &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__SipMultipartPart,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SipMultipartPartVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  unsigned int arg2 ;
  pj::SipMultipartPart arg3 ;
  pj::SipMultipartPart *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::SipMultipartPart >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::__setitem__",1,"std::vector< pj::SipMultipartPart > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::SipMultipartPart >::__setitem__",3,"pj::SipMultipartPart");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,0))){
    SWIG_fail_ptr("SipMultipartPartVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__SipMultipartPart,0))){
    SWIG_fail_ptr("SipMultipartPartVector___setitem",3,SWIGTYPE_p_pj__SipMultipartPart);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SipMultipartPartVector(void *obj) {
std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) obj;
delete arg1;
}
static int _proxy__wrap_new_SipMultipartPartVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SipMultipartPartVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SipMultipartPartVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SipMultipartPartVector_methods[]= {
    { "size", _wrap_SipMultipartPartVector_size},
    { "max_size", _wrap_SipMultipartPartVector_max_size},
    { "empty", _wrap_SipMultipartPartVector_empty},
    { "clear", _wrap_SipMultipartPartVector_clear},
    { "push_back", _wrap_SipMultipartPartVector_push_back},
    { "pop_back", _wrap_SipMultipartPartVector_pop_back},
    { "front", _wrap_SipMultipartPartVector_front},
    { "back", _wrap_SipMultipartPartVector_back},
    { "__getitem", _wrap_SipMultipartPartVector___getitem},
    { "__setitem", _wrap_SipMultipartPartVector___setitem},
    {0,0}
};
static swig_lua_method swig_SipMultipartPartVector_meta[] = {
    { "__getitem", _wrap_SipMultipartPartVector___getitem},
    { "__setitem", _wrap_SipMultipartPartVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_SipMultipartPartVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SipMultipartPartVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SipMultipartPartVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SipMultipartPartVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SipMultipartPartVector_Sf_SwigStatic = {
    "SipMultipartPartVector",
    swig_SipMultipartPartVector_Sf_SwigStatic_methods,
    swig_SipMultipartPartVector_Sf_SwigStatic_attributes,
    swig_SipMultipartPartVector_Sf_SwigStatic_constants,
    swig_SipMultipartPartVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SipMultipartPartVector_bases[] = {0};
static const char *swig_SipMultipartPartVector_base_names[] = {0};
static swig_lua_class _wrap_class_SipMultipartPartVector = { "SipMultipartPartVector", "SipMultipartPartVector", &SWIGTYPE_p_std__vectorT_pj__SipMultipartPart_t,_proxy__wrap_new_SipMultipartPartVector, swig_delete_SipMultipartPartVector, swig_SipMultipartPartVector_methods, swig_SipMultipartPartVector_attributes, &swig_SipMultipartPartVector_Sf_SwigStatic, swig_SipMultipartPartVector_meta, swig_SipMultipartPartVector_bases, swig_SipMultipartPartVector_base_names };

static int _wrap_new_BuddyVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::vector",0,0)
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::vector",1,"std::vector< pj::Buddy * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("new_BuddyVector",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >((std::vector< pj::Buddy * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::Buddy *arg2 = (pj::Buddy *) 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::Buddy * >::vector",2,"pj::Buddy *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("new_BuddyVector",2,SWIGTYPE_p_pj__Buddy);
  }
  
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BuddyVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__Buddy_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BuddyVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BuddyVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__Buddy, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BuddyVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BuddyVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::Buddy * >::vector()\n"
    "    std::vector< pj::Buddy * >::vector(unsigned int)\n"
    "    std::vector< pj::Buddy * >::vector(std::vector< pj::Buddy * > const &)\n"
    "    std::vector< pj::Buddy * >::vector(unsigned int,pj::Buddy *)\n");
  lua_error(L);return 0;
}


static int _wrap_BuddyVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::size",1,"std::vector< pj::Buddy * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_size",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::Buddy * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::max_size",1,"std::vector< pj::Buddy * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::Buddy * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::empty",1,"std::vector< pj::Buddy * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_empty",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (bool)((std::vector< pj::Buddy * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::clear",1,"std::vector< pj::Buddy * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_clear",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy *arg2 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::push_back",1,"std::vector< pj::Buddy * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::Buddy * >::push_back",2,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("BuddyVector_push_back",2,SWIGTYPE_p_pj__Buddy);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::pop_back",1,"std::vector< pj::Buddy * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::front",1,"std::vector< pj::Buddy * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_front",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (pj::Buddy *)((std::vector< pj::Buddy * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::back",1,"std::vector< pj::Buddy * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector_back",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  result = (pj::Buddy *)((std::vector< pj::Buddy * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  unsigned int arg2 ;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::__getitem__",1,"std::vector< pj::Buddy * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::Buddy * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (pj::Buddy *)std_vector_Sl_pj_Buddy_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  unsigned int arg2 ;
  pj::Buddy *arg3 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::Buddy * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::Buddy * >::__setitem__",1,"std::vector< pj::Buddy * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::Buddy * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< pj::Buddy * >::__setitem__",3,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0))){
    SWIG_fail_ptr("BuddyVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("BuddyVector___setitem",3,SWIGTYPE_p_pj__Buddy);
  }
  
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BuddyVector(void *obj) {
std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_BuddyVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BuddyVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BuddyVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BuddyVector_methods[]= {
    { "size", _wrap_BuddyVector_size},
    { "max_size", _wrap_BuddyVector_max_size},
    { "empty", _wrap_BuddyVector_empty},
    { "clear", _wrap_BuddyVector_clear},
    { "push_back", _wrap_BuddyVector_push_back},
    { "pop_back", _wrap_BuddyVector_pop_back},
    { "front", _wrap_BuddyVector_front},
    { "back", _wrap_BuddyVector_back},
    { "__getitem", _wrap_BuddyVector___getitem},
    { "__setitem", _wrap_BuddyVector___setitem},
    {0,0}
};
static swig_lua_method swig_BuddyVector_meta[] = {
    { "__getitem", _wrap_BuddyVector___getitem},
    { "__setitem", _wrap_BuddyVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_BuddyVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BuddyVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BuddyVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BuddyVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BuddyVector_Sf_SwigStatic = {
    "BuddyVector",
    swig_BuddyVector_Sf_SwigStatic_methods,
    swig_BuddyVector_Sf_SwigStatic_attributes,
    swig_BuddyVector_Sf_SwigStatic_constants,
    swig_BuddyVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BuddyVector_bases[] = {0};
static const char *swig_BuddyVector_base_names[] = {0};
static swig_lua_class _wrap_class_BuddyVector = { "BuddyVector", "BuddyVector", &SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,_proxy__wrap_new_BuddyVector, swig_delete_BuddyVector, swig_BuddyVector_methods, swig_BuddyVector_attributes, &swig_BuddyVector_Sf_SwigStatic, swig_BuddyVector_meta, swig_BuddyVector_bases, swig_BuddyVector_base_names };

static int _wrap_new_AudioMediaVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::vector",0,0)
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioMediaVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioMediaVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::vector",1,"std::vector< pj::AudioMedia * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("new_AudioMediaVector",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >((std::vector< pj::AudioMedia * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioMediaVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::AudioMedia *arg2 = (pj::AudioMedia *) 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::vector",2,"pj::AudioMedia *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("new_AudioMediaVector",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioMediaVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AudioMediaVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AudioMediaVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AudioMediaVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__AudioMedia, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AudioMediaVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AudioMediaVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::AudioMedia * >::vector()\n"
    "    std::vector< pj::AudioMedia * >::vector(unsigned int)\n"
    "    std::vector< pj::AudioMedia * >::vector(std::vector< pj::AudioMedia * > const &)\n"
    "    std::vector< pj::AudioMedia * >::vector(unsigned int,pj::AudioMedia *)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioMediaVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::size",1,"std::vector< pj::AudioMedia * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_size",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::AudioMedia * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::max_size",1,"std::vector< pj::AudioMedia * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::AudioMedia * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::empty",1,"std::vector< pj::AudioMedia * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_empty",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (bool)((std::vector< pj::AudioMedia * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::clear",1,"std::vector< pj::AudioMedia * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_clear",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia *arg2 = (pj::AudioMedia *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::push_back",1,"std::vector< pj::AudioMedia * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::push_back",2,"pj::AudioMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMediaVector_push_back",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::pop_back",1,"std::vector< pj::AudioMedia * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::front",1,"std::vector< pj::AudioMedia * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_front",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (pj::AudioMedia *)((std::vector< pj::AudioMedia * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::back",1,"std::vector< pj::AudioMedia * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector_back",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  result = (pj::AudioMedia *)((std::vector< pj::AudioMedia * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  unsigned int arg2 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::__getitem__",1,"std::vector< pj::AudioMedia * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (pj::AudioMedia *)std_vector_Sl_pj_AudioMedia_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  unsigned int arg2 ;
  pj::AudioMedia *arg3 = (pj::AudioMedia *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioMedia * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::__setitem__",1,"std::vector< pj::AudioMedia * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< pj::AudioMedia * >::__setitem__",3,"pj::AudioMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0))){
    SWIG_fail_ptr("AudioMediaVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMediaVector___setitem",3,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioMediaVector(void *obj) {
std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioMediaVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioMediaVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioMediaVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioMediaVector_methods[]= {
    { "size", _wrap_AudioMediaVector_size},
    { "max_size", _wrap_AudioMediaVector_max_size},
    { "empty", _wrap_AudioMediaVector_empty},
    { "clear", _wrap_AudioMediaVector_clear},
    { "push_back", _wrap_AudioMediaVector_push_back},
    { "pop_back", _wrap_AudioMediaVector_pop_back},
    { "front", _wrap_AudioMediaVector_front},
    { "back", _wrap_AudioMediaVector_back},
    { "__getitem", _wrap_AudioMediaVector___getitem},
    { "__setitem", _wrap_AudioMediaVector___setitem},
    {0,0}
};
static swig_lua_method swig_AudioMediaVector_meta[] = {
    { "__getitem", _wrap_AudioMediaVector___getitem},
    { "__setitem", _wrap_AudioMediaVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_AudioMediaVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioMediaVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioMediaVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioMediaVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioMediaVector_Sf_SwigStatic = {
    "AudioMediaVector",
    swig_AudioMediaVector_Sf_SwigStatic_methods,
    swig_AudioMediaVector_Sf_SwigStatic_attributes,
    swig_AudioMediaVector_Sf_SwigStatic_constants,
    swig_AudioMediaVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioMediaVector_bases[] = {0};
static const char *swig_AudioMediaVector_base_names[] = {0};
static swig_lua_class _wrap_class_AudioMediaVector = { "AudioMediaVector", "AudioMediaVector", &SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,_proxy__wrap_new_AudioMediaVector, swig_delete_AudioMediaVector, swig_AudioMediaVector_methods, swig_AudioMediaVector_attributes, &swig_AudioMediaVector_Sf_SwigStatic, swig_AudioMediaVector_meta, swig_AudioMediaVector_bases, swig_AudioMediaVector_base_names };

static int _wrap_new_ToneDescVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::vector",0,0)
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDescVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDescVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::vector",1,"std::vector< pj::ToneDesc > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("new_ToneDescVector",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >((std::vector< pj::ToneDesc > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDescVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::ToneDesc arg2 ;
  pj::ToneDesc *argp2 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDesc >::vector",2,"pj::ToneDesc");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDesc,0))){
    SWIG_fail_ptr("new_ToneDescVector",2,SWIGTYPE_p_pj__ToneDesc);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDescVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ToneDescVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDesc_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ToneDescVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ToneDescVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__ToneDesc, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ToneDescVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ToneDescVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::ToneDesc >::vector()\n"
    "    std::vector< pj::ToneDesc >::vector(unsigned int)\n"
    "    std::vector< pj::ToneDesc >::vector(std::vector< pj::ToneDesc > const &)\n"
    "    std::vector< pj::ToneDesc >::vector(unsigned int,pj::ToneDesc)\n");
  lua_error(L);return 0;
}


static int _wrap_ToneDescVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::size",1,"std::vector< pj::ToneDesc > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDesc > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::max_size",1,"std::vector< pj::ToneDesc > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDesc > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::empty",1,"std::vector< pj::ToneDesc > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_empty",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = (bool)((std::vector< pj::ToneDesc > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::clear",1,"std::vector< pj::ToneDesc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_clear",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  pj::ToneDesc arg2 ;
  pj::ToneDesc *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::push_back",1,"std::vector< pj::ToneDesc > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDesc >::push_back",2,"pj::ToneDesc");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDesc,0))){
    SWIG_fail_ptr("ToneDescVector_push_back",2,SWIGTYPE_p_pj__ToneDesc);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::pop_back",1,"std::vector< pj::ToneDesc > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  pj::ToneDesc result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::front",1,"std::vector< pj::ToneDesc > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_front",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = ((std::vector< pj::ToneDesc > const *)arg1)->front();
  {
    pj::ToneDesc * resultptr = new pj::ToneDesc((const pj::ToneDesc &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDesc,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  pj::ToneDesc result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::back",1,"std::vector< pj::ToneDesc > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  result = ((std::vector< pj::ToneDesc > const *)arg1)->back();
  {
    pj::ToneDesc * resultptr = new pj::ToneDesc((const pj::ToneDesc &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDesc,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDesc result;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::__getitem__",1,"std::vector< pj::ToneDesc > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDesc >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::ToneDesc * resultptr = new pj::ToneDesc((const pj::ToneDesc &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDesc,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDescVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDesc arg3 ;
  pj::ToneDesc *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDesc >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDesc >::__setitem__",1,"std::vector< pj::ToneDesc > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDesc >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::ToneDesc >::__setitem__",3,"pj::ToneDesc");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneDescVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__ToneDesc,0))){
    SWIG_fail_ptr("ToneDescVector___setitem",3,SWIGTYPE_p_pj__ToneDesc);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_ToneDesc_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDescVector(void *obj) {
std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDescVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDescVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDescVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneDescVector_methods[]= {
    { "size", _wrap_ToneDescVector_size},
    { "max_size", _wrap_ToneDescVector_max_size},
    { "empty", _wrap_ToneDescVector_empty},
    { "clear", _wrap_ToneDescVector_clear},
    { "push_back", _wrap_ToneDescVector_push_back},
    { "pop_back", _wrap_ToneDescVector_pop_back},
    { "front", _wrap_ToneDescVector_front},
    { "back", _wrap_ToneDescVector_back},
    { "__getitem", _wrap_ToneDescVector___getitem},
    { "__setitem", _wrap_ToneDescVector___setitem},
    {0,0}
};
static swig_lua_method swig_ToneDescVector_meta[] = {
    { "__getitem", _wrap_ToneDescVector___getitem},
    { "__setitem", _wrap_ToneDescVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ToneDescVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDescVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDescVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDescVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDescVector_Sf_SwigStatic = {
    "ToneDescVector",
    swig_ToneDescVector_Sf_SwigStatic_methods,
    swig_ToneDescVector_Sf_SwigStatic_attributes,
    swig_ToneDescVector_Sf_SwigStatic_constants,
    swig_ToneDescVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDescVector_bases[] = {0};
static const char *swig_ToneDescVector_base_names[] = {0};
static swig_lua_class _wrap_class_ToneDescVector = { "ToneDescVector", "ToneDescVector", &SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,_proxy__wrap_new_ToneDescVector, swig_delete_ToneDescVector, swig_ToneDescVector_methods, swig_ToneDescVector_attributes, &swig_ToneDescVector_Sf_SwigStatic, swig_ToneDescVector_meta, swig_ToneDescVector_bases, swig_ToneDescVector_base_names };

static int _wrap_new_ToneDigitVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::vector",0,0)
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::vector",1,"std::vector< pj::ToneDigit > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("new_ToneDigitVector",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >((std::vector< pj::ToneDigit > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::ToneDigit arg2 ;
  pj::ToneDigit *argp2 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigit >::vector",2,"pj::ToneDigit");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDigit,0))){
    SWIG_fail_ptr("new_ToneDigitVector",2,SWIGTYPE_p_pj__ToneDigit);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ToneDigitVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDigit_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ToneDigitVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ToneDigitVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__ToneDigit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ToneDigitVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ToneDigitVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::ToneDigit >::vector()\n"
    "    std::vector< pj::ToneDigit >::vector(unsigned int)\n"
    "    std::vector< pj::ToneDigit >::vector(std::vector< pj::ToneDigit > const &)\n"
    "    std::vector< pj::ToneDigit >::vector(unsigned int,pj::ToneDigit)\n");
  lua_error(L);return 0;
}


static int _wrap_ToneDigitVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::size",1,"std::vector< pj::ToneDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDigit > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::max_size",1,"std::vector< pj::ToneDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDigit > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::empty",1,"std::vector< pj::ToneDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_empty",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = (bool)((std::vector< pj::ToneDigit > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::clear",1,"std::vector< pj::ToneDigit > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_clear",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  pj::ToneDigit arg2 ;
  pj::ToneDigit *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::push_back",1,"std::vector< pj::ToneDigit > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigit >::push_back",2,"pj::ToneDigit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDigit,0))){
    SWIG_fail_ptr("ToneDigitVector_push_back",2,SWIGTYPE_p_pj__ToneDigit);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::pop_back",1,"std::vector< pj::ToneDigit > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  pj::ToneDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::front",1,"std::vector< pj::ToneDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_front",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = ((std::vector< pj::ToneDigit > const *)arg1)->front();
  {
    pj::ToneDigit * resultptr = new pj::ToneDigit((const pj::ToneDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  pj::ToneDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::back",1,"std::vector< pj::ToneDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  result = ((std::vector< pj::ToneDigit > const *)arg1)->back();
  {
    pj::ToneDigit * resultptr = new pj::ToneDigit((const pj::ToneDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::__getitem__",1,"std::vector< pj::ToneDigit > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigit >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::ToneDigit * resultptr = new pj::ToneDigit((const pj::ToneDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDigit arg3 ;
  pj::ToneDigit *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigit >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigit >::__setitem__",1,"std::vector< pj::ToneDigit > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigit >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::ToneDigit >::__setitem__",3,"pj::ToneDigit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneDigitVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__ToneDigit,0))){
    SWIG_fail_ptr("ToneDigitVector___setitem",3,SWIGTYPE_p_pj__ToneDigit);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_ToneDigit_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDigitVector(void *obj) {
std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDigitVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDigitVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDigitVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneDigitVector_methods[]= {
    { "size", _wrap_ToneDigitVector_size},
    { "max_size", _wrap_ToneDigitVector_max_size},
    { "empty", _wrap_ToneDigitVector_empty},
    { "clear", _wrap_ToneDigitVector_clear},
    { "push_back", _wrap_ToneDigitVector_push_back},
    { "pop_back", _wrap_ToneDigitVector_pop_back},
    { "front", _wrap_ToneDigitVector_front},
    { "back", _wrap_ToneDigitVector_back},
    { "__getitem", _wrap_ToneDigitVector___getitem},
    { "__setitem", _wrap_ToneDigitVector___setitem},
    {0,0}
};
static swig_lua_method swig_ToneDigitVector_meta[] = {
    { "__getitem", _wrap_ToneDigitVector___getitem},
    { "__setitem", _wrap_ToneDigitVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ToneDigitVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDigitVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDigitVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDigitVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDigitVector_Sf_SwigStatic = {
    "ToneDigitVector",
    swig_ToneDigitVector_Sf_SwigStatic_methods,
    swig_ToneDigitVector_Sf_SwigStatic_attributes,
    swig_ToneDigitVector_Sf_SwigStatic_constants,
    swig_ToneDigitVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDigitVector_bases[] = {0};
static const char *swig_ToneDigitVector_base_names[] = {0};
static swig_lua_class _wrap_class_ToneDigitVector = { "ToneDigitVector", "ToneDigitVector", &SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,_proxy__wrap_new_ToneDigitVector, swig_delete_ToneDigitVector, swig_ToneDigitVector_methods, swig_ToneDigitVector_attributes, &swig_ToneDigitVector_Sf_SwigStatic, swig_ToneDigitVector_meta, swig_ToneDigitVector_bases, swig_ToneDigitVector_base_names };

static int _wrap_new_ToneDigitMapVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::vector",0,0)
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitMapVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitMapVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::vector",1,"std::vector< pj::ToneDigitMapDigit > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("new_ToneDigitMapVector",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >((std::vector< pj::ToneDigitMapDigit > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitMapVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::ToneDigitMapDigit arg2 ;
  pj::ToneDigitMapDigit *argp2 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::vector",2,"pj::ToneDigitMapDigit");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("new_ToneDigitMapVector",2,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitMapVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ToneDigitMapVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ToneDigitMapVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ToneDigitMapVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__ToneDigitMapDigit, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ToneDigitMapVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ToneDigitMapVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::ToneDigitMapDigit >::vector()\n"
    "    std::vector< pj::ToneDigitMapDigit >::vector(unsigned int)\n"
    "    std::vector< pj::ToneDigitMapDigit >::vector(std::vector< pj::ToneDigitMapDigit > const &)\n"
    "    std::vector< pj::ToneDigitMapDigit >::vector(unsigned int,pj::ToneDigitMapDigit)\n");
  lua_error(L);return 0;
}


static int _wrap_ToneDigitMapVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::size",1,"std::vector< pj::ToneDigitMapDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDigitMapDigit > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::max_size",1,"std::vector< pj::ToneDigitMapDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = (unsigned int)((std::vector< pj::ToneDigitMapDigit > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::empty",1,"std::vector< pj::ToneDigitMapDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_empty",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = (bool)((std::vector< pj::ToneDigitMapDigit > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::clear",1,"std::vector< pj::ToneDigitMapDigit > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_clear",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  pj::ToneDigitMapDigit arg2 ;
  pj::ToneDigitMapDigit *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::push_back",1,"std::vector< pj::ToneDigitMapDigit > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::push_back",2,"pj::ToneDigitMapDigit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapVector_push_back",2,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::pop_back",1,"std::vector< pj::ToneDigitMapDigit > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  pj::ToneDigitMapDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::front",1,"std::vector< pj::ToneDigitMapDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_front",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->front();
  {
    pj::ToneDigitMapDigit * resultptr = new pj::ToneDigitMapDigit((const pj::ToneDigitMapDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigitMapDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  pj::ToneDigitMapDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::back",1,"std::vector< pj::ToneDigitMapDigit > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector_back",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->back();
  {
    pj::ToneDigitMapDigit * resultptr = new pj::ToneDigitMapDigit((const pj::ToneDigitMapDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigitMapDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDigitMapDigit result;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::__getitem__",1,"std::vector< pj::ToneDigitMapDigit > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::ToneDigitMapDigit * resultptr = new pj::ToneDigitMapDigit((const pj::ToneDigitMapDigit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ToneDigitMapDigit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  unsigned int arg2 ;
  pj::ToneDigitMapDigit arg3 ;
  pj::ToneDigitMapDigit *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::ToneDigitMapDigit >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::__setitem__",1,"std::vector< pj::ToneDigitMapDigit > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::ToneDigitMapDigit >::__setitem__",3,"pj::ToneDigitMapDigit");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneDigitMapVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapVector___setitem",3,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDigitMapVector(void *obj) {
std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDigitMapVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDigitMapVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDigitMapVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneDigitMapVector_methods[]= {
    { "size", _wrap_ToneDigitMapVector_size},
    { "max_size", _wrap_ToneDigitMapVector_max_size},
    { "empty", _wrap_ToneDigitMapVector_empty},
    { "clear", _wrap_ToneDigitMapVector_clear},
    { "push_back", _wrap_ToneDigitMapVector_push_back},
    { "pop_back", _wrap_ToneDigitMapVector_pop_back},
    { "front", _wrap_ToneDigitMapVector_front},
    { "back", _wrap_ToneDigitMapVector_back},
    { "__getitem", _wrap_ToneDigitMapVector___getitem},
    { "__setitem", _wrap_ToneDigitMapVector___setitem},
    {0,0}
};
static swig_lua_method swig_ToneDigitMapVector_meta[] = {
    { "__getitem", _wrap_ToneDigitMapVector___getitem},
    { "__setitem", _wrap_ToneDigitMapVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_ToneDigitMapVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDigitMapVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDigitMapVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDigitMapVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDigitMapVector_Sf_SwigStatic = {
    "ToneDigitMapVector",
    swig_ToneDigitMapVector_Sf_SwigStatic_methods,
    swig_ToneDigitMapVector_Sf_SwigStatic_attributes,
    swig_ToneDigitMapVector_Sf_SwigStatic_constants,
    swig_ToneDigitMapVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDigitMapVector_bases[] = {0};
static const char *swig_ToneDigitMapVector_base_names[] = {0};
static swig_lua_class _wrap_class_ToneDigitMapVector = { "ToneDigitMapVector", "ToneDigitMapVector", &SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,_proxy__wrap_new_ToneDigitMapVector, swig_delete_ToneDigitMapVector, swig_ToneDigitMapVector_methods, swig_ToneDigitMapVector_attributes, &swig_ToneDigitMapVector_Sf_SwigStatic, swig_ToneDigitMapVector_meta, swig_ToneDigitMapVector_bases, swig_ToneDigitMapVector_base_names };

static int _wrap_new_MediaFormatVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::vector",0,0)
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = 0 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::vector",1,"std::vector< pj::MediaFormat * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("new_MediaFormatVector",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >((std::vector< pj::MediaFormat * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::MediaFormat *arg2 = (pj::MediaFormat *) 0 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::vector",2,"pj::MediaFormat *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("new_MediaFormatVector",2,SWIGTYPE_p_pj__MediaFormat);
  }
  
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_MediaFormatVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_MediaFormatVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_MediaFormatVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__MediaFormat, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_MediaFormatVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MediaFormatVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::MediaFormat * >::vector()\n"
    "    std::vector< pj::MediaFormat * >::vector(unsigned int)\n"
    "    std::vector< pj::MediaFormat * >::vector(std::vector< pj::MediaFormat * > const &)\n"
    "    std::vector< pj::MediaFormat * >::vector(unsigned int,pj::MediaFormat *)\n");
  lua_error(L);return 0;
}


static int _wrap_MediaFormatVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::size",1,"std::vector< pj::MediaFormat * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_size",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::MediaFormat * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::max_size",1,"std::vector< pj::MediaFormat * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::MediaFormat * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::empty",1,"std::vector< pj::MediaFormat * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_empty",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (bool)((std::vector< pj::MediaFormat * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::clear",1,"std::vector< pj::MediaFormat * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_clear",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat *arg2 = (pj::MediaFormat *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::push_back",1,"std::vector< pj::MediaFormat * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::push_back",2,"pj::MediaFormat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormatVector_push_back",2,SWIGTYPE_p_pj__MediaFormat);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::pop_back",1,"std::vector< pj::MediaFormat * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::front",1,"std::vector< pj::MediaFormat * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_front",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (pj::MediaFormat *)((std::vector< pj::MediaFormat * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::back",1,"std::vector< pj::MediaFormat * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector_back",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  result = (pj::MediaFormat *)((std::vector< pj::MediaFormat * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  unsigned int arg2 ;
  pj::MediaFormat *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::__getitem__",1,"std::vector< pj::MediaFormat * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (pj::MediaFormat *)std_vector_Sl_pj_MediaFormat_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  unsigned int arg2 ;
  pj::MediaFormat *arg3 = (pj::MediaFormat *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::MediaFormat * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::__setitem__",1,"std::vector< pj::MediaFormat * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< pj::MediaFormat * >::__setitem__",3,"pj::MediaFormat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("MediaFormatVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormatVector___setitem",3,SWIGTYPE_p_pj__MediaFormat);
  }
  
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaFormatVector(void *obj) {
std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaFormatVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaFormatVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaFormatVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MediaFormatVector_methods[]= {
    { "size", _wrap_MediaFormatVector_size},
    { "max_size", _wrap_MediaFormatVector_max_size},
    { "empty", _wrap_MediaFormatVector_empty},
    { "clear", _wrap_MediaFormatVector_clear},
    { "push_back", _wrap_MediaFormatVector_push_back},
    { "pop_back", _wrap_MediaFormatVector_pop_back},
    { "front", _wrap_MediaFormatVector_front},
    { "back", _wrap_MediaFormatVector_back},
    { "__getitem", _wrap_MediaFormatVector___getitem},
    { "__setitem", _wrap_MediaFormatVector___setitem},
    {0,0}
};
static swig_lua_method swig_MediaFormatVector_meta[] = {
    { "__getitem", _wrap_MediaFormatVector___getitem},
    { "__setitem", _wrap_MediaFormatVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_MediaFormatVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaFormatVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaFormatVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaFormatVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaFormatVector_Sf_SwigStatic = {
    "MediaFormatVector",
    swig_MediaFormatVector_Sf_SwigStatic_methods,
    swig_MediaFormatVector_Sf_SwigStatic_attributes,
    swig_MediaFormatVector_Sf_SwigStatic_constants,
    swig_MediaFormatVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaFormatVector_bases[] = {0};
static const char *swig_MediaFormatVector_base_names[] = {0};
static swig_lua_class _wrap_class_MediaFormatVector = { "MediaFormatVector", "MediaFormatVector", &SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,_proxy__wrap_new_MediaFormatVector, swig_delete_MediaFormatVector, swig_MediaFormatVector_methods, swig_MediaFormatVector_attributes, &swig_MediaFormatVector_Sf_SwigStatic, swig_MediaFormatVector_meta, swig_MediaFormatVector_bases, swig_MediaFormatVector_base_names };

static int _wrap_new_AudioDevInfoVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::vector",0,0)
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevInfoVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevInfoVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::vector",1,"std::vector< pj::AudioDevInfo * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("new_AudioDevInfoVector",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >((std::vector< pj::AudioDevInfo * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevInfoVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::AudioDevInfo *arg2 = (pj::AudioDevInfo *) 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::vector",2,"pj::AudioDevInfo *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("new_AudioDevInfoVector",2,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevInfoVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AudioDevInfoVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AudioDevInfoVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_AudioDevInfoVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__AudioDevInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AudioDevInfoVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AudioDevInfoVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::AudioDevInfo * >::vector()\n"
    "    std::vector< pj::AudioDevInfo * >::vector(unsigned int)\n"
    "    std::vector< pj::AudioDevInfo * >::vector(std::vector< pj::AudioDevInfo * > const &)\n"
    "    std::vector< pj::AudioDevInfo * >::vector(unsigned int,pj::AudioDevInfo *)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioDevInfoVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::size",1,"std::vector< pj::AudioDevInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_size",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::AudioDevInfo * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::max_size",1,"std::vector< pj::AudioDevInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::AudioDevInfo * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::empty",1,"std::vector< pj::AudioDevInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_empty",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (bool)((std::vector< pj::AudioDevInfo * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::clear",1,"std::vector< pj::AudioDevInfo * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_clear",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo *arg2 = (pj::AudioDevInfo *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::push_back",1,"std::vector< pj::AudioDevInfo * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::push_back",2,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfoVector_push_back",2,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::pop_back",1,"std::vector< pj::AudioDevInfo * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::front",1,"std::vector< pj::AudioDevInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_front",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (pj::AudioDevInfo *)((std::vector< pj::AudioDevInfo * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioDevInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::back",1,"std::vector< pj::AudioDevInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector_back",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  result = (pj::AudioDevInfo *)((std::vector< pj::AudioDevInfo * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioDevInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  unsigned int arg2 ;
  pj::AudioDevInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::__getitem__",1,"std::vector< pj::AudioDevInfo * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (pj::AudioDevInfo *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioDevInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfoVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  unsigned int arg2 ;
  pj::AudioDevInfo *arg3 = (pj::AudioDevInfo *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::AudioDevInfo * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::__setitem__",1,"std::vector< pj::AudioDevInfo * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< pj::AudioDevInfo * >::__setitem__",3,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0))){
    SWIG_fail_ptr("AudioDevInfoVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfoVector___setitem",3,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioDevInfoVector(void *obj) {
std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioDevInfoVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioDevInfoVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioDevInfoVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioDevInfoVector_methods[]= {
    { "size", _wrap_AudioDevInfoVector_size},
    { "max_size", _wrap_AudioDevInfoVector_max_size},
    { "empty", _wrap_AudioDevInfoVector_empty},
    { "clear", _wrap_AudioDevInfoVector_clear},
    { "push_back", _wrap_AudioDevInfoVector_push_back},
    { "pop_back", _wrap_AudioDevInfoVector_pop_back},
    { "front", _wrap_AudioDevInfoVector_front},
    { "back", _wrap_AudioDevInfoVector_back},
    { "__getitem", _wrap_AudioDevInfoVector___getitem},
    { "__setitem", _wrap_AudioDevInfoVector___setitem},
    {0,0}
};
static swig_lua_method swig_AudioDevInfoVector_meta[] = {
    { "__getitem", _wrap_AudioDevInfoVector___getitem},
    { "__setitem", _wrap_AudioDevInfoVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_AudioDevInfoVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioDevInfoVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioDevInfoVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioDevInfoVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioDevInfoVector_Sf_SwigStatic = {
    "AudioDevInfoVector",
    swig_AudioDevInfoVector_Sf_SwigStatic_methods,
    swig_AudioDevInfoVector_Sf_SwigStatic_attributes,
    swig_AudioDevInfoVector_Sf_SwigStatic_constants,
    swig_AudioDevInfoVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioDevInfoVector_bases[] = {0};
static const char *swig_AudioDevInfoVector_base_names[] = {0};
static swig_lua_class _wrap_class_AudioDevInfoVector = { "AudioDevInfoVector", "AudioDevInfoVector", &SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,_proxy__wrap_new_AudioDevInfoVector, swig_delete_AudioDevInfoVector, swig_AudioDevInfoVector_methods, swig_AudioDevInfoVector_attributes, &swig_AudioDevInfoVector_Sf_SwigStatic, swig_AudioDevInfoVector_meta, swig_AudioDevInfoVector_bases, swig_AudioDevInfoVector_base_names };

static int _wrap_new_CodecInfoVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::vector",0,0)
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CodecInfoVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CodecInfoVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::vector",1,"std::vector< pj::CodecInfo * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("new_CodecInfoVector",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >((std::vector< pj::CodecInfo * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CodecInfoVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::CodecInfo *arg2 = (pj::CodecInfo *) 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::vector",1,"unsigned int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::vector",2,"pj::CodecInfo *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("new_CodecInfoVector",2,SWIGTYPE_p_pj__CodecInfo);
  }
  
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CodecInfoVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CodecInfoVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CodecInfoVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CodecInfoVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__CodecInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CodecInfoVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CodecInfoVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::CodecInfo * >::vector()\n"
    "    std::vector< pj::CodecInfo * >::vector(unsigned int)\n"
    "    std::vector< pj::CodecInfo * >::vector(std::vector< pj::CodecInfo * > const &)\n"
    "    std::vector< pj::CodecInfo * >::vector(unsigned int,pj::CodecInfo *)\n");
  lua_error(L);return 0;
}


static int _wrap_CodecInfoVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::size",1,"std::vector< pj::CodecInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_size",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::CodecInfo * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::max_size",1,"std::vector< pj::CodecInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (unsigned int)((std::vector< pj::CodecInfo * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::empty",1,"std::vector< pj::CodecInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_empty",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (bool)((std::vector< pj::CodecInfo * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::clear",1,"std::vector< pj::CodecInfo * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_clear",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo *arg2 = (pj::CodecInfo *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::push_back",1,"std::vector< pj::CodecInfo * > *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::push_back",2,"pj::CodecInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfoVector_push_back",2,SWIGTYPE_p_pj__CodecInfo);
  }
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::pop_back",1,"std::vector< pj::CodecInfo * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::front",1,"std::vector< pj::CodecInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_front",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (pj::CodecInfo *)((std::vector< pj::CodecInfo * > const *)arg1)->front();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CodecInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::back",1,"std::vector< pj::CodecInfo * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector_back",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  result = (pj::CodecInfo *)((std::vector< pj::CodecInfo * > const *)arg1)->back();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CodecInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  unsigned int arg2 ;
  pj::CodecInfo *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::__getitem__",1,"std::vector< pj::CodecInfo * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (pj::CodecInfo *)std_vector_Sl_pj_CodecInfo_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CodecInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfoVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  unsigned int arg2 ;
  pj::CodecInfo *arg3 = (pj::CodecInfo *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CodecInfo * >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::__setitem__",1,"std::vector< pj::CodecInfo * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::__setitem__",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("std::vector< pj::CodecInfo * >::__setitem__",3,"pj::CodecInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0))){
    SWIG_fail_ptr("CodecInfoVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfoVector___setitem",3,SWIGTYPE_p_pj__CodecInfo);
  }
  
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CodecInfoVector(void *obj) {
std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) obj;
delete arg1;
}
static int _proxy__wrap_new_CodecInfoVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CodecInfoVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CodecInfoVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CodecInfoVector_methods[]= {
    { "size", _wrap_CodecInfoVector_size},
    { "max_size", _wrap_CodecInfoVector_max_size},
    { "empty", _wrap_CodecInfoVector_empty},
    { "clear", _wrap_CodecInfoVector_clear},
    { "push_back", _wrap_CodecInfoVector_push_back},
    { "pop_back", _wrap_CodecInfoVector_pop_back},
    { "front", _wrap_CodecInfoVector_front},
    { "back", _wrap_CodecInfoVector_back},
    { "__getitem", _wrap_CodecInfoVector___getitem},
    { "__setitem", _wrap_CodecInfoVector___setitem},
    {0,0}
};
static swig_lua_method swig_CodecInfoVector_meta[] = {
    { "__getitem", _wrap_CodecInfoVector___getitem},
    { "__setitem", _wrap_CodecInfoVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_CodecInfoVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CodecInfoVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CodecInfoVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CodecInfoVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CodecInfoVector_Sf_SwigStatic = {
    "CodecInfoVector",
    swig_CodecInfoVector_Sf_SwigStatic_methods,
    swig_CodecInfoVector_Sf_SwigStatic_attributes,
    swig_CodecInfoVector_Sf_SwigStatic_constants,
    swig_CodecInfoVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CodecInfoVector_bases[] = {0};
static const char *swig_CodecInfoVector_base_names[] = {0};
static swig_lua_class _wrap_class_CodecInfoVector = { "CodecInfoVector", "CodecInfoVector", &SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,_proxy__wrap_new_CodecInfoVector, swig_delete_CodecInfoVector, swig_CodecInfoVector_methods, swig_CodecInfoVector_attributes, &swig_CodecInfoVector_Sf_SwigStatic, swig_CodecInfoVector_meta, swig_CodecInfoVector_bases, swig_CodecInfoVector_base_names };

static int _wrap_MediaFormat_id_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::MediaFormat::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormat::id",1,"pj::MediaFormat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormat::id",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormat_id_set",1,SWIGTYPE_p_pj__MediaFormat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormat_id_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::MediaFormat::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormat::id",1,"pj::MediaFormat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormat_id_get",1,SWIGTYPE_p_pj__MediaFormat);
  }
  
  result = (pj_uint32_t) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormat_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type arg2 ;
  
  SWIG_check_num_args("pj::MediaFormat::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormat::type",1,"pj::MediaFormat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormat::type",2,"pjmedia_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormat_type_set",1,SWIGTYPE_p_pj__MediaFormat);
  }
  
  arg2 = (pjmedia_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormat_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type result;
  
  SWIG_check_num_args("pj::MediaFormat::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormat::type",1,"pj::MediaFormat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormat,0))){
    SWIG_fail_ptr("MediaFormat_type_get",1,SWIGTYPE_p_pj__MediaFormat);
  }
  
  result = (pjmedia_type) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormat(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormat *result = 0 ;
  
  SWIG_check_num_args("pj::MediaFormat::MediaFormat",0,0)
  result = (pj::MediaFormat *)new pj::MediaFormat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaFormat(void *obj) {
pj::MediaFormat *arg1 = (pj::MediaFormat *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaFormat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaFormat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaFormat_attributes[] = {
    { "id", _wrap_MediaFormat_id_get, _wrap_MediaFormat_id_set },
    { "type", _wrap_MediaFormat_type_get, _wrap_MediaFormat_type_set },
    {0,0,0}
};
static swig_lua_method swig_MediaFormat_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaFormat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaFormat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaFormat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaFormat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaFormat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaFormat_Sf_SwigStatic = {
    "MediaFormat",
    swig_MediaFormat_Sf_SwigStatic_methods,
    swig_MediaFormat_Sf_SwigStatic_attributes,
    swig_MediaFormat_Sf_SwigStatic_constants,
    swig_MediaFormat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaFormat_bases[] = {0};
static const char *swig_MediaFormat_base_names[] = {0};
static swig_lua_class _wrap_class_MediaFormat = { "MediaFormat", "MediaFormat", &SWIGTYPE_p_pj__MediaFormat,_proxy__wrap_new_MediaFormat, swig_delete_MediaFormat, swig_MediaFormat_methods, swig_MediaFormat_attributes, &swig_MediaFormat_Sf_SwigStatic, swig_MediaFormat_meta, swig_MediaFormat_bases, swig_MediaFormat_base_names };

static int _wrap_MediaFormatAudio_clockRate_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::clockRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::clockRate",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::clockRate",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_clockRate_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->clockRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_clockRate_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::clockRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::clockRate",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_clockRate_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (unsigned int) ((arg1)->clockRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_channelCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::channelCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::channelCount",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::channelCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_channelCount_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channelCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_channelCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::channelCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::channelCount",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_channelCount_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (unsigned int) ((arg1)->channelCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_frameTimeUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::frameTimeUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::frameTimeUsec",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::frameTimeUsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_frameTimeUsec_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->frameTimeUsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_frameTimeUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::frameTimeUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::frameTimeUsec",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_frameTimeUsec_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (unsigned int) ((arg1)->frameTimeUsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_bitsPerSample_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::bitsPerSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::bitsPerSample",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::bitsPerSample",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_bitsPerSample_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->bitsPerSample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_bitsPerSample_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::bitsPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::bitsPerSample",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_bitsPerSample_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (unsigned int) ((arg1)->bitsPerSample);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_avgBps_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::avgBps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::avgBps",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::avgBps",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_avgBps_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->avgBps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_avgBps_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::avgBps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::avgBps",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_avgBps_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (pj_uint32_t) ((arg1)->avgBps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_maxBps_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::maxBps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::maxBps",1,"pj::MediaFormatAudio *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatAudio::maxBps",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_maxBps_set",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxBps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatAudio_maxBps_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::MediaFormatAudio::maxBps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatAudio::maxBps",1,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("MediaFormatAudio_maxBps_get",1,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  result = (pj_uint32_t) ((arg1)->maxBps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatAudio(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatAudio *result = 0 ;
  
  SWIG_check_num_args("pj::MediaFormatAudio::MediaFormatAudio",0,0)
  result = (pj::MediaFormatAudio *)new pj::MediaFormatAudio();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormatAudio,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaFormatAudio(void *obj) {
pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaFormatAudio(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaFormatAudio);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaFormatAudio_attributes[] = {
    { "clockRate", _wrap_MediaFormatAudio_clockRate_get, _wrap_MediaFormatAudio_clockRate_set },
    { "channelCount", _wrap_MediaFormatAudio_channelCount_get, _wrap_MediaFormatAudio_channelCount_set },
    { "frameTimeUsec", _wrap_MediaFormatAudio_frameTimeUsec_get, _wrap_MediaFormatAudio_frameTimeUsec_set },
    { "bitsPerSample", _wrap_MediaFormatAudio_bitsPerSample_get, _wrap_MediaFormatAudio_bitsPerSample_set },
    { "avgBps", _wrap_MediaFormatAudio_avgBps_get, _wrap_MediaFormatAudio_avgBps_set },
    { "maxBps", _wrap_MediaFormatAudio_maxBps_get, _wrap_MediaFormatAudio_maxBps_set },
    {0,0,0}
};
static swig_lua_method swig_MediaFormatAudio_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaFormatAudio_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaFormatAudio_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaFormatAudio_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaFormatAudio_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaFormatAudio_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaFormatAudio_Sf_SwigStatic = {
    "MediaFormatAudio",
    swig_MediaFormatAudio_Sf_SwigStatic_methods,
    swig_MediaFormatAudio_Sf_SwigStatic_attributes,
    swig_MediaFormatAudio_Sf_SwigStatic_constants,
    swig_MediaFormatAudio_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaFormatAudio_bases[] = {0,0};
static const char *swig_MediaFormatAudio_base_names[] = {"pj::MediaFormat *",0};
static swig_lua_class _wrap_class_MediaFormatAudio = { "MediaFormatAudio", "MediaFormatAudio", &SWIGTYPE_p_pj__MediaFormatAudio,_proxy__wrap_new_MediaFormatAudio, swig_delete_MediaFormatAudio, swig_MediaFormatAudio_methods, swig_MediaFormatAudio_attributes, &swig_MediaFormatAudio_Sf_SwigStatic, swig_MediaFormatAudio_meta, swig_MediaFormatAudio_bases, swig_MediaFormatAudio_base_names };

static int _wrap_MediaFormatVideo_width_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::width",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::width",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::width",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_width_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->width = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_width_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::width",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::width",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_width_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (unsigned int) ((arg1)->width);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_height_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::height",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::height",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::height",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_height_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->height = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_height_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::height",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::height",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_height_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (unsigned int) ((arg1)->height);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_fpsNum_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::fpsNum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::fpsNum",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::fpsNum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_fpsNum_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fpsNum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_fpsNum_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::fpsNum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::fpsNum",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_fpsNum_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (int) ((arg1)->fpsNum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_fpsDenum_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::fpsDenum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::fpsDenum",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::fpsDenum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_fpsDenum_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fpsDenum = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_fpsDenum_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::fpsDenum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::fpsDenum",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_fpsDenum_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (int) ((arg1)->fpsDenum);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_avgBps_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::avgBps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::avgBps",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::avgBps",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_avgBps_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->avgBps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_avgBps_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::avgBps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::avgBps",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_avgBps_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (pj_uint32_t) ((arg1)->avgBps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_maxBps_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::maxBps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::maxBps",1,"pj::MediaFormatVideo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFormatVideo::maxBps",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_maxBps_set",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxBps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFormatVideo_maxBps_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::MediaFormatVideo::maxBps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFormatVideo::maxBps",1,"pj::MediaFormatVideo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFormatVideo,0))){
    SWIG_fail_ptr("MediaFormatVideo_maxBps_get",1,SWIGTYPE_p_pj__MediaFormatVideo);
  }
  
  result = (pj_uint32_t) ((arg1)->maxBps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFormatVideo(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFormatVideo *result = 0 ;
  
  SWIG_check_num_args("pj::MediaFormatVideo::MediaFormatVideo",0,0)
  result = (pj::MediaFormatVideo *)new pj::MediaFormatVideo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormatVideo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaFormatVideo(void *obj) {
pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaFormatVideo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaFormatVideo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaFormatVideo_attributes[] = {
    { "width", _wrap_MediaFormatVideo_width_get, _wrap_MediaFormatVideo_width_set },
    { "height", _wrap_MediaFormatVideo_height_get, _wrap_MediaFormatVideo_height_set },
    { "fpsNum", _wrap_MediaFormatVideo_fpsNum_get, _wrap_MediaFormatVideo_fpsNum_set },
    { "fpsDenum", _wrap_MediaFormatVideo_fpsDenum_get, _wrap_MediaFormatVideo_fpsDenum_set },
    { "avgBps", _wrap_MediaFormatVideo_avgBps_get, _wrap_MediaFormatVideo_avgBps_set },
    { "maxBps", _wrap_MediaFormatVideo_maxBps_get, _wrap_MediaFormatVideo_maxBps_set },
    {0,0,0}
};
static swig_lua_method swig_MediaFormatVideo_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaFormatVideo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaFormatVideo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaFormatVideo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaFormatVideo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaFormatVideo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaFormatVideo_Sf_SwigStatic = {
    "MediaFormatVideo",
    swig_MediaFormatVideo_Sf_SwigStatic_methods,
    swig_MediaFormatVideo_Sf_SwigStatic_attributes,
    swig_MediaFormatVideo_Sf_SwigStatic_constants,
    swig_MediaFormatVideo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaFormatVideo_bases[] = {0,0};
static const char *swig_MediaFormatVideo_base_names[] = {"pj::MediaFormat *",0};
static swig_lua_class _wrap_class_MediaFormatVideo = { "MediaFormatVideo", "MediaFormatVideo", &SWIGTYPE_p_pj__MediaFormatVideo,_proxy__wrap_new_MediaFormatVideo, swig_delete_MediaFormatVideo, swig_MediaFormatVideo_methods, swig_MediaFormatVideo_attributes, &swig_MediaFormatVideo_Sf_SwigStatic, swig_MediaFormatVideo_meta, swig_MediaFormatVideo_bases, swig_MediaFormatVideo_base_names };

static int _wrap_ConfPortInfo_portId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::portId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::portId",1,"pj::ConfPortInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ConfPortInfo::portId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_portId_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->portId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_portId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::ConfPortInfo::portId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::portId",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_portId_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (int) ((arg1)->portId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_name_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::name",1,"pj::ConfPortInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ConfPortInfo::name",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_name_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_name_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::name",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_name_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (pj::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_format_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *arg2 = (pj::MediaFormatAudio *) 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::format",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::format",1,"pj::ConfPortInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::ConfPortInfo::format",2,"pj::MediaFormatAudio *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_format_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("ConfPortInfo_format_set",2,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  if (arg1) (arg1)->format = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_format_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *result = 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::format",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::format",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_format_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (pj::MediaFormatAudio *)& ((arg1)->format);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFormatAudio,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_txLevelAdj_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::txLevelAdj",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::txLevelAdj",1,"pj::ConfPortInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ConfPortInfo::txLevelAdj",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_txLevelAdj_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->txLevelAdj = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_txLevelAdj_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("pj::ConfPortInfo::txLevelAdj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::txLevelAdj",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_txLevelAdj_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (float) ((arg1)->txLevelAdj);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_rxLevelAdj_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::rxLevelAdj",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::rxLevelAdj",1,"pj::ConfPortInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ConfPortInfo::rxLevelAdj",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_rxLevelAdj_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->rxLevelAdj = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_rxLevelAdj_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  SWIG_check_num_args("pj::ConfPortInfo::rxLevelAdj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::rxLevelAdj",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_rxLevelAdj_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (float) ((arg1)->rxLevelAdj);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_listeners_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::listeners",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::listeners",1,"pj::ConfPortInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::ConfPortInfo::listeners",2,"pj::IntVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_listeners_set",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_int_t,0))){
    SWIG_fail_ptr("ConfPortInfo_listeners_set",2,SWIGTYPE_p_std__vectorT_int_t);
  }
  
  if (arg1) (arg1)->listeners = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConfPortInfo_listeners_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::listeners",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ConfPortInfo::listeners",1,"pj::ConfPortInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ConfPortInfo,0))){
    SWIG_fail_ptr("ConfPortInfo_listeners_get",1,SWIGTYPE_p_pj__ConfPortInfo);
  }
  
  result = (pj::IntVector *)& ((arg1)->listeners);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_int_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ConfPortInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::ConfPortInfo *result = 0 ;
  
  SWIG_check_num_args("pj::ConfPortInfo::ConfPortInfo",0,0)
  result = (pj::ConfPortInfo *)new pj::ConfPortInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ConfPortInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConfPortInfo(void *obj) {
pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConfPortInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConfPortInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConfPortInfo_attributes[] = {
    { "portId", _wrap_ConfPortInfo_portId_get, _wrap_ConfPortInfo_portId_set },
    { "name", _wrap_ConfPortInfo_name_get, _wrap_ConfPortInfo_name_set },
    { "format", _wrap_ConfPortInfo_format_get, _wrap_ConfPortInfo_format_set },
    { "txLevelAdj", _wrap_ConfPortInfo_txLevelAdj_get, _wrap_ConfPortInfo_txLevelAdj_set },
    { "rxLevelAdj", _wrap_ConfPortInfo_rxLevelAdj_get, _wrap_ConfPortInfo_rxLevelAdj_set },
    { "listeners", _wrap_ConfPortInfo_listeners_get, _wrap_ConfPortInfo_listeners_set },
    {0,0,0}
};
static swig_lua_method swig_ConfPortInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_ConfPortInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConfPortInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConfPortInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConfPortInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ConfPortInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConfPortInfo_Sf_SwigStatic = {
    "ConfPortInfo",
    swig_ConfPortInfo_Sf_SwigStatic_methods,
    swig_ConfPortInfo_Sf_SwigStatic_attributes,
    swig_ConfPortInfo_Sf_SwigStatic_constants,
    swig_ConfPortInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConfPortInfo_bases[] = {0};
static const char *swig_ConfPortInfo_base_names[] = {0};
static swig_lua_class _wrap_class_ConfPortInfo = { "ConfPortInfo", "ConfPortInfo", &SWIGTYPE_p_pj__ConfPortInfo,_proxy__wrap_new_ConfPortInfo, swig_delete_ConfPortInfo, swig_ConfPortInfo_methods, swig_ConfPortInfo_attributes, &swig_ConfPortInfo_Sf_SwigStatic, swig_ConfPortInfo_meta, swig_ConfPortInfo_bases, swig_ConfPortInfo_base_names };

static int _wrap_Media_getType(lua_State* L) {
  int SWIG_arg = 0;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pjmedia_type result;
  
  SWIG_check_num_args("pj::Media::getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Media::getType",1,"pj::Media const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Media,0))){
    SWIG_fail_ptr("Media_getType",1,SWIGTYPE_p_pj__Media);
  }
  
  result = (pjmedia_type)((pj::Media const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Media(void *obj) {
pj::Media *arg1 = (pj::Media *) obj;
delete arg1;
}
static swig_lua_attribute swig_Media_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Media_methods[]= {
    { "getType", _wrap_Media_getType},
    {0,0}
};
static swig_lua_method swig_Media_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Media_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Media_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Media_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Media_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Media_Sf_SwigStatic = {
    "Media",
    swig_Media_Sf_SwigStatic_methods,
    swig_Media_Sf_SwigStatic_attributes,
    swig_Media_Sf_SwigStatic_constants,
    swig_Media_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Media_bases[] = {0};
static const char *swig_Media_base_names[] = {0};
static swig_lua_class _wrap_class_Media = { "Media", "Media", &SWIGTYPE_p_pj__Media,0, swig_delete_Media, swig_Media_methods, swig_Media_attributes, &swig_Media_Sf_SwigStatic, swig_Media_meta, swig_Media_bases, swig_Media_base_names };

static int _wrap_AudioMedia_getPortInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::ConfPortInfo result;
  
  SWIG_check_num_args("pj::AudioMedia::getPortInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::getPortInfo",1,"pj::AudioMedia const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_getPortInfo",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    result = ((pj::AudioMedia const *)arg1)->getPortInfo();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ConfPortInfo * resultptr = new pj::ConfPortInfo((const pj::ConfPortInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ConfPortInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_getPortId(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AudioMedia::getPortId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::getPortId",1,"pj::AudioMedia const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_getPortId",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  result = (int)((pj::AudioMedia const *)arg1)->getPortId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_getPortInfoFromId(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  pj::ConfPortInfo result;
  
  SWIG_check_num_args("pj::AudioMedia::getPortInfoFromId",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pj::AudioMedia::getPortInfoFromId",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  try {
    result = pj::AudioMedia::getPortInfoFromId(arg1);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ConfPortInfo * resultptr = new pj::ConfPortInfo((const pj::ConfPortInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__ConfPortInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_startTransmit(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AudioMedia::startTransmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::startTransmit",1,"pj::AudioMedia const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudioMedia::startTransmit",2,"pj::AudioMedia const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_startTransmit",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_startTransmit",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit((pj::AudioMedia const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_stopTransmit(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AudioMedia::stopTransmit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::stopTransmit",1,"pj::AudioMedia const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudioMedia::stopTransmit",2,"pj::AudioMedia const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_stopTransmit",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_stopTransmit",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    ((pj::AudioMedia const *)arg1)->stopTransmit((pj::AudioMedia const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_adjustRxLevel(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("pj::AudioMedia::adjustRxLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::adjustRxLevel",1,"pj::AudioMedia *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMedia::adjustRxLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_adjustRxLevel",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  try {
    (arg1)->adjustRxLevel(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_adjustTxLevel(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("pj::AudioMedia::adjustTxLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::adjustTxLevel",1,"pj::AudioMedia *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMedia::adjustTxLevel",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_adjustTxLevel",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  try {
    (arg1)->adjustTxLevel(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_getRxLevel(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioMedia::getRxLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::getRxLevel",1,"pj::AudioMedia const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_getRxLevel",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getRxLevel();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_getTxLevel(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioMedia::getTxLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::getTxLevel",1,"pj::AudioMedia const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMedia_getTxLevel",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getTxLevel();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMedia_typecastFromMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMedia::typecastFromMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMedia::typecastFromMedia",1,"pj::Media *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Media,0))){
    SWIG_fail_ptr("AudioMedia_typecastFromMedia",1,SWIGTYPE_p_pj__Media);
  }
  
  result = (pj::AudioMedia *)pj::AudioMedia::typecastFromMedia(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioMedia(void *obj) {
pj::AudioMedia *arg1 = (pj::AudioMedia *) obj;
delete arg1;
}
static swig_lua_attribute swig_AudioMedia_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioMedia_methods[]= {
    { "getPortInfo", _wrap_AudioMedia_getPortInfo},
    { "getPortId", _wrap_AudioMedia_getPortId},
    { "startTransmit", _wrap_AudioMedia_startTransmit},
    { "stopTransmit", _wrap_AudioMedia_stopTransmit},
    { "adjustRxLevel", _wrap_AudioMedia_adjustRxLevel},
    { "adjustTxLevel", _wrap_AudioMedia_adjustTxLevel},
    { "getRxLevel", _wrap_AudioMedia_getRxLevel},
    { "getTxLevel", _wrap_AudioMedia_getTxLevel},
    {0,0}
};
static swig_lua_method swig_AudioMedia_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioMedia_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioMedia_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioMedia_Sf_SwigStatic_methods[]= {
    { "getPortInfoFromId", _wrap_AudioMedia_getPortInfoFromId},
    { "typecastFromMedia", _wrap_AudioMedia_typecastFromMedia},
    {0,0}
};
static swig_lua_class* swig_AudioMedia_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioMedia_Sf_SwigStatic = {
    "AudioMedia",
    swig_AudioMedia_Sf_SwigStatic_methods,
    swig_AudioMedia_Sf_SwigStatic_attributes,
    swig_AudioMedia_Sf_SwigStatic_constants,
    swig_AudioMedia_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioMedia_bases[] = {0,0};
static const char *swig_AudioMedia_base_names[] = {"pj::Media *",0};
static swig_lua_class _wrap_class_AudioMedia = { "AudioMedia", "AudioMedia", &SWIGTYPE_p_pj__AudioMedia,0, swig_delete_AudioMedia, swig_AudioMedia_methods, swig_AudioMedia_attributes, &swig_AudioMedia_Sf_SwigStatic, swig_AudioMedia_meta, swig_AudioMedia_bases, swig_AudioMedia_base_names };

static int _wrap_AudioMediaPlayerInfo_formatId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::formatId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::formatId",1,"pj::AudioMediaPlayerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::formatId",2,"pjmedia_format_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_formatId_set",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  arg2 = (pjmedia_format_id)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->formatId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_formatId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id result;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::formatId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::formatId",1,"pj::AudioMediaPlayerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_formatId_get",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  result = (pjmedia_format_id) ((arg1)->formatId);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_payloadBitsPerSample_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::payloadBitsPerSample",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::payloadBitsPerSample",1,"pj::AudioMediaPlayerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::payloadBitsPerSample",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_payloadBitsPerSample_set",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->payloadBitsPerSample = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_payloadBitsPerSample_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::payloadBitsPerSample",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::payloadBitsPerSample",1,"pj::AudioMediaPlayerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_payloadBitsPerSample_get",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  result = (unsigned int) ((arg1)->payloadBitsPerSample);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_sizeBytes_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::sizeBytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeBytes",1,"pj::AudioMediaPlayerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeBytes",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_sizeBytes_set",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->sizeBytes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_sizeBytes_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::sizeBytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeBytes",1,"pj::AudioMediaPlayerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_sizeBytes_get",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  result = (pj_uint32_t) ((arg1)->sizeBytes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_sizeSamples_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::sizeSamples",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeSamples",1,"pj::AudioMediaPlayerInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeSamples",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_sizeSamples_set",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->sizeSamples = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayerInfo_sizeSamples_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::sizeSamples",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayerInfo::sizeSamples",1,"pj::AudioMediaPlayerInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayerInfo,0))){
    SWIG_fail_ptr("AudioMediaPlayerInfo_sizeSamples_get",1,SWIGTYPE_p_pj__AudioMediaPlayerInfo);
  }
  
  result = (pj_uint32_t) ((arg1)->sizeSamples);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioMediaPlayerInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayerInfo *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayerInfo::AudioMediaPlayerInfo",0,0)
  result = (pj::AudioMediaPlayerInfo *)new pj::AudioMediaPlayerInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMediaPlayerInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioMediaPlayerInfo(void *obj) {
pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioMediaPlayerInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioMediaPlayerInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioMediaPlayerInfo_attributes[] = {
    { "formatId", _wrap_AudioMediaPlayerInfo_formatId_get, _wrap_AudioMediaPlayerInfo_formatId_set },
    { "payloadBitsPerSample", _wrap_AudioMediaPlayerInfo_payloadBitsPerSample_get, _wrap_AudioMediaPlayerInfo_payloadBitsPerSample_set },
    { "sizeBytes", _wrap_AudioMediaPlayerInfo_sizeBytes_get, _wrap_AudioMediaPlayerInfo_sizeBytes_set },
    { "sizeSamples", _wrap_AudioMediaPlayerInfo_sizeSamples_get, _wrap_AudioMediaPlayerInfo_sizeSamples_set },
    {0,0,0}
};
static swig_lua_method swig_AudioMediaPlayerInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_AudioMediaPlayerInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioMediaPlayerInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioMediaPlayerInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioMediaPlayerInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioMediaPlayerInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioMediaPlayerInfo_Sf_SwigStatic = {
    "AudioMediaPlayerInfo",
    swig_AudioMediaPlayerInfo_Sf_SwigStatic_methods,
    swig_AudioMediaPlayerInfo_Sf_SwigStatic_attributes,
    swig_AudioMediaPlayerInfo_Sf_SwigStatic_constants,
    swig_AudioMediaPlayerInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioMediaPlayerInfo_bases[] = {0};
static const char *swig_AudioMediaPlayerInfo_base_names[] = {0};
static swig_lua_class _wrap_class_AudioMediaPlayerInfo = { "AudioMediaPlayerInfo", "AudioMediaPlayerInfo", &SWIGTYPE_p_pj__AudioMediaPlayerInfo,_proxy__wrap_new_AudioMediaPlayerInfo, swig_delete_AudioMediaPlayerInfo, swig_AudioMediaPlayerInfo_methods, swig_AudioMediaPlayerInfo_attributes, &swig_AudioMediaPlayerInfo_Sf_SwigStatic, swig_AudioMediaPlayerInfo_meta, swig_AudioMediaPlayerInfo_bases, swig_AudioMediaPlayerInfo_base_names };

static int _wrap_new_AudioMediaPlayer(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::AudioMediaPlayer",0,0)
  result = (pj::AudioMediaPlayer *)new pj::AudioMediaPlayer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMediaPlayer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlayer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::createPlayer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlayer",1,"pj::AudioMediaPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlayer",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlayer",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlayer",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    (arg1)->createPlayer((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlayer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::createPlayer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlayer",1,"pj::AudioMediaPlayer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlayer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlayer",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->createPlayer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlayer(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioMediaPlayer_createPlayer__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioMediaPlayer_createPlayer__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioMediaPlayer_createPlayer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudioMediaPlayer::createPlayer(pj::string const &,unsigned int)\n"
    "    pj::AudioMediaPlayer::createPlayer(pj::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioMediaPlayer_createPlaylist__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  unsigned int arg4 ;
  pj::string temp3 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::createPlaylist",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",1,"pj::AudioMediaPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",2,"pj::StringVector const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",3,"pj::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlaylist__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string temp3 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::createPlaylist",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",1,"pj::AudioMediaPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",2,"pj::StringVector const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",3,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlaylist__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::createPlaylist",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",1,"pj::AudioMediaPlayer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::createPlaylist",2,"pj::StringVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("AudioMediaPlayer_createPlaylist",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_createPlaylist(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AudioMediaPlayer_createPlaylist__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioMediaPlayer_createPlaylist__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaPlayer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_std__string_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_AudioMediaPlayer_createPlaylist__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioMediaPlayer_createPlaylist'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudioMediaPlayer::createPlaylist(pj::StringVector const &,pj::string const &,unsigned int)\n"
    "    pj::AudioMediaPlayer::createPlaylist(pj::StringVector const &,pj::string const &)\n"
    "    pj::AudioMediaPlayer::createPlaylist(pj::StringVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioMediaPlayer_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::AudioMediaPlayerInfo result;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::getInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::getInfo",1,"pj::AudioMediaPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_getInfo",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  try {
    result = ((pj::AudioMediaPlayer const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::AudioMediaPlayerInfo * resultptr = new pj::AudioMediaPlayerInfo((const pj::AudioMediaPlayerInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AudioMediaPlayerInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_getPos(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::getPos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::getPos",1,"pj::AudioMediaPlayer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_getPos",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  try {
    result = (pj_uint32_t)((pj::AudioMediaPlayer const *)arg1)->getPos();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_setPos(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::setPos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::setPos",1,"pj::AudioMediaPlayer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioMediaPlayer::setPos",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_setPos",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  try {
    (arg1)->setPos(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_typecastFromAudioMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaPlayer *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::typecastFromAudioMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::typecastFromAudioMedia",1,"pj::AudioMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMediaPlayer_typecastFromAudioMedia",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  result = (pj::AudioMediaPlayer *)pj::AudioMediaPlayer::typecastFromAudioMedia(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMediaPlayer,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaPlayer_onEof(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AudioMediaPlayer::onEof",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaPlayer::onEof",1,"pj::AudioMediaPlayer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaPlayer,0))){
    SWIG_fail_ptr("AudioMediaPlayer_onEof",1,SWIGTYPE_p_pj__AudioMediaPlayer);
  }
  
  result = (bool)(arg1)->onEof();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioMediaPlayer(void *obj) {
pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioMediaPlayer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioMediaPlayer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioMediaPlayer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioMediaPlayer_methods[]= {
    { "createPlayer", _wrap_AudioMediaPlayer_createPlayer},
    { "createPlaylist", _wrap_AudioMediaPlayer_createPlaylist},
    { "getInfo", _wrap_AudioMediaPlayer_getInfo},
    { "getPos", _wrap_AudioMediaPlayer_getPos},
    { "setPos", _wrap_AudioMediaPlayer_setPos},
    { "onEof", _wrap_AudioMediaPlayer_onEof},
    {0,0}
};
static swig_lua_method swig_AudioMediaPlayer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioMediaPlayer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioMediaPlayer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioMediaPlayer_Sf_SwigStatic_methods[]= {
    { "typecastFromAudioMedia", _wrap_AudioMediaPlayer_typecastFromAudioMedia},
    {0,0}
};
static swig_lua_class* swig_AudioMediaPlayer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioMediaPlayer_Sf_SwigStatic = {
    "AudioMediaPlayer",
    swig_AudioMediaPlayer_Sf_SwigStatic_methods,
    swig_AudioMediaPlayer_Sf_SwigStatic_attributes,
    swig_AudioMediaPlayer_Sf_SwigStatic_constants,
    swig_AudioMediaPlayer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioMediaPlayer_bases[] = {0,0};
static const char *swig_AudioMediaPlayer_base_names[] = {"pj::AudioMedia *",0};
static swig_lua_class _wrap_class_AudioMediaPlayer = { "AudioMediaPlayer", "AudioMediaPlayer", &SWIGTYPE_p_pj__AudioMediaPlayer,_proxy__wrap_new_AudioMediaPlayer, swig_delete_AudioMediaPlayer, swig_AudioMediaPlayer_methods, swig_AudioMediaPlayer_attributes, &swig_AudioMediaPlayer_Sf_SwigStatic, swig_AudioMediaPlayer_meta, swig_AudioMediaPlayer_bases, swig_AudioMediaPlayer_base_names };

static int _wrap_new_AudioMediaRecorder(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaRecorder *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::AudioMediaRecorder",0,0)
  result = (pj::AudioMediaRecorder *)new pj::AudioMediaRecorder();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMediaRecorder,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaRecorder_createRecorder__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj_ssize_t arg4 ;
  unsigned int arg5 ;
  pj::string temp2 ;
  pj_ssize_t *argp4 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::createRecorder",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",1,"pj::AudioMediaRecorder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",4,"pj_ssize_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaRecorder,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",1,SWIGTYPE_p_pj__AudioMediaRecorder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_pj_ssize_t,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",4,SWIGTYPE_p_pj_ssize_t);
  }
  arg4 = *argp4;
  
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4,arg5);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaRecorder_createRecorder__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj_ssize_t arg4 ;
  pj::string temp2 ;
  pj_ssize_t *argp4 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::createRecorder",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",1,"pj::AudioMediaRecorder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",3,"unsigned int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",4,"pj_ssize_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaRecorder,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",1,SWIGTYPE_p_pj__AudioMediaRecorder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_pj_ssize_t,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",4,SWIGTYPE_p_pj_ssize_t);
  }
  arg4 = *argp4;
  
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaRecorder_createRecorder__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::createRecorder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",1,"pj::AudioMediaRecorder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaRecorder,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",1,SWIGTYPE_p_pj__AudioMediaRecorder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaRecorder_createRecorder__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::createRecorder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",1,"pj::AudioMediaRecorder *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioMediaRecorder::createRecorder",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMediaRecorder,0))){
    SWIG_fail_ptr("AudioMediaRecorder_createRecorder",1,SWIGTYPE_p_pj__AudioMediaRecorder);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->createRecorder((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioMediaRecorder_createRecorder(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaRecorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudioMediaRecorder_createRecorder__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaRecorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudioMediaRecorder_createRecorder__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaRecorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_pj_ssize_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_AudioMediaRecorder_createRecorder__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudioMediaRecorder, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_pj_ssize_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_AudioMediaRecorder_createRecorder__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudioMediaRecorder_createRecorder'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudioMediaRecorder::createRecorder(pj::string const &,unsigned int,pj_ssize_t,unsigned int)\n"
    "    pj::AudioMediaRecorder::createRecorder(pj::string const &,unsigned int,pj_ssize_t)\n"
    "    pj::AudioMediaRecorder::createRecorder(pj::string const &,unsigned int)\n"
    "    pj::AudioMediaRecorder::createRecorder(pj::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AudioMediaRecorder_typecastFromAudioMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaRecorder *result = 0 ;
  
  SWIG_check_num_args("pj::AudioMediaRecorder::typecastFromAudioMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioMediaRecorder::typecastFromAudioMedia",1,"pj::AudioMedia *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("AudioMediaRecorder_typecastFromAudioMedia",1,SWIGTYPE_p_pj__AudioMedia);
  }
  
  result = (pj::AudioMediaRecorder *)pj::AudioMediaRecorder::typecastFromAudioMedia(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMediaRecorder,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioMediaRecorder(void *obj) {
pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioMediaRecorder(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioMediaRecorder);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioMediaRecorder_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudioMediaRecorder_methods[]= {
    { "createRecorder", _wrap_AudioMediaRecorder_createRecorder},
    {0,0}
};
static swig_lua_method swig_AudioMediaRecorder_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioMediaRecorder_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioMediaRecorder_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioMediaRecorder_Sf_SwigStatic_methods[]= {
    { "typecastFromAudioMedia", _wrap_AudioMediaRecorder_typecastFromAudioMedia},
    {0,0}
};
static swig_lua_class* swig_AudioMediaRecorder_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioMediaRecorder_Sf_SwigStatic = {
    "AudioMediaRecorder",
    swig_AudioMediaRecorder_Sf_SwigStatic_methods,
    swig_AudioMediaRecorder_Sf_SwigStatic_attributes,
    swig_AudioMediaRecorder_Sf_SwigStatic_constants,
    swig_AudioMediaRecorder_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioMediaRecorder_bases[] = {0,0};
static const char *swig_AudioMediaRecorder_base_names[] = {"pj::AudioMedia *",0};
static swig_lua_class _wrap_class_AudioMediaRecorder = { "AudioMediaRecorder", "AudioMediaRecorder", &SWIGTYPE_p_pj__AudioMediaRecorder,_proxy__wrap_new_AudioMediaRecorder, swig_delete_AudioMediaRecorder, swig_AudioMediaRecorder_methods, swig_AudioMediaRecorder_attributes, &swig_AudioMediaRecorder_Sf_SwigStatic, swig_AudioMediaRecorder_meta, swig_AudioMediaRecorder_bases, swig_AudioMediaRecorder_base_names };

static int _wrap_new_ToneDesc(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDesc *result = 0 ;
  
  SWIG_check_num_args("pj::ToneDesc::ToneDesc",0,0)
  result = (pj::ToneDesc *)new pj::ToneDesc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ToneDesc,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDesc(void *obj) {
pj::ToneDesc *arg1 = (pj::ToneDesc *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDesc(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDesc);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDesc_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneDesc_methods[]= {
    {0,0}
};
static swig_lua_method swig_ToneDesc_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ToneDesc_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDesc_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDesc_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDesc_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDesc_Sf_SwigStatic = {
    "ToneDesc",
    swig_ToneDesc_Sf_SwigStatic_methods,
    swig_ToneDesc_Sf_SwigStatic_attributes,
    swig_ToneDesc_Sf_SwigStatic_constants,
    swig_ToneDesc_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDesc_bases[] = {0,0};
static const char *swig_ToneDesc_base_names[] = {"pjmedia_tone_desc *",0};
static swig_lua_class _wrap_class_ToneDesc = { "ToneDesc", "ToneDesc", &SWIGTYPE_p_pj__ToneDesc,_proxy__wrap_new_ToneDesc, swig_delete_ToneDesc, swig_ToneDesc_methods, swig_ToneDesc_attributes, &swig_ToneDesc_Sf_SwigStatic, swig_ToneDesc_meta, swig_ToneDesc_bases, swig_ToneDesc_base_names };

static int _wrap_new_ToneDigit(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigit *result = 0 ;
  
  SWIG_check_num_args("pj::ToneDigit::ToneDigit",0,0)
  result = (pj::ToneDigit *)new pj::ToneDigit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ToneDigit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDigit(void *obj) {
pj::ToneDigit *arg1 = (pj::ToneDigit *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDigit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDigit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDigit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneDigit_methods[]= {
    {0,0}
};
static swig_lua_method swig_ToneDigit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ToneDigit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDigit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDigit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDigit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDigit_Sf_SwigStatic = {
    "ToneDigit",
    swig_ToneDigit_Sf_SwigStatic_methods,
    swig_ToneDigit_Sf_SwigStatic_attributes,
    swig_ToneDigit_Sf_SwigStatic_constants,
    swig_ToneDigit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDigit_bases[] = {0,0};
static const char *swig_ToneDigit_base_names[] = {"pjmedia_tone_digit *",0};
static swig_lua_class _wrap_class_ToneDigit = { "ToneDigit", "ToneDigit", &SWIGTYPE_p_pj__ToneDigit,_proxy__wrap_new_ToneDigit, swig_delete_ToneDigit, swig_ToneDigit_methods, swig_ToneDigit_attributes, &swig_ToneDigit_Sf_SwigStatic, swig_ToneDigit_meta, swig_ToneDigit_bases, swig_ToneDigit_base_names };

static int _wrap_ToneDigitMapDigit_digit_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::digit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::digit",1,"pj::ToneDigitMapDigit *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::ToneDigitMapDigit::digit",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_digit_set",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->digit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapDigit_digit_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::digit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::digit",1,"pj::ToneDigitMapDigit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_digit_get",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  result = (pj::string *) & ((arg1)->digit);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapDigit_freq1_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::freq1",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq1",1,"pj::ToneDigitMapDigit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq1",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_freq1_set",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq1 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapDigit_freq1_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::freq1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq1",1,"pj::ToneDigitMapDigit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_freq1_get",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  result = (int) ((arg1)->freq1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapDigit_freq2_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::freq2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq2",1,"pj::ToneDigitMapDigit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq2",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_freq2_set",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->freq2 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneDigitMapDigit_freq2_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::freq2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneDigitMapDigit::freq2",1,"pj::ToneDigitMapDigit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneDigitMapDigit,0))){
    SWIG_fail_ptr("ToneDigitMapDigit_freq2_get",1,SWIGTYPE_p_pj__ToneDigitMapDigit);
  }
  
  result = (int) ((arg1)->freq2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ToneDigitMapDigit(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneDigitMapDigit *result = 0 ;
  
  SWIG_check_num_args("pj::ToneDigitMapDigit::ToneDigitMapDigit",0,0)
  result = (pj::ToneDigitMapDigit *)new pj::ToneDigitMapDigit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ToneDigitMapDigit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneDigitMapDigit(void *obj) {
pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneDigitMapDigit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneDigitMapDigit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneDigitMapDigit_attributes[] = {
    { "digit", _wrap_ToneDigitMapDigit_digit_get, _wrap_ToneDigitMapDigit_digit_set },
    { "freq1", _wrap_ToneDigitMapDigit_freq1_get, _wrap_ToneDigitMapDigit_freq1_set },
    { "freq2", _wrap_ToneDigitMapDigit_freq2_get, _wrap_ToneDigitMapDigit_freq2_set },
    {0,0,0}
};
static swig_lua_method swig_ToneDigitMapDigit_methods[]= {
    {0,0}
};
static swig_lua_method swig_ToneDigitMapDigit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ToneDigitMapDigit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneDigitMapDigit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneDigitMapDigit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneDigitMapDigit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneDigitMapDigit_Sf_SwigStatic = {
    "ToneDigitMapDigit",
    swig_ToneDigitMapDigit_Sf_SwigStatic_methods,
    swig_ToneDigitMapDigit_Sf_SwigStatic_attributes,
    swig_ToneDigitMapDigit_Sf_SwigStatic_constants,
    swig_ToneDigitMapDigit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneDigitMapDigit_bases[] = {0};
static const char *swig_ToneDigitMapDigit_base_names[] = {0};
static swig_lua_class _wrap_class_ToneDigitMapDigit = { "ToneDigitMapDigit", "ToneDigitMapDigit", &SWIGTYPE_p_pj__ToneDigitMapDigit,_proxy__wrap_new_ToneDigitMapDigit, swig_delete_ToneDigitMapDigit, swig_ToneDigitMapDigit_methods, swig_ToneDigitMapDigit_attributes, &swig_ToneDigitMapDigit_Sf_SwigStatic, swig_ToneDigitMapDigit_meta, swig_ToneDigitMapDigit_bases, swig_ToneDigitMapDigit_base_names };

static int _wrap_new_ToneGenerator(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *result = 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::ToneGenerator",0,0)
  result = (pj::ToneGenerator *)new pj::ToneGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ToneGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_createToneGenerator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("pj::ToneGenerator::createToneGenerator",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",1,"pj::ToneGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_createToneGenerator",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    (arg1)->createToneGenerator(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_createToneGenerator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::ToneGenerator::createToneGenerator",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",1,"pj::ToneGenerator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_createToneGenerator",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->createToneGenerator(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_createToneGenerator__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::createToneGenerator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::createToneGenerator",1,"pj::ToneGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_createToneGenerator",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  try {
    (arg1)->createToneGenerator();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_createToneGenerator(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ToneGenerator_createToneGenerator__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ToneGenerator_createToneGenerator__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ToneGenerator_createToneGenerator__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ToneGenerator_createToneGenerator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ToneGenerator::createToneGenerator(unsigned int,unsigned int)\n"
    "    pj::ToneGenerator::createToneGenerator(unsigned int)\n"
    "    pj::ToneGenerator::createToneGenerator()\n");
  lua_error(L);return 0;
}


static int _wrap_ToneGenerator_isBusy(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::ToneGenerator::isBusy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::isBusy",1,"pj::ToneGenerator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_isBusy",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  result = (bool)((pj::ToneGenerator const *)arg1)->isBusy();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_stop(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::stop",1,"pj::ToneGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_stop",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  try {
    (arg1)->stop();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_rewind(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::rewind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::rewind",1,"pj::ToneGenerator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_rewind",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  try {
    (arg1)->rewind();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_play__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::ToneGenerator::play",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::play",1,"pj::ToneGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ToneGenerator::play",2,"pj::ToneDescVector const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::ToneGenerator::play",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_play",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneGenerator_play",2,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_play__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::play",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::play",1,"pj::ToneGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ToneGenerator::play",2,"pj::ToneDescVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_play",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t,0))){
    SWIG_fail_ptr("ToneGenerator_play",2,SWIGTYPE_p_std__vectorT_pj__ToneDesc_t);
  }
  
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_play(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDesc_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ToneGenerator_play__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDesc_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ToneGenerator_play__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ToneGenerator_play'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ToneGenerator::play(pj::ToneDescVector const &,bool)\n"
    "    pj::ToneGenerator::play(pj::ToneDescVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ToneGenerator_playDigits__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::ToneGenerator::playDigits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::playDigits",1,"pj::ToneGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ToneGenerator::playDigits",2,"pj::ToneDigitVector const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::ToneGenerator::playDigits",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_playDigits",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneGenerator_playDigits",2,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_playDigits__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::playDigits",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::playDigits",1,"pj::ToneGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ToneGenerator::playDigits",2,"pj::ToneDigitVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_playDigits",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t,0))){
    SWIG_fail_ptr("ToneGenerator_playDigits",2,SWIGTYPE_p_std__vectorT_pj__ToneDigit_t);
  }
  
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_playDigits(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDigit_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ToneGenerator_playDigits__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__ToneGenerator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__ToneDigit_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_ToneGenerator_playDigits__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ToneGenerator_playDigits'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::ToneGenerator::playDigits(pj::ToneDigitVector const &,bool)\n"
    "    pj::ToneGenerator::playDigits(pj::ToneDigitVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ToneGenerator_getDigitMap(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector result;
  
  SWIG_check_num_args("pj::ToneGenerator::getDigitMap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::getDigitMap",1,"pj::ToneGenerator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_getDigitMap",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  try {
    result = ((pj::ToneGenerator const *)arg1)->getDigitMap();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::ToneDigitMapVector * resultptr = new pj::ToneDigitMapVector((const pj::ToneDigitMapVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToneGenerator_setDigitMap(lua_State* L) {
  int SWIG_arg = 0;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector *arg2 = 0 ;
  
  SWIG_check_num_args("pj::ToneGenerator::setDigitMap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::ToneGenerator::setDigitMap",1,"pj::ToneGenerator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::ToneGenerator::setDigitMap",2,"pj::ToneDigitMapVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__ToneGenerator,0))){
    SWIG_fail_ptr("ToneGenerator_setDigitMap",1,SWIGTYPE_p_pj__ToneGenerator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t,0))){
    SWIG_fail_ptr("ToneGenerator_setDigitMap",2,SWIGTYPE_p_std__vectorT_pj__ToneDigitMapDigit_t);
  }
  
  try {
    (arg1)->setDigitMap((pj::ToneDigitMapVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ToneGenerator(void *obj) {
pj::ToneGenerator *arg1 = (pj::ToneGenerator *) obj;
delete arg1;
}
static int _proxy__wrap_new_ToneGenerator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ToneGenerator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ToneGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ToneGenerator_methods[]= {
    { "createToneGenerator", _wrap_ToneGenerator_createToneGenerator},
    { "isBusy", _wrap_ToneGenerator_isBusy},
    { "stop", _wrap_ToneGenerator_stop},
    { "rewind", _wrap_ToneGenerator_rewind},
    { "play", _wrap_ToneGenerator_play},
    { "playDigits", _wrap_ToneGenerator_playDigits},
    { "getDigitMap", _wrap_ToneGenerator_getDigitMap},
    { "setDigitMap", _wrap_ToneGenerator_setDigitMap},
    {0,0}
};
static swig_lua_method swig_ToneGenerator_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ToneGenerator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ToneGenerator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ToneGenerator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ToneGenerator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ToneGenerator_Sf_SwigStatic = {
    "ToneGenerator",
    swig_ToneGenerator_Sf_SwigStatic_methods,
    swig_ToneGenerator_Sf_SwigStatic_attributes,
    swig_ToneGenerator_Sf_SwigStatic_constants,
    swig_ToneGenerator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ToneGenerator_bases[] = {0,0};
static const char *swig_ToneGenerator_base_names[] = {"pj::AudioMedia *",0};
static swig_lua_class _wrap_class_ToneGenerator = { "ToneGenerator", "ToneGenerator", &SWIGTYPE_p_pj__ToneGenerator,_proxy__wrap_new_ToneGenerator, swig_delete_ToneGenerator, swig_ToneGenerator_methods, swig_ToneGenerator_attributes, &swig_ToneGenerator_Sf_SwigStatic, swig_ToneGenerator_meta, swig_ToneGenerator_bases, swig_ToneGenerator_base_names };

static int _wrap_AudioDevInfo_name_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::name",1,"pj::AudioDevInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioDevInfo::name",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_name_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_name_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::name",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_name_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (pj::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_inputCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::inputCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::inputCount",1,"pj::AudioDevInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioDevInfo::inputCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_inputCount_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->inputCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_inputCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioDevInfo::inputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::inputCount",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_inputCount_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (unsigned int) ((arg1)->inputCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_outputCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::outputCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::outputCount",1,"pj::AudioDevInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioDevInfo::outputCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_outputCount_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->outputCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_outputCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioDevInfo::outputCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::outputCount",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_outputCount_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (unsigned int) ((arg1)->outputCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_defaultSamplesPerSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::defaultSamplesPerSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::defaultSamplesPerSec",1,"pj::AudioDevInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioDevInfo::defaultSamplesPerSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_defaultSamplesPerSec_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->defaultSamplesPerSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_defaultSamplesPerSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioDevInfo::defaultSamplesPerSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::defaultSamplesPerSec",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_defaultSamplesPerSec_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (unsigned int) ((arg1)->defaultSamplesPerSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_driver_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::driver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::driver",1,"pj::AudioDevInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudioDevInfo::driver",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_driver_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->driver = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_driver_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::driver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::driver",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_driver_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (pj::string *) & ((arg1)->driver);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_caps_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::caps",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::caps",1,"pj::AudioDevInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioDevInfo::caps",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_caps_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->caps = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_caps_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioDevInfo::caps",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::caps",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_caps_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (unsigned int) ((arg1)->caps);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_routes_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::routes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::routes",1,"pj::AudioDevInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudioDevInfo::routes",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_routes_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->routes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_routes_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudioDevInfo::routes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::routes",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_routes_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (unsigned int) ((arg1)->routes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_extFmt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatVector *arg2 = (pj::MediaFormatVector *) 0 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::extFmt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::extFmt",1,"pj::AudioDevInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AudioDevInfo::extFmt",2,"pj::MediaFormatVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_extFmt_set",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0))){
    SWIG_fail_ptr("AudioDevInfo_extFmt_set",2,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t);
  }
  
  if (arg1) (arg1)->extFmt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudioDevInfo_extFmt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatVector *result = 0 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::extFmt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudioDevInfo::extFmt",1,"pj::AudioDevInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudioDevInfo,0))){
    SWIG_fail_ptr("AudioDevInfo_extFmt_get",1,SWIGTYPE_p_pj__AudioDevInfo);
  }
  
  result = (pj::MediaFormatVector *)& ((arg1)->extFmt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__MediaFormat_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AudioDevInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudioDevInfo *result = 0 ;
  
  SWIG_check_num_args("pj::AudioDevInfo::AudioDevInfo",0,0)
  result = (pj::AudioDevInfo *)new pj::AudioDevInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioDevInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AudioDevInfo(void *obj) {
pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_AudioDevInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AudioDevInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AudioDevInfo_attributes[] = {
    { "name", _wrap_AudioDevInfo_name_get, _wrap_AudioDevInfo_name_set },
    { "inputCount", _wrap_AudioDevInfo_inputCount_get, _wrap_AudioDevInfo_inputCount_set },
    { "outputCount", _wrap_AudioDevInfo_outputCount_get, _wrap_AudioDevInfo_outputCount_set },
    { "defaultSamplesPerSec", _wrap_AudioDevInfo_defaultSamplesPerSec_get, _wrap_AudioDevInfo_defaultSamplesPerSec_set },
    { "driver", _wrap_AudioDevInfo_driver_get, _wrap_AudioDevInfo_driver_set },
    { "caps", _wrap_AudioDevInfo_caps_get, _wrap_AudioDevInfo_caps_set },
    { "routes", _wrap_AudioDevInfo_routes_get, _wrap_AudioDevInfo_routes_set },
    { "extFmt", _wrap_AudioDevInfo_extFmt_get, _wrap_AudioDevInfo_extFmt_set },
    {0,0,0}
};
static swig_lua_method swig_AudioDevInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_AudioDevInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudioDevInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudioDevInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudioDevInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudioDevInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudioDevInfo_Sf_SwigStatic = {
    "AudioDevInfo",
    swig_AudioDevInfo_Sf_SwigStatic_methods,
    swig_AudioDevInfo_Sf_SwigStatic_attributes,
    swig_AudioDevInfo_Sf_SwigStatic_constants,
    swig_AudioDevInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudioDevInfo_bases[] = {0};
static const char *swig_AudioDevInfo_base_names[] = {0};
static swig_lua_class _wrap_class_AudioDevInfo = { "AudioDevInfo", "AudioDevInfo", &SWIGTYPE_p_pj__AudioDevInfo,_proxy__wrap_new_AudioDevInfo, swig_delete_AudioDevInfo, swig_AudioDevInfo_methods, swig_AudioDevInfo_attributes, &swig_AudioDevInfo_Sf_SwigStatic, swig_AudioDevInfo_meta, swig_AudioDevInfo_bases, swig_AudioDevInfo_base_names };

static int _wrap_AudDevManager_getCaptureDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AudDevManager::getCaptureDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getCaptureDev",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getCaptureDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getCaptureDev();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getCaptureDevMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::getCaptureDevMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getCaptureDevMedia",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getCaptureDevMedia",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (pj::AudioMedia *) &(arg1)->getCaptureDevMedia();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getPlaybackDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AudDevManager::getPlaybackDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getPlaybackDev",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getPlaybackDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getPlaybackDev();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getPlaybackDevMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::getPlaybackDevMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getPlaybackDevMedia",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getPlaybackDevMedia",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (pj::AudioMedia *) &(arg1)->getPlaybackDevMedia();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudioMedia,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setCaptureDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setCaptureDev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setCaptureDev",1,"pj::AudDevManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setCaptureDev",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setCaptureDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    ((pj::AudDevManager const *)arg1)->setCaptureDev(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setPlaybackDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setPlaybackDev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setPlaybackDev",1,"pj::AudDevManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setPlaybackDev",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setPlaybackDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    ((pj::AudDevManager const *)arg1)->setPlaybackDev(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_enumDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioDevInfoVector *result = 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::enumDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::enumDev",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_enumDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (pj::AudioDevInfoVector *) &(arg1)->enumDev();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioDevInfo_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setNullDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::setNullDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setNullDev",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setNullDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    (arg1)->setNullDev();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setNoDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaPort *result = 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::setNoDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setNoDev",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setNoDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  result = (pj::MediaPort *)(arg1)->setNoDev();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setEcOptions(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setEcOptions",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setEcOptions",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setEcOptions",2,"unsigned int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::AudDevManager::setEcOptions",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setEcOptions",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  try {
    (arg1)->setEcOptions(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getEcTail(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getEcTail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getEcTail",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getEcTail",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getEcTail();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_sndIsActive(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AudDevManager::sndIsActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::sndIsActive",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_sndIsActive",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  result = (bool)((pj::AudDevManager const *)arg1)->sndIsActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_refreshDevs(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::refreshDevs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::refreshDevs",1,"pj::AudDevManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_refreshDevs",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    (arg1)->refreshDevs();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getDevCount(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getDevCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getDevCount",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getDevCount",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  result = (unsigned int)((pj::AudDevManager const *)arg1)->getDevCount();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getDevInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  pj::AudioDevInfo result;
  
  SWIG_check_num_args("pj::AudDevManager::getDevInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getDevInfo",1,"pj::AudDevManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::getDevInfo",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getDevInfo",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  try {
    result = ((pj::AudDevManager const *)arg1)->getDevInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::AudioDevInfo * resultptr = new pj::AudioDevInfo((const pj::AudioDevInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AudioDevInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_lookupDev(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string temp2 ;
  pj::string temp3 ;
  int result;
  
  SWIG_check_num_args("pj::AudDevManager::lookupDev",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::lookupDev",1,"pj::AudDevManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AudDevManager::lookupDev",2,"pj::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::AudDevManager::lookupDev",3,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_lookupDev",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  try {
    result = (int)((pj::AudDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_capName(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_cap arg2 ;
  pj::string result;
  
  SWIG_check_num_args("pj::AudDevManager::capName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::capName",1,"pj::AudDevManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::capName",2,"pjmedia_aud_dev_cap");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_capName",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (pjmedia_aud_dev_cap)(int)lua_tonumber(L, 2);
  result = ((pj::AudDevManager const *)arg1)->capName(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setExtFormat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setExtFormat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setExtFormat",1,"pj::AudDevManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudDevManager::setExtFormat",2,"pj::MediaFormatAudio const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setExtFormat",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setExtFormat",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("AudDevManager_setExtFormat",2,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setExtFormat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AudDevManager::setExtFormat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setExtFormat",1,"pj::AudDevManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AudDevManager::setExtFormat",2,"pj::MediaFormatAudio const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setExtFormat",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaFormatAudio,0))){
    SWIG_fail_ptr("AudDevManager_setExtFormat",2,SWIGTYPE_p_pj__MediaFormatAudio);
  }
  
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setExtFormat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__MediaFormatAudio, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AudDevManager_setExtFormat__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__MediaFormatAudio, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setExtFormat__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setExtFormat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setExtFormat(pj::MediaFormatAudio const &,bool)\n"
    "    pj::AudDevManager::setExtFormat(pj::MediaFormatAudio const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getExtFormat(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio result;
  
  SWIG_check_num_args("pj::AudDevManager::getExtFormat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getExtFormat",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getExtFormat",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = ((pj::AudDevManager const *)arg1)->getExtFormat();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::MediaFormatAudio * resultptr = new pj::MediaFormatAudio((const pj::MediaFormatAudio &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__MediaFormatAudio,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputLatency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputLatency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputLatency",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputLatency",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setInputLatency",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setInputLatency(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputLatency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputLatency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputLatency",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputLatency",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->setInputLatency(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputLatency(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setInputLatency__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setInputLatency__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setInputLatency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setInputLatency(unsigned int,bool)\n"
    "    pj::AudDevManager::setInputLatency(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getInputLatency(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getInputLatency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getInputLatency",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getInputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputLatency();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputLatency__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputLatency",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputLatency",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputLatency",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setOutputLatency",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setOutputLatency(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputLatency__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputLatency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputLatency",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputLatency",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->setOutputLatency(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputLatency(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setOutputLatency__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setOutputLatency__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setOutputLatency'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setOutputLatency(unsigned int,bool)\n"
    "    pj::AudDevManager::setOutputLatency(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getOutputLatency(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getOutputLatency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getOutputLatency",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getOutputLatency",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputLatency();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputVolume",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputVolume",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setInputVolume",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setInputVolume(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputVolume",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputVolume",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->setInputVolume(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputVolume(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setInputVolume__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setInputVolume__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setInputVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setInputVolume(unsigned int,bool)\n"
    "    pj::AudDevManager::setInputVolume(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getInputVolume(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getInputVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getInputVolume",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getInputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputVolume();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputVolume__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputVolume",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputVolume",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputVolume",2,"unsigned int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setOutputVolume",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setOutputVolume(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputVolume__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputVolume",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputVolume",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->setOutputVolume(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputVolume(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setOutputVolume__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setOutputVolume__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setOutputVolume'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setOutputVolume(unsigned int,bool)\n"
    "    pj::AudDevManager::setOutputVolume(unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getOutputVolume(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getOutputVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getOutputVolume",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getOutputVolume",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputVolume();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getInputSignal(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getInputSignal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getInputSignal",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getInputSignal",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputSignal();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_getOutputSignal(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AudDevManager::getOutputSignal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getOutputSignal",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getOutputSignal",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputSignal();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputRoute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputRoute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputRoute",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputRoute",2,"pjmedia_aud_dev_route");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setInputRoute",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (pjmedia_aud_dev_route)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setInputRoute(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputRoute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setInputRoute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setInputRoute",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setInputRoute",2,"pjmedia_aud_dev_route");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setInputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (pjmedia_aud_dev_route)(int)lua_tonumber(L, 2);
  try {
    (arg1)->setInputRoute(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setInputRoute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setInputRoute__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setInputRoute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setInputRoute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setInputRoute(pjmedia_aud_dev_route,bool)\n"
    "    pj::AudDevManager::setInputRoute(pjmedia_aud_dev_route)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getInputRoute(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  SWIG_check_num_args("pj::AudDevManager::getInputRoute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getInputRoute",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getInputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getInputRoute();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputRoute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputRoute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputRoute",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputRoute",2,"pjmedia_aud_dev_route");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setOutputRoute",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (pjmedia_aud_dev_route)(int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setOutputRoute(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputRoute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setOutputRoute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setOutputRoute",1,"pj::AudDevManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AudDevManager::setOutputRoute",2,"pjmedia_aud_dev_route");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setOutputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (pjmedia_aud_dev_route)(int)lua_tonumber(L, 2);
  try {
    (arg1)->setOutputRoute(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setOutputRoute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setOutputRoute__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setOutputRoute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setOutputRoute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setOutputRoute(pjmedia_aud_dev_route,bool)\n"
    "    pj::AudDevManager::setOutputRoute(pjmedia_aud_dev_route)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getOutputRoute(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  SWIG_check_num_args("pj::AudDevManager::getOutputRoute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getOutputRoute",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getOutputRoute",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getOutputRoute();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setVad__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setVad",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setVad",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setVad",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setVad",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setVad",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setVad(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setVad__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setVad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setVad",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setVad",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setVad",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  try {
    (arg1)->setVad(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setVad(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setVad__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setVad__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setVad'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setVad(bool,bool)\n"
    "    pj::AudDevManager::setVad(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getVad(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AudDevManager::getVad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getVad",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getVad",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getVad();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setCng__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setCng",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setCng",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setCng",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setCng",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setCng",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setCng(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setCng__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setCng",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setCng",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setCng",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setCng",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  try {
    (arg1)->setCng(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setCng(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setCng__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setCng__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setCng'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setCng(bool,bool)\n"
    "    pj::AudDevManager::setCng(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getCng(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AudDevManager::getCng",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getCng",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getCng",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getCng();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setPlc__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::AudDevManager::setPlc",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setPlc",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setPlc",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::AudDevManager::setPlc",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setPlc",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->setPlc(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setPlc__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AudDevManager::setPlc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::setPlc",1,"pj::AudDevManager *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AudDevManager::setPlc",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_setPlc",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  try {
    (arg1)->setPlc(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AudDevManager_setPlc(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AudDevManager_setPlc__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__AudDevManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_AudDevManager_setPlc__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AudDevManager_setPlc'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::AudDevManager::setPlc(bool,bool)\n"
    "    pj::AudDevManager::setPlc(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_AudDevManager_getPlc(lua_State* L) {
  int SWIG_arg = 0;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AudDevManager::getPlc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AudDevManager::getPlc",1,"pj::AudDevManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AudDevManager,0))){
    SWIG_fail_ptr("AudDevManager_getPlc",1,SWIGTYPE_p_pj__AudDevManager);
  }
  
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getPlc();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_attribute swig_AudDevManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AudDevManager_methods[]= {
    { "getCaptureDev", _wrap_AudDevManager_getCaptureDev},
    { "getCaptureDevMedia", _wrap_AudDevManager_getCaptureDevMedia},
    { "getPlaybackDev", _wrap_AudDevManager_getPlaybackDev},
    { "getPlaybackDevMedia", _wrap_AudDevManager_getPlaybackDevMedia},
    { "setCaptureDev", _wrap_AudDevManager_setCaptureDev},
    { "setPlaybackDev", _wrap_AudDevManager_setPlaybackDev},
    { "enumDev", _wrap_AudDevManager_enumDev},
    { "setNullDev", _wrap_AudDevManager_setNullDev},
    { "setNoDev", _wrap_AudDevManager_setNoDev},
    { "setEcOptions", _wrap_AudDevManager_setEcOptions},
    { "getEcTail", _wrap_AudDevManager_getEcTail},
    { "sndIsActive", _wrap_AudDevManager_sndIsActive},
    { "refreshDevs", _wrap_AudDevManager_refreshDevs},
    { "getDevCount", _wrap_AudDevManager_getDevCount},
    { "getDevInfo", _wrap_AudDevManager_getDevInfo},
    { "lookupDev", _wrap_AudDevManager_lookupDev},
    { "capName", _wrap_AudDevManager_capName},
    { "setExtFormat", _wrap_AudDevManager_setExtFormat},
    { "getExtFormat", _wrap_AudDevManager_getExtFormat},
    { "setInputLatency", _wrap_AudDevManager_setInputLatency},
    { "getInputLatency", _wrap_AudDevManager_getInputLatency},
    { "setOutputLatency", _wrap_AudDevManager_setOutputLatency},
    { "getOutputLatency", _wrap_AudDevManager_getOutputLatency},
    { "setInputVolume", _wrap_AudDevManager_setInputVolume},
    { "getInputVolume", _wrap_AudDevManager_getInputVolume},
    { "setOutputVolume", _wrap_AudDevManager_setOutputVolume},
    { "getOutputVolume", _wrap_AudDevManager_getOutputVolume},
    { "getInputSignal", _wrap_AudDevManager_getInputSignal},
    { "getOutputSignal", _wrap_AudDevManager_getOutputSignal},
    { "setInputRoute", _wrap_AudDevManager_setInputRoute},
    { "getInputRoute", _wrap_AudDevManager_getInputRoute},
    { "setOutputRoute", _wrap_AudDevManager_setOutputRoute},
    { "getOutputRoute", _wrap_AudDevManager_getOutputRoute},
    { "setVad", _wrap_AudDevManager_setVad},
    { "getVad", _wrap_AudDevManager_getVad},
    { "setCng", _wrap_AudDevManager_setCng},
    { "getCng", _wrap_AudDevManager_getCng},
    { "setPlc", _wrap_AudDevManager_setPlc},
    { "getPlc", _wrap_AudDevManager_getPlc},
    {0,0}
};
static swig_lua_method swig_AudDevManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AudDevManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AudDevManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AudDevManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AudDevManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AudDevManager_Sf_SwigStatic = {
    "AudDevManager",
    swig_AudDevManager_Sf_SwigStatic_methods,
    swig_AudDevManager_Sf_SwigStatic_attributes,
    swig_AudDevManager_Sf_SwigStatic_constants,
    swig_AudDevManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AudDevManager_bases[] = {0};
static const char *swig_AudDevManager_base_names[] = {0};
static swig_lua_class _wrap_class_AudDevManager = { "AudDevManager", "AudDevManager", &SWIGTYPE_p_pj__AudDevManager,0,0, swig_AudDevManager_methods, swig_AudDevManager_attributes, &swig_AudDevManager_Sf_SwigStatic, swig_AudDevManager_meta, swig_AudDevManager_bases, swig_AudDevManager_base_names };

static int _wrap_CodecInfo_codecId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CodecInfo::codecId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::codecId",1,"pj::CodecInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CodecInfo::codecId",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_codecId_set",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->codecId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfo_codecId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CodecInfo::codecId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::codecId",1,"pj::CodecInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_codecId_get",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  result = (pj::string *) & ((arg1)->codecId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfo_priority_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t arg2 ;
  
  SWIG_check_num_args("pj::CodecInfo::priority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::priority",1,"pj::CodecInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CodecInfo::priority",2,"pj_uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_priority_set",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint8_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->priority = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfo_priority_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t result;
  
  SWIG_check_num_args("pj::CodecInfo::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::priority",1,"pj::CodecInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_priority_get",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  result = (pj_uint8_t) ((arg1)->priority);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfo_desc_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CodecInfo::desc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::desc",1,"pj::CodecInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CodecInfo::desc",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_desc_set",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->desc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CodecInfo_desc_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CodecInfo::desc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CodecInfo::desc",1,"pj::CodecInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CodecInfo,0))){
    SWIG_fail_ptr("CodecInfo_desc_get",1,SWIGTYPE_p_pj__CodecInfo);
  }
  
  result = (pj::string *) & ((arg1)->desc);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CodecInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::CodecInfo *result = 0 ;
  
  SWIG_check_num_args("pj::CodecInfo::CodecInfo",0,0)
  result = (pj::CodecInfo *)new pj::CodecInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CodecInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CodecInfo(void *obj) {
pj::CodecInfo *arg1 = (pj::CodecInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_CodecInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CodecInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CodecInfo_attributes[] = {
    { "codecId", _wrap_CodecInfo_codecId_get, _wrap_CodecInfo_codecId_set },
    { "priority", _wrap_CodecInfo_priority_get, _wrap_CodecInfo_priority_set },
    { "desc", _wrap_CodecInfo_desc_get, _wrap_CodecInfo_desc_set },
    {0,0,0}
};
static swig_lua_method swig_CodecInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_CodecInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CodecInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CodecInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CodecInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CodecInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CodecInfo_Sf_SwigStatic = {
    "CodecInfo",
    swig_CodecInfo_Sf_SwigStatic_methods,
    swig_CodecInfo_Sf_SwigStatic_attributes,
    swig_CodecInfo_Sf_SwigStatic_constants,
    swig_CodecInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CodecInfo_bases[] = {0};
static const char *swig_CodecInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CodecInfo = { "CodecInfo", "CodecInfo", &SWIGTYPE_p_pj__CodecInfo,_proxy__wrap_new_CodecInfo, swig_delete_CodecInfo, swig_CodecInfo_methods, swig_CodecInfo_attributes, &swig_CodecInfo_Sf_SwigStatic, swig_CodecInfo_meta, swig_CodecInfo_bases, swig_CodecInfo_base_names };

static int _wrap_PresenceStatus_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status arg2 ;
  
  SWIG_check_num_args("pj::PresenceStatus::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::status",1,"pj::PresenceStatus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::PresenceStatus::status",2,"pjsua_buddy_status");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_status_set",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  arg2 = (pjsua_buddy_status)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status result;
  
  SWIG_check_num_args("pj::PresenceStatus::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::status",1,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_status_get",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  result = (pjsua_buddy_status) ((arg1)->status);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_statusText_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PresenceStatus::statusText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::statusText",1,"pj::PresenceStatus *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PresenceStatus::statusText",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_statusText_set",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->statusText = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_statusText_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::PresenceStatus::statusText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::statusText",1,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_statusText_get",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  result = (pj::string *) & ((arg1)->statusText);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_activity_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity arg2 ;
  
  SWIG_check_num_args("pj::PresenceStatus::activity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::activity",1,"pj::PresenceStatus *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::PresenceStatus::activity",2,"pjrpid_activity");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_activity_set",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  arg2 = (pjrpid_activity)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->activity = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_activity_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity result;
  
  SWIG_check_num_args("pj::PresenceStatus::activity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::activity",1,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_activity_get",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  result = (pjrpid_activity) ((arg1)->activity);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_note_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PresenceStatus::note",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::note",1,"pj::PresenceStatus *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PresenceStatus::note",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_note_set",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->note = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_note_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::PresenceStatus::note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::note",1,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_note_get",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  result = (pj::string *) & ((arg1)->note);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_rpidId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PresenceStatus::rpidId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::rpidId",1,"pj::PresenceStatus *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PresenceStatus::rpidId",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_rpidId_set",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->rpidId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresenceStatus_rpidId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::PresenceStatus::rpidId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresenceStatus::rpidId",1,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("PresenceStatus_rpidId_get",1,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  result = (pj::string *) & ((arg1)->rpidId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PresenceStatus(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresenceStatus *result = 0 ;
  
  SWIG_check_num_args("pj::PresenceStatus::PresenceStatus",0,0)
  result = (pj::PresenceStatus *)new pj::PresenceStatus();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__PresenceStatus,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PresenceStatus(void *obj) {
pj::PresenceStatus *arg1 = (pj::PresenceStatus *) obj;
delete arg1;
}
static int _proxy__wrap_new_PresenceStatus(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PresenceStatus);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PresenceStatus_attributes[] = {
    { "status", _wrap_PresenceStatus_status_get, _wrap_PresenceStatus_status_set },
    { "statusText", _wrap_PresenceStatus_statusText_get, _wrap_PresenceStatus_statusText_set },
    { "activity", _wrap_PresenceStatus_activity_get, _wrap_PresenceStatus_activity_set },
    { "note", _wrap_PresenceStatus_note_get, _wrap_PresenceStatus_note_set },
    { "rpidId", _wrap_PresenceStatus_rpidId_get, _wrap_PresenceStatus_rpidId_set },
    {0,0,0}
};
static swig_lua_method swig_PresenceStatus_methods[]= {
    {0,0}
};
static swig_lua_method swig_PresenceStatus_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PresenceStatus_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PresenceStatus_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PresenceStatus_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PresenceStatus_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PresenceStatus_Sf_SwigStatic = {
    "PresenceStatus",
    swig_PresenceStatus_Sf_SwigStatic_methods,
    swig_PresenceStatus_Sf_SwigStatic_attributes,
    swig_PresenceStatus_Sf_SwigStatic_constants,
    swig_PresenceStatus_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PresenceStatus_bases[] = {0};
static const char *swig_PresenceStatus_base_names[] = {0};
static swig_lua_class _wrap_class_PresenceStatus = { "PresenceStatus", "PresenceStatus", &SWIGTYPE_p_pj__PresenceStatus,_proxy__wrap_new_PresenceStatus, swig_delete_PresenceStatus, swig_PresenceStatus_methods, swig_PresenceStatus_attributes, &swig_PresenceStatus_Sf_SwigStatic, swig_PresenceStatus_meta, swig_PresenceStatus_bases, swig_PresenceStatus_base_names };

static int _wrap_BuddyConfig_uri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::BuddyConfig::uri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::uri",1,"pj::BuddyConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::BuddyConfig::uri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_uri_set",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->uri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyConfig_uri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyConfig::uri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::uri",1,"pj::BuddyConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_uri_get",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  result = (pj::string *) & ((arg1)->uri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyConfig_subscribe_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::BuddyConfig::subscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::subscribe",1,"pj::BuddyConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::BuddyConfig::subscribe",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_subscribe_set",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->subscribe = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyConfig_subscribe_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::BuddyConfig::subscribe",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::subscribe",1,"pj::BuddyConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_subscribe_get",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  result = (bool) ((arg1)->subscribe);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::BuddyConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::readObject",1,"pj::BuddyConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::BuddyConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_readObject",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("BuddyConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::BuddyConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyConfig::writeObject",1,"pj::BuddyConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::BuddyConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("BuddyConfig_writeObject",1,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("BuddyConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::BuddyConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyConfig *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyConfig::BuddyConfig",0,0)
  result = (pj::BuddyConfig *)new pj::BuddyConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__BuddyConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BuddyConfig(void *obj) {
pj::BuddyConfig *arg1 = (pj::BuddyConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_BuddyConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BuddyConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BuddyConfig_attributes[] = {
    { "uri", _wrap_BuddyConfig_uri_get, _wrap_BuddyConfig_uri_set },
    { "subscribe", _wrap_BuddyConfig_subscribe_get, _wrap_BuddyConfig_subscribe_set },
    {0,0,0}
};
static swig_lua_method swig_BuddyConfig_methods[]= {
    { "readObject", _wrap_BuddyConfig_readObject},
    { "writeObject", _wrap_BuddyConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_BuddyConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BuddyConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BuddyConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BuddyConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BuddyConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BuddyConfig_Sf_SwigStatic = {
    "BuddyConfig",
    swig_BuddyConfig_Sf_SwigStatic_methods,
    swig_BuddyConfig_Sf_SwigStatic_attributes,
    swig_BuddyConfig_Sf_SwigStatic_constants,
    swig_BuddyConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BuddyConfig_bases[] = {0,0};
static const char *swig_BuddyConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_BuddyConfig = { "BuddyConfig", "BuddyConfig", &SWIGTYPE_p_pj__BuddyConfig,_proxy__wrap_new_BuddyConfig, swig_delete_BuddyConfig, swig_BuddyConfig_methods, swig_BuddyConfig_attributes, &swig_BuddyConfig_Sf_SwigStatic, swig_BuddyConfig_meta, swig_BuddyConfig_bases, swig_BuddyConfig_base_names };

static int _wrap_BuddyInfo_uri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::uri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::uri",1,"pj::BuddyInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::BuddyInfo::uri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_uri_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->uri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_uri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::uri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::uri",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_uri_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pj::string *) & ((arg1)->uri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_contact_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::contact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::contact",1,"pj::BuddyInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::BuddyInfo::contact",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_contact_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contact = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_contact_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::contact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::contact",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_contact_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pj::string *) & ((arg1)->contact);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_presMonitorEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::presMonitorEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::presMonitorEnabled",1,"pj::BuddyInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::BuddyInfo::presMonitorEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_presMonitorEnabled_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->presMonitorEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_presMonitorEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::BuddyInfo::presMonitorEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::presMonitorEnabled",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_presMonitorEnabled_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (bool) ((arg1)->presMonitorEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subState_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state arg2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subState",1,"pj::BuddyInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::BuddyInfo::subState",2,"pjsip_evsub_state");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subState_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  arg2 = (pjsip_evsub_state)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->subState = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subState_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state result;
  
  SWIG_check_num_args("pj::BuddyInfo::subState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subState",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subState_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pjsip_evsub_state) ((arg1)->subState);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subStateName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subStateName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subStateName",1,"pj::BuddyInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::BuddyInfo::subStateName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subStateName_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->subStateName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subStateName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subStateName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subStateName",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subStateName_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pj::string *) & ((arg1)->subStateName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subTermCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subTermCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subTermCode",1,"pj::BuddyInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::BuddyInfo::subTermCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subTermCode_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->subTermCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subTermCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::BuddyInfo::subTermCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subTermCode",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subTermCode_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pjsip_status_code) ((arg1)->subTermCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subTermReason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subTermReason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subTermReason",1,"pj::BuddyInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::BuddyInfo::subTermReason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subTermReason_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->subTermReason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_subTermReason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::subTermReason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::subTermReason",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_subTermReason_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pj::string *) & ((arg1)->subTermReason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_presStatus_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *arg2 = (pj::PresenceStatus *) 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::presStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::presStatus",1,"pj::BuddyInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::BuddyInfo::presStatus",2,"pj::PresenceStatus *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_presStatus_set",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("BuddyInfo_presStatus_set",2,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  if (arg1) (arg1)->presStatus = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BuddyInfo_presStatus_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::presStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::BuddyInfo::presStatus",1,"pj::BuddyInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__BuddyInfo,0))){
    SWIG_fail_ptr("BuddyInfo_presStatus_get",1,SWIGTYPE_p_pj__BuddyInfo);
  }
  
  result = (pj::PresenceStatus *)& ((arg1)->presStatus);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__PresenceStatus,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BuddyInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::BuddyInfo *result = 0 ;
  
  SWIG_check_num_args("pj::BuddyInfo::BuddyInfo",0,0)
  result = (pj::BuddyInfo *)new pj::BuddyInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__BuddyInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BuddyInfo(void *obj) {
pj::BuddyInfo *arg1 = (pj::BuddyInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_BuddyInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BuddyInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BuddyInfo_attributes[] = {
    { "uri", _wrap_BuddyInfo_uri_get, _wrap_BuddyInfo_uri_set },
    { "contact", _wrap_BuddyInfo_contact_get, _wrap_BuddyInfo_contact_set },
    { "presMonitorEnabled", _wrap_BuddyInfo_presMonitorEnabled_get, _wrap_BuddyInfo_presMonitorEnabled_set },
    { "subState", _wrap_BuddyInfo_subState_get, _wrap_BuddyInfo_subState_set },
    { "subStateName", _wrap_BuddyInfo_subStateName_get, _wrap_BuddyInfo_subStateName_set },
    { "subTermCode", _wrap_BuddyInfo_subTermCode_get, _wrap_BuddyInfo_subTermCode_set },
    { "subTermReason", _wrap_BuddyInfo_subTermReason_get, _wrap_BuddyInfo_subTermReason_set },
    { "presStatus", _wrap_BuddyInfo_presStatus_get, _wrap_BuddyInfo_presStatus_set },
    {0,0,0}
};
static swig_lua_method swig_BuddyInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_BuddyInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BuddyInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BuddyInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BuddyInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BuddyInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BuddyInfo_Sf_SwigStatic = {
    "BuddyInfo",
    swig_BuddyInfo_Sf_SwigStatic_methods,
    swig_BuddyInfo_Sf_SwigStatic_attributes,
    swig_BuddyInfo_Sf_SwigStatic_constants,
    swig_BuddyInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BuddyInfo_bases[] = {0};
static const char *swig_BuddyInfo_base_names[] = {0};
static swig_lua_class _wrap_class_BuddyInfo = { "BuddyInfo", "BuddyInfo", &SWIGTYPE_p_pj__BuddyInfo,_proxy__wrap_new_BuddyInfo, swig_delete_BuddyInfo, swig_BuddyInfo_methods, swig_BuddyInfo_attributes, &swig_BuddyInfo_Sf_SwigStatic, swig_BuddyInfo_meta, swig_BuddyInfo_bases, swig_BuddyInfo_base_names };

static int _wrap_new_Buddy(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("pj::Buddy::Buddy",0,0)
  result = (pj::Buddy *)new pj::Buddy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_create(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::Account *arg2 = 0 ;
  pj::BuddyConfig *arg3 = 0 ;
  
  SWIG_check_num_args("pj::Buddy::create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::create",1,"pj::Buddy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Buddy::create",2,"pj::Account &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Buddy::create",3,"pj::BuddyConfig const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_create",1,SWIGTYPE_p_pj__Buddy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Buddy_create",2,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__BuddyConfig,0))){
    SWIG_fail_ptr("Buddy_create",3,SWIGTYPE_p_pj__BuddyConfig);
  }
  
  try {
    (arg1)->create(*arg2,(pj::BuddyConfig const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_isValid(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Buddy::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::isValid",1,"pj::Buddy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_isValid",1,SWIGTYPE_p_pj__Buddy);
  }
  
  result = (bool)((pj::Buddy const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::BuddyInfo result;
  
  SWIG_check_num_args("pj::Buddy::getInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::getInfo",1,"pj::Buddy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_getInfo",1,SWIGTYPE_p_pj__Buddy);
  }
  
  try {
    result = ((pj::Buddy const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::BuddyInfo * resultptr = new pj::BuddyInfo((const pj::BuddyInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__BuddyInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_subscribePresence(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::Buddy::subscribePresence",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::subscribePresence",1,"pj::Buddy *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::Buddy::subscribePresence",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_subscribePresence",1,SWIGTYPE_p_pj__Buddy);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  try {
    (arg1)->subscribePresence(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_updatePresence(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("pj::Buddy::updatePresence",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::updatePresence",1,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_updatePresence",1,SWIGTYPE_p_pj__Buddy);
  }
  
  try {
    (arg1)->updatePresence();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_sendInstantMessage(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Buddy::sendInstantMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::sendInstantMessage",1,"pj::Buddy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Buddy::sendInstantMessage",2,"pj::SendInstantMessageParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_sendInstantMessage",1,SWIGTYPE_p_pj__Buddy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("Buddy_sendInstantMessage",2,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_sendTypingIndication(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Buddy::sendTypingIndication",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::sendTypingIndication",1,"pj::Buddy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Buddy::sendTypingIndication",2,"pj::SendTypingIndicationParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_sendTypingIndication",1,SWIGTYPE_p_pj__Buddy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("Buddy_sendTypingIndication",2,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Buddy_onBuddyState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("pj::Buddy::onBuddyState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Buddy::onBuddyState",1,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Buddy_onBuddyState",1,SWIGTYPE_p_pj__Buddy);
  }
  
  (arg1)->onBuddyState();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Buddy(void *obj) {
pj::Buddy *arg1 = (pj::Buddy *) obj;
delete arg1;
}
static int _proxy__wrap_new_Buddy(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Buddy);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Buddy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Buddy_methods[]= {
    { "create", _wrap_Buddy_create},
    { "isValid", _wrap_Buddy_isValid},
    { "getInfo", _wrap_Buddy_getInfo},
    { "subscribePresence", _wrap_Buddy_subscribePresence},
    { "updatePresence", _wrap_Buddy_updatePresence},
    { "sendInstantMessage", _wrap_Buddy_sendInstantMessage},
    { "sendTypingIndication", _wrap_Buddy_sendTypingIndication},
    { "onBuddyState", _wrap_Buddy_onBuddyState},
    {0,0}
};
static swig_lua_method swig_Buddy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Buddy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Buddy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Buddy_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Buddy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Buddy_Sf_SwigStatic = {
    "Buddy",
    swig_Buddy_Sf_SwigStatic_methods,
    swig_Buddy_Sf_SwigStatic_attributes,
    swig_Buddy_Sf_SwigStatic_constants,
    swig_Buddy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Buddy_bases[] = {0};
static const char *swig_Buddy_base_names[] = {0};
static swig_lua_class _wrap_class_Buddy = { "Buddy", "Buddy", &SWIGTYPE_p_pj__Buddy,_proxy__wrap_new_Buddy, swig_delete_Buddy, swig_Buddy_methods, swig_Buddy_attributes, &swig_Buddy_Sf_SwigStatic, swig_Buddy_meta, swig_Buddy_bases, swig_Buddy_base_names };

static int _wrap_AccountRegConfig_registrarUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::registrarUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::registrarUri",1,"pj::AccountRegConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountRegConfig::registrarUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_registrarUri_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->registrarUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_registrarUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::registrarUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::registrarUri",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_registrarUri_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (pj::string *) & ((arg1)->registrarUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_registerOnAdd_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::registerOnAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::registerOnAdd",1,"pj::AccountRegConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountRegConfig::registerOnAdd",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_registerOnAdd_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->registerOnAdd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_registerOnAdd_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountRegConfig::registerOnAdd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::registerOnAdd",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_registerOnAdd_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (bool) ((arg1)->registerOnAdd);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_headers_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::headers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::headers",1,"pj::AccountRegConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountRegConfig::headers",2,"pj::SipHeaderVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_headers_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("AccountRegConfig_headers_set",2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  if (arg1) (arg1)->headers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_headers_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::headers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::headers",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_headers_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_timeoutSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::timeoutSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::timeoutSec",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::timeoutSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_timeoutSec_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->timeoutSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_timeoutSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::timeoutSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::timeoutSec",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_timeoutSec_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->timeoutSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_retryIntervalSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::retryIntervalSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::retryIntervalSec",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::retryIntervalSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_retryIntervalSec_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->retryIntervalSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_retryIntervalSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::retryIntervalSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::retryIntervalSec",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_retryIntervalSec_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->retryIntervalSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_firstRetryIntervalSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::firstRetryIntervalSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::firstRetryIntervalSec",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::firstRetryIntervalSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_firstRetryIntervalSec_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->firstRetryIntervalSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_firstRetryIntervalSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::firstRetryIntervalSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::firstRetryIntervalSec",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_firstRetryIntervalSec_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->firstRetryIntervalSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_delayBeforeRefreshSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::delayBeforeRefreshSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::delayBeforeRefreshSec",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::delayBeforeRefreshSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_delayBeforeRefreshSec_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->delayBeforeRefreshSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_delayBeforeRefreshSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::delayBeforeRefreshSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::delayBeforeRefreshSec",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_delayBeforeRefreshSec_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->delayBeforeRefreshSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_dropCallsOnFail_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::dropCallsOnFail",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::dropCallsOnFail",1,"pj::AccountRegConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountRegConfig::dropCallsOnFail",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_dropCallsOnFail_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->dropCallsOnFail = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_dropCallsOnFail_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountRegConfig::dropCallsOnFail",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::dropCallsOnFail",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_dropCallsOnFail_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (bool) ((arg1)->dropCallsOnFail);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_unregWaitSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::unregWaitSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::unregWaitSec",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::unregWaitSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_unregWaitSec_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->unregWaitSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_unregWaitSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::unregWaitSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::unregWaitSec",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_unregWaitSec_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->unregWaitSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_proxyUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::proxyUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::proxyUse",1,"pj::AccountRegConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountRegConfig::proxyUse",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_proxyUse_set",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->proxyUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_proxyUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountRegConfig::proxyUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::proxyUse",1,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_proxyUse_get",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  result = (unsigned int) ((arg1)->proxyUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::readObject",1,"pj::AccountRegConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountRegConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_readObject",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountRegConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountRegConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountRegConfig::writeObject",1,"pj::AccountRegConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountRegConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountRegConfig_writeObject",1,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountRegConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountRegConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountRegConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountRegConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountRegConfig::AccountRegConfig",0,0)
  result = (pj::AccountRegConfig *)new pj::AccountRegConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountRegConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountRegConfig(void *obj) {
pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountRegConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountRegConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountRegConfig_attributes[] = {
    { "registrarUri", _wrap_AccountRegConfig_registrarUri_get, _wrap_AccountRegConfig_registrarUri_set },
    { "registerOnAdd", _wrap_AccountRegConfig_registerOnAdd_get, _wrap_AccountRegConfig_registerOnAdd_set },
    { "headers", _wrap_AccountRegConfig_headers_get, _wrap_AccountRegConfig_headers_set },
    { "timeoutSec", _wrap_AccountRegConfig_timeoutSec_get, _wrap_AccountRegConfig_timeoutSec_set },
    { "retryIntervalSec", _wrap_AccountRegConfig_retryIntervalSec_get, _wrap_AccountRegConfig_retryIntervalSec_set },
    { "firstRetryIntervalSec", _wrap_AccountRegConfig_firstRetryIntervalSec_get, _wrap_AccountRegConfig_firstRetryIntervalSec_set },
    { "delayBeforeRefreshSec", _wrap_AccountRegConfig_delayBeforeRefreshSec_get, _wrap_AccountRegConfig_delayBeforeRefreshSec_set },
    { "dropCallsOnFail", _wrap_AccountRegConfig_dropCallsOnFail_get, _wrap_AccountRegConfig_dropCallsOnFail_set },
    { "unregWaitSec", _wrap_AccountRegConfig_unregWaitSec_get, _wrap_AccountRegConfig_unregWaitSec_set },
    { "proxyUse", _wrap_AccountRegConfig_proxyUse_get, _wrap_AccountRegConfig_proxyUse_set },
    {0,0,0}
};
static swig_lua_method swig_AccountRegConfig_methods[]= {
    { "readObject", _wrap_AccountRegConfig_readObject},
    { "writeObject", _wrap_AccountRegConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountRegConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountRegConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountRegConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountRegConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountRegConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountRegConfig_Sf_SwigStatic = {
    "AccountRegConfig",
    swig_AccountRegConfig_Sf_SwigStatic_methods,
    swig_AccountRegConfig_Sf_SwigStatic_attributes,
    swig_AccountRegConfig_Sf_SwigStatic_constants,
    swig_AccountRegConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountRegConfig_bases[] = {0,0};
static const char *swig_AccountRegConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountRegConfig = { "AccountRegConfig", "AccountRegConfig", &SWIGTYPE_p_pj__AccountRegConfig,_proxy__wrap_new_AccountRegConfig, swig_delete_AccountRegConfig, swig_AccountRegConfig_methods, swig_AccountRegConfig_attributes, &swig_AccountRegConfig_Sf_SwigStatic, swig_AccountRegConfig_meta, swig_AccountRegConfig_bases, swig_AccountRegConfig_base_names };

static int _wrap_AccountSipConfig_authCreds_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *arg2 = (pj::AuthCredInfoVector *) 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::authCreds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authCreds",1,"pj::AccountSipConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountSipConfig::authCreds",2,"pj::AuthCredInfoVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authCreds_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0))){
    SWIG_fail_ptr("AccountSipConfig_authCreds_set",2,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t);
  }
  
  if (arg1) (arg1)->authCreds = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_authCreds_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::authCreds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authCreds",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authCreds_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::AuthCredInfoVector *)& ((arg1)->authCreds);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AuthCredInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_proxies_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::proxies",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::proxies",1,"pj::AccountSipConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountSipConfig::proxies",2,"pj::StringVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_proxies_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("AccountSipConfig_proxies_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->proxies = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_proxies_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::proxies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::proxies",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_proxies_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::StringVector *)& ((arg1)->proxies);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactForced_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactForced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactForced",1,"pj::AccountSipConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountSipConfig::contactForced",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactForced_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contactForced = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactForced_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactForced",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactForced",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactForced_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::string *) & ((arg1)->contactForced);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactParams_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactParams",1,"pj::AccountSipConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountSipConfig::contactParams",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactParams_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contactParams = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactParams_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactParams",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactParams_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::string *) & ((arg1)->contactParams);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactUriParams_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactUriParams",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactUriParams",1,"pj::AccountSipConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountSipConfig::contactUriParams",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactUriParams_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contactUriParams = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_contactUriParams_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::contactUriParams",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::contactUriParams",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_contactUriParams_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::string *) & ((arg1)->contactUriParams);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_authInitialEmpty_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::authInitialEmpty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authInitialEmpty",1,"pj::AccountSipConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountSipConfig::authInitialEmpty",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authInitialEmpty_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->authInitialEmpty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_authInitialEmpty_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountSipConfig::authInitialEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authInitialEmpty",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authInitialEmpty_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (bool) ((arg1)->authInitialEmpty);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_authInitialAlgorithm_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::authInitialAlgorithm",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authInitialAlgorithm",1,"pj::AccountSipConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountSipConfig::authInitialAlgorithm",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authInitialAlgorithm_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->authInitialAlgorithm = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_authInitialAlgorithm_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::authInitialAlgorithm",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::authInitialAlgorithm",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_authInitialAlgorithm_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::string *) & ((arg1)->authInitialAlgorithm);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_transportId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId arg2 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::transportId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::transportId",1,"pj::AccountSipConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountSipConfig::transportId",2,"pj::TransportId");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_transportId_set",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  if (arg1) (arg1)->transportId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_transportId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId result;
  
  SWIG_check_num_args("pj::AccountSipConfig::transportId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::transportId",1,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_transportId_get",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  result = (pj::TransportId) ((arg1)->transportId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::readObject",1,"pj::AccountSipConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountSipConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_readObject",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountSipConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountSipConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountSipConfig::writeObject",1,"pj::AccountSipConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountSipConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountSipConfig_writeObject",1,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountSipConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountSipConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountSipConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountSipConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountSipConfig::AccountSipConfig",0,0)
  result = (pj::AccountSipConfig *)new pj::AccountSipConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountSipConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountSipConfig(void *obj) {
pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountSipConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountSipConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountSipConfig_attributes[] = {
    { "authCreds", _wrap_AccountSipConfig_authCreds_get, _wrap_AccountSipConfig_authCreds_set },
    { "proxies", _wrap_AccountSipConfig_proxies_get, _wrap_AccountSipConfig_proxies_set },
    { "contactForced", _wrap_AccountSipConfig_contactForced_get, _wrap_AccountSipConfig_contactForced_set },
    { "contactParams", _wrap_AccountSipConfig_contactParams_get, _wrap_AccountSipConfig_contactParams_set },
    { "contactUriParams", _wrap_AccountSipConfig_contactUriParams_get, _wrap_AccountSipConfig_contactUriParams_set },
    { "authInitialEmpty", _wrap_AccountSipConfig_authInitialEmpty_get, _wrap_AccountSipConfig_authInitialEmpty_set },
    { "authInitialAlgorithm", _wrap_AccountSipConfig_authInitialAlgorithm_get, _wrap_AccountSipConfig_authInitialAlgorithm_set },
    { "transportId", _wrap_AccountSipConfig_transportId_get, _wrap_AccountSipConfig_transportId_set },
    {0,0,0}
};
static swig_lua_method swig_AccountSipConfig_methods[]= {
    { "readObject", _wrap_AccountSipConfig_readObject},
    { "writeObject", _wrap_AccountSipConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountSipConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountSipConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountSipConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountSipConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountSipConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountSipConfig_Sf_SwigStatic = {
    "AccountSipConfig",
    swig_AccountSipConfig_Sf_SwigStatic_methods,
    swig_AccountSipConfig_Sf_SwigStatic_attributes,
    swig_AccountSipConfig_Sf_SwigStatic_constants,
    swig_AccountSipConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountSipConfig_bases[] = {0,0};
static const char *swig_AccountSipConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountSipConfig = { "AccountSipConfig", "AccountSipConfig", &SWIGTYPE_p_pj__AccountSipConfig,_proxy__wrap_new_AccountSipConfig, swig_delete_AccountSipConfig, swig_AccountSipConfig_methods, swig_AccountSipConfig_attributes, &swig_AccountSipConfig_Sf_SwigStatic, swig_AccountSipConfig_meta, swig_AccountSipConfig_bases, swig_AccountSipConfig_base_names };

static int _wrap_AccountCallConfig_holdType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type arg2 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::holdType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::holdType",1,"pj::AccountCallConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountCallConfig::holdType",2,"pjsua_call_hold_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_holdType_set",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  arg2 = (pjsua_call_hold_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->holdType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_holdType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type result;
  
  SWIG_check_num_args("pj::AccountCallConfig::holdType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::holdType",1,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_holdType_get",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  result = (pjsua_call_hold_type) ((arg1)->holdType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_prackUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use arg2 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::prackUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::prackUse",1,"pj::AccountCallConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountCallConfig::prackUse",2,"pjsua_100rel_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_prackUse_set",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  arg2 = (pjsua_100rel_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->prackUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_prackUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use result;
  
  SWIG_check_num_args("pj::AccountCallConfig::prackUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::prackUse",1,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_prackUse_get",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  result = (pjsua_100rel_use) ((arg1)->prackUse);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use arg2 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerUse",1,"pj::AccountCallConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountCallConfig::timerUse",2,"pjsua_sip_timer_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerUse_set",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  arg2 = (pjsua_sip_timer_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->timerUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use result;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerUse",1,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerUse_get",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  result = (pjsua_sip_timer_use) ((arg1)->timerUse);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerMinSESec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerMinSESec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerMinSESec",1,"pj::AccountCallConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountCallConfig::timerMinSESec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerMinSESec_set",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->timerMinSESec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerMinSESec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerMinSESec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerMinSESec",1,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerMinSESec_get",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  result = (unsigned int) ((arg1)->timerMinSESec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerSessExpiresSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerSessExpiresSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerSessExpiresSec",1,"pj::AccountCallConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountCallConfig::timerSessExpiresSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerSessExpiresSec_set",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->timerSessExpiresSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_timerSessExpiresSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountCallConfig::timerSessExpiresSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::timerSessExpiresSec",1,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_timerSessExpiresSec_get",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  result = (unsigned int) ((arg1)->timerSessExpiresSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::readObject",1,"pj::AccountCallConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountCallConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_readObject",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountCallConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountCallConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountCallConfig::writeObject",1,"pj::AccountCallConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountCallConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountCallConfig_writeObject",1,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountCallConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountCallConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountCallConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountCallConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountCallConfig::AccountCallConfig",0,0)
  result = (pj::AccountCallConfig *)new pj::AccountCallConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountCallConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountCallConfig(void *obj) {
pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountCallConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountCallConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountCallConfig_attributes[] = {
    { "holdType", _wrap_AccountCallConfig_holdType_get, _wrap_AccountCallConfig_holdType_set },
    { "prackUse", _wrap_AccountCallConfig_prackUse_get, _wrap_AccountCallConfig_prackUse_set },
    { "timerUse", _wrap_AccountCallConfig_timerUse_get, _wrap_AccountCallConfig_timerUse_set },
    { "timerMinSESec", _wrap_AccountCallConfig_timerMinSESec_get, _wrap_AccountCallConfig_timerMinSESec_set },
    { "timerSessExpiresSec", _wrap_AccountCallConfig_timerSessExpiresSec_get, _wrap_AccountCallConfig_timerSessExpiresSec_set },
    {0,0,0}
};
static swig_lua_method swig_AccountCallConfig_methods[]= {
    { "readObject", _wrap_AccountCallConfig_readObject},
    { "writeObject", _wrap_AccountCallConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountCallConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountCallConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountCallConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountCallConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountCallConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountCallConfig_Sf_SwigStatic = {
    "AccountCallConfig",
    swig_AccountCallConfig_Sf_SwigStatic_methods,
    swig_AccountCallConfig_Sf_SwigStatic_attributes,
    swig_AccountCallConfig_Sf_SwigStatic_constants,
    swig_AccountCallConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountCallConfig_bases[] = {0,0};
static const char *swig_AccountCallConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountCallConfig = { "AccountCallConfig", "AccountCallConfig", &SWIGTYPE_p_pj__AccountCallConfig,_proxy__wrap_new_AccountCallConfig, swig_delete_AccountCallConfig, swig_AccountCallConfig_methods, swig_AccountCallConfig_attributes, &swig_AccountCallConfig_Sf_SwigStatic, swig_AccountCallConfig_meta, swig_AccountCallConfig_bases, swig_AccountCallConfig_base_names };

static int _wrap_AccountPresConfig_headers_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::headers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::headers",1,"pj::AccountPresConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountPresConfig::headers",2,"pj::SipHeaderVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_headers_set",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0))){
    SWIG_fail_ptr("AccountPresConfig_headers_set",2,SWIGTYPE_p_std__vectorT_pj__SipHeader_t);
  }
  
  if (arg1) (arg1)->headers = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_headers_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::headers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::headers",1,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_headers_get",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__SipHeader_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishEnabled",1,"pj::AccountPresConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountPresConfig::publishEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishEnabled_set",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->publishEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishEnabled",1,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishEnabled_get",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  result = (bool) ((arg1)->publishEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishQueue_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishQueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishQueue",1,"pj::AccountPresConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountPresConfig::publishQueue",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishQueue_set",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->publishQueue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishQueue_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishQueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishQueue",1,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishQueue_get",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  result = (bool) ((arg1)->publishQueue);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishShutdownWaitMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishShutdownWaitMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishShutdownWaitMsec",1,"pj::AccountPresConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountPresConfig::publishShutdownWaitMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishShutdownWaitMsec_set",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->publishShutdownWaitMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_publishShutdownWaitMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountPresConfig::publishShutdownWaitMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::publishShutdownWaitMsec",1,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_publishShutdownWaitMsec_get",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  result = (unsigned int) ((arg1)->publishShutdownWaitMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_pidfTupleId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::pidfTupleId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::pidfTupleId",1,"pj::AccountPresConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountPresConfig::pidfTupleId",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_pidfTupleId_set",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->pidfTupleId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_pidfTupleId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::pidfTupleId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::pidfTupleId",1,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_pidfTupleId_get",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  result = (pj::string *) & ((arg1)->pidfTupleId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::readObject",1,"pj::AccountPresConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountPresConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_readObject",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountPresConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountPresConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountPresConfig::writeObject",1,"pj::AccountPresConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountPresConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountPresConfig_writeObject",1,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountPresConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountPresConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountPresConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountPresConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountPresConfig::AccountPresConfig",0,0)
  result = (pj::AccountPresConfig *)new pj::AccountPresConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountPresConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountPresConfig(void *obj) {
pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountPresConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountPresConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountPresConfig_attributes[] = {
    { "headers", _wrap_AccountPresConfig_headers_get, _wrap_AccountPresConfig_headers_set },
    { "publishEnabled", _wrap_AccountPresConfig_publishEnabled_get, _wrap_AccountPresConfig_publishEnabled_set },
    { "publishQueue", _wrap_AccountPresConfig_publishQueue_get, _wrap_AccountPresConfig_publishQueue_set },
    { "publishShutdownWaitMsec", _wrap_AccountPresConfig_publishShutdownWaitMsec_get, _wrap_AccountPresConfig_publishShutdownWaitMsec_set },
    { "pidfTupleId", _wrap_AccountPresConfig_pidfTupleId_get, _wrap_AccountPresConfig_pidfTupleId_set },
    {0,0,0}
};
static swig_lua_method swig_AccountPresConfig_methods[]= {
    { "readObject", _wrap_AccountPresConfig_readObject},
    { "writeObject", _wrap_AccountPresConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountPresConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountPresConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountPresConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountPresConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountPresConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountPresConfig_Sf_SwigStatic = {
    "AccountPresConfig",
    swig_AccountPresConfig_Sf_SwigStatic_methods,
    swig_AccountPresConfig_Sf_SwigStatic_attributes,
    swig_AccountPresConfig_Sf_SwigStatic_constants,
    swig_AccountPresConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountPresConfig_bases[] = {0,0};
static const char *swig_AccountPresConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountPresConfig = { "AccountPresConfig", "AccountPresConfig", &SWIGTYPE_p_pj__AccountPresConfig,_proxy__wrap_new_AccountPresConfig, swig_delete_AccountPresConfig, swig_AccountPresConfig_methods, swig_AccountPresConfig_attributes, &swig_AccountPresConfig_Sf_SwigStatic, swig_AccountPresConfig_meta, swig_AccountPresConfig_bases, swig_AccountPresConfig_base_names };

static int _wrap_AccountMwiConfig_enabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountMwiConfig::enabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::enabled",1,"pj::AccountMwiConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountMwiConfig::enabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_enabled_set",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->enabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMwiConfig_enabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountMwiConfig::enabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::enabled",1,"pj::AccountMwiConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_enabled_get",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  result = (bool) ((arg1)->enabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMwiConfig_expirationSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountMwiConfig::expirationSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::expirationSec",1,"pj::AccountMwiConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountMwiConfig::expirationSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_expirationSec_set",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->expirationSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMwiConfig_expirationSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountMwiConfig::expirationSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::expirationSec",1,"pj::AccountMwiConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_expirationSec_get",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  result = (unsigned int) ((arg1)->expirationSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMwiConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountMwiConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::readObject",1,"pj::AccountMwiConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountMwiConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_readObject",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountMwiConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMwiConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountMwiConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMwiConfig::writeObject",1,"pj::AccountMwiConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountMwiConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountMwiConfig_writeObject",1,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountMwiConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountMwiConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountMwiConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMwiConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountMwiConfig::AccountMwiConfig",0,0)
  result = (pj::AccountMwiConfig *)new pj::AccountMwiConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountMwiConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountMwiConfig(void *obj) {
pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountMwiConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountMwiConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountMwiConfig_attributes[] = {
    { "enabled", _wrap_AccountMwiConfig_enabled_get, _wrap_AccountMwiConfig_enabled_set },
    { "expirationSec", _wrap_AccountMwiConfig_expirationSec_get, _wrap_AccountMwiConfig_expirationSec_set },
    {0,0,0}
};
static swig_lua_method swig_AccountMwiConfig_methods[]= {
    { "readObject", _wrap_AccountMwiConfig_readObject},
    { "writeObject", _wrap_AccountMwiConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountMwiConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountMwiConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountMwiConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountMwiConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountMwiConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountMwiConfig_Sf_SwigStatic = {
    "AccountMwiConfig",
    swig_AccountMwiConfig_Sf_SwigStatic_methods,
    swig_AccountMwiConfig_Sf_SwigStatic_attributes,
    swig_AccountMwiConfig_Sf_SwigStatic_constants,
    swig_AccountMwiConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountMwiConfig_bases[] = {0,0};
static const char *swig_AccountMwiConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountMwiConfig = { "AccountMwiConfig", "AccountMwiConfig", &SWIGTYPE_p_pj__AccountMwiConfig,_proxy__wrap_new_AccountMwiConfig, swig_delete_AccountMwiConfig, swig_AccountMwiConfig_methods, swig_AccountMwiConfig_attributes, &swig_AccountMwiConfig_Sf_SwigStatic, swig_AccountMwiConfig_meta, swig_AccountMwiConfig_bases, swig_AccountMwiConfig_base_names };

static int _wrap_AccountNatConfig_sipStunUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipStunUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipStunUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::sipStunUse",2,"pjsua_stun_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipStunUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (pjsua_stun_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sipStunUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipStunUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipStunUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipStunUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipStunUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pjsua_stun_use) ((arg1)->sipStunUse);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_mediaStunUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::mediaStunUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::mediaStunUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::mediaStunUse",2,"pjsua_stun_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_mediaStunUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (pjsua_stun_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mediaStunUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_mediaStunUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  SWIG_check_num_args("pj::AccountNatConfig::mediaStunUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::mediaStunUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_mediaStunUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pjsua_stun_use) ((arg1)->mediaStunUse);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceEnabled",1,"pj::AccountNatConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceEnabled_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->iceEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceEnabled",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceEnabled_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (bool) ((arg1)->iceEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceMaxHostCands_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceMaxHostCands",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceMaxHostCands",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceMaxHostCands",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceMaxHostCands_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->iceMaxHostCands = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceMaxHostCands_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceMaxHostCands",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceMaxHostCands",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceMaxHostCands_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->iceMaxHostCands);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceAggressiveNomination_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceAggressiveNomination",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceAggressiveNomination",1,"pj::AccountNatConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceAggressiveNomination",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceAggressiveNomination_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->iceAggressiveNomination = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceAggressiveNomination_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceAggressiveNomination",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceAggressiveNomination",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceAggressiveNomination_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (bool) ((arg1)->iceAggressiveNomination);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceNominatedCheckDelayMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceNominatedCheckDelayMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceNominatedCheckDelayMsec",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceNominatedCheckDelayMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceNominatedCheckDelayMsec_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->iceNominatedCheckDelayMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceNominatedCheckDelayMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceNominatedCheckDelayMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceNominatedCheckDelayMsec",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceNominatedCheckDelayMsec_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (unsigned int) ((arg1)->iceNominatedCheckDelayMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceWaitNominationTimeoutMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceWaitNominationTimeoutMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceWaitNominationTimeoutMsec",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceWaitNominationTimeoutMsec",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceWaitNominationTimeoutMsec_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->iceWaitNominationTimeoutMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceWaitNominationTimeoutMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceWaitNominationTimeoutMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceWaitNominationTimeoutMsec",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceWaitNominationTimeoutMsec_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->iceWaitNominationTimeoutMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceNoRtcp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceNoRtcp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceNoRtcp",1,"pj::AccountNatConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceNoRtcp",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceNoRtcp_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->iceNoRtcp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceNoRtcp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceNoRtcp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceNoRtcp",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceNoRtcp_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (bool) ((arg1)->iceNoRtcp);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceAlwaysUpdate_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceAlwaysUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceAlwaysUpdate",1,"pj::AccountNatConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountNatConfig::iceAlwaysUpdate",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceAlwaysUpdate_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->iceAlwaysUpdate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_iceAlwaysUpdate_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountNatConfig::iceAlwaysUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::iceAlwaysUpdate",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_iceAlwaysUpdate_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (bool) ((arg1)->iceAlwaysUpdate);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnEnabled",1,"pj::AccountNatConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnEnabled_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->turnEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnEnabled",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnEnabled_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (bool) ((arg1)->turnEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnServer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnServer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnServer",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnServer",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnServer_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->turnServer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnServer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnServer",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnServer_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->turnServer);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnConnType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnConnType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnConnType",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnConnType",2,"pj_turn_tp_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnConnType_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (pj_turn_tp_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->turnConnType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnConnType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type result;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnConnType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnConnType",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnConnType_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj_turn_tp_type) ((arg1)->turnConnType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnUserName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnUserName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnUserName",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnUserName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnUserName_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->turnUserName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnUserName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnUserName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnUserName",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnUserName_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->turnUserName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnPasswordType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnPasswordType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnPasswordType",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnPasswordType",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnPasswordType_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->turnPasswordType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnPasswordType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnPasswordType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnPasswordType",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnPasswordType_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->turnPasswordType);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnPassword_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnPassword",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnPassword",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::turnPassword",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnPassword_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->turnPassword = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_turnPassword_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::turnPassword",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::turnPassword",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_turnPassword_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->turnPassword);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactRewriteUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactRewriteUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteUse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactRewriteUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->contactRewriteUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactRewriteUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactRewriteUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactRewriteUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->contactRewriteUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactRewriteMethod_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactRewriteMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteMethod",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteMethod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactRewriteMethod_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->contactRewriteMethod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactRewriteMethod_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactRewriteMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactRewriteMethod",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactRewriteMethod_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->contactRewriteMethod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactUseSrcPort_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactUseSrcPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactUseSrcPort",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::contactUseSrcPort",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactUseSrcPort_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->contactUseSrcPort = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_contactUseSrcPort_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::contactUseSrcPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::contactUseSrcPort",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_contactUseSrcPort_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->contactUseSrcPort);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_viaRewriteUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::viaRewriteUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::viaRewriteUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::viaRewriteUse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_viaRewriteUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->viaRewriteUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_viaRewriteUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::viaRewriteUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::viaRewriteUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_viaRewriteUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->viaRewriteUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sdpNatRewriteUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sdpNatRewriteUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sdpNatRewriteUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::sdpNatRewriteUse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sdpNatRewriteUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sdpNatRewriteUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sdpNatRewriteUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::sdpNatRewriteUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sdpNatRewriteUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sdpNatRewriteUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->sdpNatRewriteUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundUse",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundUse",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundUse_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sipOutboundUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundUse",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundUse_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (int) ((arg1)->sipOutboundUse);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundInstanceId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundInstanceId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundInstanceId",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundInstanceId",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundInstanceId_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->sipOutboundInstanceId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundInstanceId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundInstanceId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundInstanceId",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundInstanceId_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->sipOutboundInstanceId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundRegId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundRegId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundRegId",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundRegId",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundRegId_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->sipOutboundRegId = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_sipOutboundRegId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::sipOutboundRegId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::sipOutboundRegId",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_sipOutboundRegId_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->sipOutboundRegId);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_udpKaIntervalSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::udpKaIntervalSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::udpKaIntervalSec",1,"pj::AccountNatConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountNatConfig::udpKaIntervalSec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_udpKaIntervalSec_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->udpKaIntervalSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_udpKaIntervalSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountNatConfig::udpKaIntervalSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::udpKaIntervalSec",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_udpKaIntervalSec_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (unsigned int) ((arg1)->udpKaIntervalSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_udpKaData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::udpKaData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::udpKaData",1,"pj::AccountNatConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountNatConfig::udpKaData",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_udpKaData_set",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->udpKaData = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_udpKaData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::udpKaData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::udpKaData",1,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_udpKaData_get",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  result = (pj::string *) & ((arg1)->udpKaData);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::readObject",1,"pj::AccountNatConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountNatConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_readObject",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountNatConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountNatConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountNatConfig::writeObject",1,"pj::AccountNatConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountNatConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountNatConfig_writeObject",1,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountNatConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountNatConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountNatConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountNatConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountNatConfig::AccountNatConfig",0,0)
  result = (pj::AccountNatConfig *)new pj::AccountNatConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountNatConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountNatConfig(void *obj) {
pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountNatConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountNatConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountNatConfig_attributes[] = {
    { "sipStunUse", _wrap_AccountNatConfig_sipStunUse_get, _wrap_AccountNatConfig_sipStunUse_set },
    { "mediaStunUse", _wrap_AccountNatConfig_mediaStunUse_get, _wrap_AccountNatConfig_mediaStunUse_set },
    { "iceEnabled", _wrap_AccountNatConfig_iceEnabled_get, _wrap_AccountNatConfig_iceEnabled_set },
    { "iceMaxHostCands", _wrap_AccountNatConfig_iceMaxHostCands_get, _wrap_AccountNatConfig_iceMaxHostCands_set },
    { "iceAggressiveNomination", _wrap_AccountNatConfig_iceAggressiveNomination_get, _wrap_AccountNatConfig_iceAggressiveNomination_set },
    { "iceNominatedCheckDelayMsec", _wrap_AccountNatConfig_iceNominatedCheckDelayMsec_get, _wrap_AccountNatConfig_iceNominatedCheckDelayMsec_set },
    { "iceWaitNominationTimeoutMsec", _wrap_AccountNatConfig_iceWaitNominationTimeoutMsec_get, _wrap_AccountNatConfig_iceWaitNominationTimeoutMsec_set },
    { "iceNoRtcp", _wrap_AccountNatConfig_iceNoRtcp_get, _wrap_AccountNatConfig_iceNoRtcp_set },
    { "iceAlwaysUpdate", _wrap_AccountNatConfig_iceAlwaysUpdate_get, _wrap_AccountNatConfig_iceAlwaysUpdate_set },
    { "turnEnabled", _wrap_AccountNatConfig_turnEnabled_get, _wrap_AccountNatConfig_turnEnabled_set },
    { "turnServer", _wrap_AccountNatConfig_turnServer_get, _wrap_AccountNatConfig_turnServer_set },
    { "turnConnType", _wrap_AccountNatConfig_turnConnType_get, _wrap_AccountNatConfig_turnConnType_set },
    { "turnUserName", _wrap_AccountNatConfig_turnUserName_get, _wrap_AccountNatConfig_turnUserName_set },
    { "turnPasswordType", _wrap_AccountNatConfig_turnPasswordType_get, _wrap_AccountNatConfig_turnPasswordType_set },
    { "turnPassword", _wrap_AccountNatConfig_turnPassword_get, _wrap_AccountNatConfig_turnPassword_set },
    { "contactRewriteUse", _wrap_AccountNatConfig_contactRewriteUse_get, _wrap_AccountNatConfig_contactRewriteUse_set },
    { "contactRewriteMethod", _wrap_AccountNatConfig_contactRewriteMethod_get, _wrap_AccountNatConfig_contactRewriteMethod_set },
    { "contactUseSrcPort", _wrap_AccountNatConfig_contactUseSrcPort_get, _wrap_AccountNatConfig_contactUseSrcPort_set },
    { "viaRewriteUse", _wrap_AccountNatConfig_viaRewriteUse_get, _wrap_AccountNatConfig_viaRewriteUse_set },
    { "sdpNatRewriteUse", _wrap_AccountNatConfig_sdpNatRewriteUse_get, _wrap_AccountNatConfig_sdpNatRewriteUse_set },
    { "sipOutboundUse", _wrap_AccountNatConfig_sipOutboundUse_get, _wrap_AccountNatConfig_sipOutboundUse_set },
    { "sipOutboundInstanceId", _wrap_AccountNatConfig_sipOutboundInstanceId_get, _wrap_AccountNatConfig_sipOutboundInstanceId_set },
    { "sipOutboundRegId", _wrap_AccountNatConfig_sipOutboundRegId_get, _wrap_AccountNatConfig_sipOutboundRegId_set },
    { "udpKaIntervalSec", _wrap_AccountNatConfig_udpKaIntervalSec_get, _wrap_AccountNatConfig_udpKaIntervalSec_set },
    { "udpKaData", _wrap_AccountNatConfig_udpKaData_get, _wrap_AccountNatConfig_udpKaData_set },
    {0,0,0}
};
static swig_lua_method swig_AccountNatConfig_methods[]= {
    { "readObject", _wrap_AccountNatConfig_readObject},
    { "writeObject", _wrap_AccountNatConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountNatConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountNatConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountNatConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountNatConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountNatConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountNatConfig_Sf_SwigStatic = {
    "AccountNatConfig",
    swig_AccountNatConfig_Sf_SwigStatic_methods,
    swig_AccountNatConfig_Sf_SwigStatic_attributes,
    swig_AccountNatConfig_Sf_SwigStatic_constants,
    swig_AccountNatConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountNatConfig_bases[] = {0,0};
static const char *swig_AccountNatConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountNatConfig = { "AccountNatConfig", "AccountNatConfig", &SWIGTYPE_p_pj__AccountNatConfig,_proxy__wrap_new_AccountNatConfig, swig_delete_AccountNatConfig, swig_AccountNatConfig_methods, swig_AccountNatConfig_attributes, &swig_AccountNatConfig_Sf_SwigStatic, swig_AccountNatConfig_meta, swig_AccountNatConfig_bases, swig_AccountNatConfig_base_names };

static int _wrap_AccountMediaConfig_transportConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *arg2 = (pj::TransportConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::transportConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::transportConfig",1,"pj::AccountMediaConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::transportConfig",2,"pj::TransportConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_transportConfig_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_transportConfig_set",2,SWIGTYPE_p_pj__TransportConfig);
  }
  
  if (arg1) (arg1)->transportConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_transportConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::transportConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::transportConfig",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_transportConfig_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (pj::TransportConfig *)& ((arg1)->transportConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TransportConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_lockCodecEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::lockCodecEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::lockCodecEnabled",1,"pj::AccountMediaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::lockCodecEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_lockCodecEnabled_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->lockCodecEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_lockCodecEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountMediaConfig::lockCodecEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::lockCodecEnabled",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_lockCodecEnabled_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (bool) ((arg1)->lockCodecEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_streamKaEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::streamKaEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::streamKaEnabled",1,"pj::AccountMediaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::streamKaEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_streamKaEnabled_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->streamKaEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_streamKaEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountMediaConfig::streamKaEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::streamKaEnabled",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_streamKaEnabled_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (bool) ((arg1)->streamKaEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_srtpUse_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::srtpUse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::srtpUse",1,"pj::AccountMediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::srtpUse",2,"pjmedia_srtp_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_srtpUse_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  arg2 = (pjmedia_srtp_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->srtpUse = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_srtpUse_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use result;
  
  SWIG_check_num_args("pj::AccountMediaConfig::srtpUse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::srtpUse",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_srtpUse_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_srtpSecureSignaling_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::srtpSecureSignaling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::srtpSecureSignaling",1,"pj::AccountMediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::srtpSecureSignaling",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_srtpSecureSignaling_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->srtpSecureSignaling = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_srtpSecureSignaling_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountMediaConfig::srtpSecureSignaling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::srtpSecureSignaling",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_srtpSecureSignaling_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (int) ((arg1)->srtpSecureSignaling);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_ipv6Use_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use arg2 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::ipv6Use",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::ipv6Use",1,"pj::AccountMediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::ipv6Use",2,"pjsua_ipv6_use");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_ipv6Use_set",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  arg2 = (pjsua_ipv6_use)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ipv6Use = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_ipv6Use_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use result;
  
  SWIG_check_num_args("pj::AccountMediaConfig::ipv6Use",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::ipv6Use",1,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_ipv6Use_get",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  result = (pjsua_ipv6_use) ((arg1)->ipv6Use);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::readObject",1,"pj::AccountMediaConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_readObject",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountMediaConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountMediaConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountMediaConfig::writeObject",1,"pj::AccountMediaConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountMediaConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountMediaConfig_writeObject",1,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountMediaConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountMediaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountMediaConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountMediaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountMediaConfig::AccountMediaConfig",0,0)
  result = (pj::AccountMediaConfig *)new pj::AccountMediaConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountMediaConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountMediaConfig(void *obj) {
pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountMediaConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountMediaConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountMediaConfig_attributes[] = {
    { "transportConfig", _wrap_AccountMediaConfig_transportConfig_get, _wrap_AccountMediaConfig_transportConfig_set },
    { "lockCodecEnabled", _wrap_AccountMediaConfig_lockCodecEnabled_get, _wrap_AccountMediaConfig_lockCodecEnabled_set },
    { "streamKaEnabled", _wrap_AccountMediaConfig_streamKaEnabled_get, _wrap_AccountMediaConfig_streamKaEnabled_set },
    { "srtpUse", _wrap_AccountMediaConfig_srtpUse_get, _wrap_AccountMediaConfig_srtpUse_set },
    { "srtpSecureSignaling", _wrap_AccountMediaConfig_srtpSecureSignaling_get, _wrap_AccountMediaConfig_srtpSecureSignaling_set },
    { "ipv6Use", _wrap_AccountMediaConfig_ipv6Use_get, _wrap_AccountMediaConfig_ipv6Use_set },
    {0,0,0}
};
static swig_lua_method swig_AccountMediaConfig_methods[]= {
    { "readObject", _wrap_AccountMediaConfig_readObject},
    { "writeObject", _wrap_AccountMediaConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountMediaConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountMediaConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountMediaConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountMediaConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountMediaConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountMediaConfig_Sf_SwigStatic = {
    "AccountMediaConfig",
    swig_AccountMediaConfig_Sf_SwigStatic_methods,
    swig_AccountMediaConfig_Sf_SwigStatic_attributes,
    swig_AccountMediaConfig_Sf_SwigStatic_constants,
    swig_AccountMediaConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountMediaConfig_bases[] = {0,0};
static const char *swig_AccountMediaConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountMediaConfig = { "AccountMediaConfig", "AccountMediaConfig", &SWIGTYPE_p_pj__AccountMediaConfig,_proxy__wrap_new_AccountMediaConfig, swig_delete_AccountMediaConfig, swig_AccountMediaConfig_methods, swig_AccountMediaConfig_attributes, &swig_AccountMediaConfig_Sf_SwigStatic, swig_AccountMediaConfig_meta, swig_AccountMediaConfig_bases, swig_AccountMediaConfig_base_names };

static int _wrap_AccountVideoConfig_autoShowIncoming_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::autoShowIncoming",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::autoShowIncoming",1,"pj::AccountVideoConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::autoShowIncoming",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_autoShowIncoming_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->autoShowIncoming = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_autoShowIncoming_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::autoShowIncoming",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::autoShowIncoming",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_autoShowIncoming_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (bool) ((arg1)->autoShowIncoming);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_autoTransmitOutgoing_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::autoTransmitOutgoing",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::autoTransmitOutgoing",1,"pj::AccountVideoConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::autoTransmitOutgoing",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_autoTransmitOutgoing_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->autoTransmitOutgoing = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_autoTransmitOutgoing_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::autoTransmitOutgoing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::autoTransmitOutgoing",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_autoTransmitOutgoing_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (bool) ((arg1)->autoTransmitOutgoing);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_windowFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::windowFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::windowFlags",1,"pj::AccountVideoConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::windowFlags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_windowFlags_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->windowFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_windowFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::windowFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::windowFlags",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_windowFlags_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (unsigned int) ((arg1)->windowFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_defaultCaptureDevice_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::defaultCaptureDevice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::defaultCaptureDevice",1,"pj::AccountVideoConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::defaultCaptureDevice",2,"pjmedia_vid_dev_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_defaultCaptureDevice_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  arg2 = (pjmedia_vid_dev_index)lua_tonumber(L, 2);
  if (arg1) (arg1)->defaultCaptureDevice = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_defaultCaptureDevice_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::defaultCaptureDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::defaultCaptureDevice",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_defaultCaptureDevice_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (pjmedia_vid_dev_index) ((arg1)->defaultCaptureDevice);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_defaultRenderDevice_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::defaultRenderDevice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::defaultRenderDevice",1,"pj::AccountVideoConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::defaultRenderDevice",2,"pjmedia_vid_dev_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_defaultRenderDevice_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  arg2 = (pjmedia_vid_dev_index)lua_tonumber(L, 2);
  if (arg1) (arg1)->defaultRenderDevice = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_defaultRenderDevice_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::defaultRenderDevice",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::defaultRenderDevice",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_defaultRenderDevice_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (pjmedia_vid_dev_index) ((arg1)->defaultRenderDevice);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_rateControlMethod_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::rateControlMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlMethod",1,"pj::AccountVideoConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlMethod",2,"pjmedia_vid_stream_rc_method");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_rateControlMethod_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  arg2 = (pjmedia_vid_stream_rc_method)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rateControlMethod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_rateControlMethod_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::rateControlMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlMethod",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_rateControlMethod_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (pjmedia_vid_stream_rc_method) ((arg1)->rateControlMethod);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_rateControlBandwidth_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::rateControlBandwidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlBandwidth",1,"pj::AccountVideoConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlBandwidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_rateControlBandwidth_set",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rateControlBandwidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_rateControlBandwidth_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::AccountVideoConfig::rateControlBandwidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::rateControlBandwidth",1,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_rateControlBandwidth_get",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  result = (unsigned int) ((arg1)->rateControlBandwidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::readObject",1,"pj::AccountVideoConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_readObject",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountVideoConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountVideoConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountVideoConfig::writeObject",1,"pj::AccountVideoConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountVideoConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountVideoConfig_writeObject",1,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountVideoConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountVideoConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountVideoConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountVideoConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountVideoConfig::AccountVideoConfig",0,0)
  result = (pj::AccountVideoConfig *)new pj::AccountVideoConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountVideoConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountVideoConfig(void *obj) {
pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountVideoConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountVideoConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountVideoConfig_attributes[] = {
    { "autoShowIncoming", _wrap_AccountVideoConfig_autoShowIncoming_get, _wrap_AccountVideoConfig_autoShowIncoming_set },
    { "autoTransmitOutgoing", _wrap_AccountVideoConfig_autoTransmitOutgoing_get, _wrap_AccountVideoConfig_autoTransmitOutgoing_set },
    { "windowFlags", _wrap_AccountVideoConfig_windowFlags_get, _wrap_AccountVideoConfig_windowFlags_set },
    { "defaultCaptureDevice", _wrap_AccountVideoConfig_defaultCaptureDevice_get, _wrap_AccountVideoConfig_defaultCaptureDevice_set },
    { "defaultRenderDevice", _wrap_AccountVideoConfig_defaultRenderDevice_get, _wrap_AccountVideoConfig_defaultRenderDevice_set },
    { "rateControlMethod", _wrap_AccountVideoConfig_rateControlMethod_get, _wrap_AccountVideoConfig_rateControlMethod_set },
    { "rateControlBandwidth", _wrap_AccountVideoConfig_rateControlBandwidth_get, _wrap_AccountVideoConfig_rateControlBandwidth_set },
    {0,0,0}
};
static swig_lua_method swig_AccountVideoConfig_methods[]= {
    { "readObject", _wrap_AccountVideoConfig_readObject},
    { "writeObject", _wrap_AccountVideoConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountVideoConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountVideoConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountVideoConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountVideoConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountVideoConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountVideoConfig_Sf_SwigStatic = {
    "AccountVideoConfig",
    swig_AccountVideoConfig_Sf_SwigStatic_methods,
    swig_AccountVideoConfig_Sf_SwigStatic_attributes,
    swig_AccountVideoConfig_Sf_SwigStatic_constants,
    swig_AccountVideoConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountVideoConfig_bases[] = {0,0};
static const char *swig_AccountVideoConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountVideoConfig = { "AccountVideoConfig", "AccountVideoConfig", &SWIGTYPE_p_pj__AccountVideoConfig,_proxy__wrap_new_AccountVideoConfig, swig_delete_AccountVideoConfig, swig_AccountVideoConfig_methods, swig_AccountVideoConfig_attributes, &swig_AccountVideoConfig_Sf_SwigStatic, swig_AccountVideoConfig_meta, swig_AccountVideoConfig_bases, swig_AccountVideoConfig_base_names };

static int _wrap_AccountConfig_priority_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountConfig::priority",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::priority",1,"pj::AccountConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountConfig::priority",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_priority_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->priority = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_priority_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountConfig::priority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::priority",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_priority_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (int) ((arg1)->priority);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_idUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountConfig::idUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::idUri",1,"pj::AccountConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountConfig::idUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_idUri_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->idUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_idUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::idUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::idUri",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_idUri_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::string *) & ((arg1)->idUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_regConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *arg2 = (pj::AccountRegConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::regConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::regConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::regConfig",2,"pj::AccountRegConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_regConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountRegConfig,0))){
    SWIG_fail_ptr("AccountConfig_regConfig_set",2,SWIGTYPE_p_pj__AccountRegConfig);
  }
  
  if (arg1) (arg1)->regConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_regConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::regConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::regConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_regConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountRegConfig *)& ((arg1)->regConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountRegConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_sipConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *arg2 = (pj::AccountSipConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::sipConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::sipConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::sipConfig",2,"pj::AccountSipConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_sipConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountSipConfig,0))){
    SWIG_fail_ptr("AccountConfig_sipConfig_set",2,SWIGTYPE_p_pj__AccountSipConfig);
  }
  
  if (arg1) (arg1)->sipConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_sipConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::sipConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::sipConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_sipConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountSipConfig *)& ((arg1)->sipConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountSipConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_callConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *arg2 = (pj::AccountCallConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::callConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::callConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::callConfig",2,"pj::AccountCallConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_callConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountCallConfig,0))){
    SWIG_fail_ptr("AccountConfig_callConfig_set",2,SWIGTYPE_p_pj__AccountCallConfig);
  }
  
  if (arg1) (arg1)->callConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_callConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::callConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::callConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_callConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountCallConfig *)& ((arg1)->callConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountCallConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_presConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *arg2 = (pj::AccountPresConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::presConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::presConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::presConfig",2,"pj::AccountPresConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_presConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountPresConfig,0))){
    SWIG_fail_ptr("AccountConfig_presConfig_set",2,SWIGTYPE_p_pj__AccountPresConfig);
  }
  
  if (arg1) (arg1)->presConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_presConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::presConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::presConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_presConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountPresConfig *)& ((arg1)->presConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountPresConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_mwiConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *arg2 = (pj::AccountMwiConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::mwiConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::mwiConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::mwiConfig",2,"pj::AccountMwiConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_mwiConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountMwiConfig,0))){
    SWIG_fail_ptr("AccountConfig_mwiConfig_set",2,SWIGTYPE_p_pj__AccountMwiConfig);
  }
  
  if (arg1) (arg1)->mwiConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_mwiConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::mwiConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::mwiConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_mwiConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountMwiConfig *)& ((arg1)->mwiConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountMwiConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_natConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *arg2 = (pj::AccountNatConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::natConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::natConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::natConfig",2,"pj::AccountNatConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_natConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountNatConfig,0))){
    SWIG_fail_ptr("AccountConfig_natConfig_set",2,SWIGTYPE_p_pj__AccountNatConfig);
  }
  
  if (arg1) (arg1)->natConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_natConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::natConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::natConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_natConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountNatConfig *)& ((arg1)->natConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountNatConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_mediaConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *arg2 = (pj::AccountMediaConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::mediaConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::mediaConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::mediaConfig",2,"pj::AccountMediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_mediaConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountMediaConfig,0))){
    SWIG_fail_ptr("AccountConfig_mediaConfig_set",2,SWIGTYPE_p_pj__AccountMediaConfig);
  }
  
  if (arg1) (arg1)->mediaConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_mediaConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::mediaConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::mediaConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_mediaConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountMediaConfig *)& ((arg1)->mediaConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountMediaConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_videoConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *arg2 = (pj::AccountVideoConfig *) 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::videoConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::videoConfig",1,"pj::AccountConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::AccountConfig::videoConfig",2,"pj::AccountVideoConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_videoConfig_set",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountVideoConfig,0))){
    SWIG_fail_ptr("AccountConfig_videoConfig_set",2,SWIGTYPE_p_pj__AccountVideoConfig);
  }
  
  if (arg1) (arg1)->videoConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_videoConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::videoConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::videoConfig",1,"pj::AccountConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_videoConfig_get",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  result = (pj::AccountVideoConfig *)& ((arg1)->videoConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountVideoConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *result = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::AccountConfig",0,0)
  result = (pj::AccountConfig *)new pj::AccountConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::readObject",1,"pj::AccountConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_readObject",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::AccountConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountConfig::writeObject",1,"pj::AccountConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::AccountConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("AccountConfig_writeObject",1,SWIGTYPE_p_pj__AccountConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("AccountConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::AccountConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountConfig(void *obj) {
pj::AccountConfig *arg1 = (pj::AccountConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountConfig_attributes[] = {
    { "priority", _wrap_AccountConfig_priority_get, _wrap_AccountConfig_priority_set },
    { "idUri", _wrap_AccountConfig_idUri_get, _wrap_AccountConfig_idUri_set },
    { "regConfig", _wrap_AccountConfig_regConfig_get, _wrap_AccountConfig_regConfig_set },
    { "sipConfig", _wrap_AccountConfig_sipConfig_get, _wrap_AccountConfig_sipConfig_set },
    { "callConfig", _wrap_AccountConfig_callConfig_get, _wrap_AccountConfig_callConfig_set },
    { "presConfig", _wrap_AccountConfig_presConfig_get, _wrap_AccountConfig_presConfig_set },
    { "mwiConfig", _wrap_AccountConfig_mwiConfig_get, _wrap_AccountConfig_mwiConfig_set },
    { "natConfig", _wrap_AccountConfig_natConfig_get, _wrap_AccountConfig_natConfig_set },
    { "mediaConfig", _wrap_AccountConfig_mediaConfig_get, _wrap_AccountConfig_mediaConfig_set },
    { "videoConfig", _wrap_AccountConfig_videoConfig_get, _wrap_AccountConfig_videoConfig_set },
    {0,0,0}
};
static swig_lua_method swig_AccountConfig_methods[]= {
    { "readObject", _wrap_AccountConfig_readObject},
    { "writeObject", _wrap_AccountConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_AccountConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountConfig_Sf_SwigStatic = {
    "AccountConfig",
    swig_AccountConfig_Sf_SwigStatic_methods,
    swig_AccountConfig_Sf_SwigStatic_attributes,
    swig_AccountConfig_Sf_SwigStatic_constants,
    swig_AccountConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountConfig_bases[] = {0,0};
static const char *swig_AccountConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_AccountConfig = { "AccountConfig", "AccountConfig", &SWIGTYPE_p_pj__AccountConfig,_proxy__wrap_new_AccountConfig, swig_delete_AccountConfig, swig_AccountConfig_methods, swig_AccountConfig_attributes, &swig_AccountConfig_Sf_SwigStatic, swig_AccountConfig_meta, swig_AccountConfig_bases, swig_AccountConfig_base_names };

static int _wrap_AccountInfo_id_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::id",1,"pj::AccountInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountInfo::id",2,"pjsua_acc_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_id_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (pjsua_acc_id)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_id_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id result;
  
  SWIG_check_num_args("pj::AccountInfo::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::id",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_id_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pjsua_acc_id) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_isDefault_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::isDefault",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::isDefault",1,"pj::AccountInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountInfo::isDefault",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_isDefault_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isDefault = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_isDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountInfo::isDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::isDefault",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_isDefault_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (bool) ((arg1)->isDefault);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_uri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountInfo::uri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::uri",1,"pj::AccountInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountInfo::uri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_uri_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->uri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_uri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountInfo::uri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::uri",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_uri_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pj::string *) & ((arg1)->uri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regIsConfigured_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regIsConfigured",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regIsConfigured",1,"pj::AccountInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountInfo::regIsConfigured",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regIsConfigured_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->regIsConfigured = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regIsConfigured_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountInfo::regIsConfigured",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regIsConfigured",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regIsConfigured_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (bool) ((arg1)->regIsConfigured);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regIsActive_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regIsActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regIsActive",1,"pj::AccountInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountInfo::regIsActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regIsActive_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->regIsActive = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regIsActive_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountInfo::regIsActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regIsActive",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regIsActive_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (bool) ((arg1)->regIsActive);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regExpiresSec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regExpiresSec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regExpiresSec",1,"pj::AccountInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountInfo::regExpiresSec",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regExpiresSec_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->regExpiresSec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regExpiresSec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::AccountInfo::regExpiresSec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regExpiresSec",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regExpiresSec_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (int) ((arg1)->regExpiresSec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regStatus_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regStatus",1,"pj::AccountInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountInfo::regStatus",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regStatus_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->regStatus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regStatus_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::AccountInfo::regStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regStatus",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regStatus_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pjsip_status_code) ((arg1)->regStatus);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regStatusText_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regStatusText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regStatusText",1,"pj::AccountInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountInfo::regStatusText",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regStatusText_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->regStatusText = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regStatusText_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountInfo::regStatusText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regStatusText",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regStatusText_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pj::string *) & ((arg1)->regStatusText);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regLastErr_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::regLastErr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regLastErr",1,"pj::AccountInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::AccountInfo::regLastErr",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regLastErr_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->regLastErr = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_regLastErr_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::AccountInfo::regLastErr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::regLastErr",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_regLastErr_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pj_status_t) ((arg1)->regLastErr);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_onlineStatus_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::AccountInfo::onlineStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::onlineStatus",1,"pj::AccountInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::AccountInfo::onlineStatus",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_onlineStatus_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->onlineStatus = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_onlineStatus_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::AccountInfo::onlineStatus",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::onlineStatus",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_onlineStatus_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (bool) ((arg1)->onlineStatus);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_onlineStatusText_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::AccountInfo::onlineStatusText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::onlineStatusText",1,"pj::AccountInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::AccountInfo::onlineStatusText",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_onlineStatusText_set",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->onlineStatusText = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AccountInfo_onlineStatusText_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::AccountInfo::onlineStatusText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::AccountInfo::onlineStatusText",1,"pj::AccountInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__AccountInfo,0))){
    SWIG_fail_ptr("AccountInfo_onlineStatusText_get",1,SWIGTYPE_p_pj__AccountInfo);
  }
  
  result = (pj::string *) & ((arg1)->onlineStatusText);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AccountInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::AccountInfo *result = 0 ;
  
  SWIG_check_num_args("pj::AccountInfo::AccountInfo",0,0)
  result = (pj::AccountInfo *)new pj::AccountInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AccountInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AccountInfo(void *obj) {
pj::AccountInfo *arg1 = (pj::AccountInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_AccountInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AccountInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AccountInfo_attributes[] = {
    { "id", _wrap_AccountInfo_id_get, _wrap_AccountInfo_id_set },
    { "isDefault", _wrap_AccountInfo_isDefault_get, _wrap_AccountInfo_isDefault_set },
    { "uri", _wrap_AccountInfo_uri_get, _wrap_AccountInfo_uri_set },
    { "regIsConfigured", _wrap_AccountInfo_regIsConfigured_get, _wrap_AccountInfo_regIsConfigured_set },
    { "regIsActive", _wrap_AccountInfo_regIsActive_get, _wrap_AccountInfo_regIsActive_set },
    { "regExpiresSec", _wrap_AccountInfo_regExpiresSec_get, _wrap_AccountInfo_regExpiresSec_set },
    { "regStatus", _wrap_AccountInfo_regStatus_get, _wrap_AccountInfo_regStatus_set },
    { "regStatusText", _wrap_AccountInfo_regStatusText_get, _wrap_AccountInfo_regStatusText_set },
    { "regLastErr", _wrap_AccountInfo_regLastErr_get, _wrap_AccountInfo_regLastErr_set },
    { "onlineStatus", _wrap_AccountInfo_onlineStatus_get, _wrap_AccountInfo_onlineStatus_set },
    { "onlineStatusText", _wrap_AccountInfo_onlineStatusText_get, _wrap_AccountInfo_onlineStatusText_set },
    {0,0,0}
};
static swig_lua_method swig_AccountInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_AccountInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AccountInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AccountInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AccountInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AccountInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AccountInfo_Sf_SwigStatic = {
    "AccountInfo",
    swig_AccountInfo_Sf_SwigStatic_methods,
    swig_AccountInfo_Sf_SwigStatic_attributes,
    swig_AccountInfo_Sf_SwigStatic_constants,
    swig_AccountInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AccountInfo_bases[] = {0};
static const char *swig_AccountInfo_base_names[] = {0};
static swig_lua_class _wrap_class_AccountInfo = { "AccountInfo", "AccountInfo", &SWIGTYPE_p_pj__AccountInfo,_proxy__wrap_new_AccountInfo, swig_delete_AccountInfo, swig_AccountInfo_methods, swig_AccountInfo_attributes, &swig_AccountInfo_Sf_SwigStatic, swig_AccountInfo_meta, swig_AccountInfo_bases, swig_AccountInfo_base_names };

static int _wrap_OnIncomingCallParam_callId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::OnIncomingCallParam::callId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingCallParam::callId",1,"pj::OnIncomingCallParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnIncomingCallParam::callId",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingCallParam,0))){
    SWIG_fail_ptr("OnIncomingCallParam_callId_set",1,SWIGTYPE_p_pj__OnIncomingCallParam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->callId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingCallParam_callId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::OnIncomingCallParam::callId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingCallParam::callId",1,"pj::OnIncomingCallParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingCallParam,0))){
    SWIG_fail_ptr("OnIncomingCallParam_callId_get",1,SWIGTYPE_p_pj__OnIncomingCallParam);
  }
  
  result = (int) ((arg1)->callId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingCallParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnIncomingCallParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingCallParam::rdata",1,"pj::OnIncomingCallParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnIncomingCallParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingCallParam,0))){
    SWIG_fail_ptr("OnIncomingCallParam_rdata_set",1,SWIGTYPE_p_pj__OnIncomingCallParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnIncomingCallParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingCallParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingCallParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingCallParam::rdata",1,"pj::OnIncomingCallParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingCallParam,0))){
    SWIG_fail_ptr("OnIncomingCallParam_rdata_get",1,SWIGTYPE_p_pj__OnIncomingCallParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnIncomingCallParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingCallParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingCallParam::OnIncomingCallParam",0,0)
  result = (pj::OnIncomingCallParam *)new pj::OnIncomingCallParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnIncomingCallParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnIncomingCallParam(void *obj) {
pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnIncomingCallParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnIncomingCallParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnIncomingCallParam_attributes[] = {
    { "callId", _wrap_OnIncomingCallParam_callId_get, _wrap_OnIncomingCallParam_callId_set },
    { "rdata", _wrap_OnIncomingCallParam_rdata_get, _wrap_OnIncomingCallParam_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_OnIncomingCallParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnIncomingCallParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnIncomingCallParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnIncomingCallParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnIncomingCallParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnIncomingCallParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnIncomingCallParam_Sf_SwigStatic = {
    "OnIncomingCallParam",
    swig_OnIncomingCallParam_Sf_SwigStatic_methods,
    swig_OnIncomingCallParam_Sf_SwigStatic_attributes,
    swig_OnIncomingCallParam_Sf_SwigStatic_constants,
    swig_OnIncomingCallParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnIncomingCallParam_bases[] = {0};
static const char *swig_OnIncomingCallParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnIncomingCallParam = { "OnIncomingCallParam", "OnIncomingCallParam", &SWIGTYPE_p_pj__OnIncomingCallParam,_proxy__wrap_new_OnIncomingCallParam, swig_delete_OnIncomingCallParam, swig_OnIncomingCallParam_methods, swig_OnIncomingCallParam_attributes, &swig_OnIncomingCallParam_Sf_SwigStatic, swig_OnIncomingCallParam_meta, swig_OnIncomingCallParam_bases, swig_OnIncomingCallParam_base_names };

static int _wrap_OnRegStartedParam_renew_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::OnRegStartedParam::renew",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStartedParam::renew",1,"pj::OnRegStartedParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::OnRegStartedParam::renew",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStartedParam,0))){
    SWIG_fail_ptr("OnRegStartedParam_renew_set",1,SWIGTYPE_p_pj__OnRegStartedParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->renew = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStartedParam_renew_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::OnRegStartedParam::renew",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStartedParam::renew",1,"pj::OnRegStartedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStartedParam,0))){
    SWIG_fail_ptr("OnRegStartedParam_renew_get",1,SWIGTYPE_p_pj__OnRegStartedParam);
  }
  
  result = (bool) ((arg1)->renew);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnRegStartedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStartedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnRegStartedParam::OnRegStartedParam",0,0)
  result = (pj::OnRegStartedParam *)new pj::OnRegStartedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnRegStartedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnRegStartedParam(void *obj) {
pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnRegStartedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnRegStartedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnRegStartedParam_attributes[] = {
    { "renew", _wrap_OnRegStartedParam_renew_get, _wrap_OnRegStartedParam_renew_set },
    {0,0,0}
};
static swig_lua_method swig_OnRegStartedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnRegStartedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnRegStartedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnRegStartedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnRegStartedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnRegStartedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnRegStartedParam_Sf_SwigStatic = {
    "OnRegStartedParam",
    swig_OnRegStartedParam_Sf_SwigStatic_methods,
    swig_OnRegStartedParam_Sf_SwigStatic_attributes,
    swig_OnRegStartedParam_Sf_SwigStatic_constants,
    swig_OnRegStartedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnRegStartedParam_bases[] = {0};
static const char *swig_OnRegStartedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnRegStartedParam = { "OnRegStartedParam", "OnRegStartedParam", &SWIGTYPE_p_pj__OnRegStartedParam,_proxy__wrap_new_OnRegStartedParam, swig_delete_OnRegStartedParam, swig_OnRegStartedParam_methods, swig_OnRegStartedParam_attributes, &swig_OnRegStartedParam_Sf_SwigStatic, swig_OnRegStartedParam_meta, swig_OnRegStartedParam_bases, swig_OnRegStartedParam_base_names };

static int _wrap_OnRegStateParam_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::status",1,"pj::OnRegStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnRegStateParam::status",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_status_set",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::OnRegStateParam::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::status",1,"pj::OnRegStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_status_get",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  result = (pj_status_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_code_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::code",1,"pj::OnRegStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnRegStateParam::code",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_code_set",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_code_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnRegStateParam::code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::code",1,"pj::OnRegStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_code_get",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  result = (pjsip_status_code) ((arg1)->code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::reason",1,"pj::OnRegStateParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnRegStateParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_reason_set",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::reason",1,"pj::OnRegStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_reason_get",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::rdata",1,"pj::OnRegStateParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnRegStateParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_rdata_set",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnRegStateParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::rdata",1,"pj::OnRegStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_rdata_get",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_expiration_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::expiration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::expiration",1,"pj::OnRegStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnRegStateParam::expiration",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_expiration_set",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->expiration = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnRegStateParam_expiration_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::OnRegStateParam::expiration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnRegStateParam::expiration",1,"pj::OnRegStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("OnRegStateParam_expiration_get",1,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  result = (int) ((arg1)->expiration);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnRegStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnRegStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnRegStateParam::OnRegStateParam",0,0)
  result = (pj::OnRegStateParam *)new pj::OnRegStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnRegStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnRegStateParam(void *obj) {
pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnRegStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnRegStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnRegStateParam_attributes[] = {
    { "status", _wrap_OnRegStateParam_status_get, _wrap_OnRegStateParam_status_set },
    { "code", _wrap_OnRegStateParam_code_get, _wrap_OnRegStateParam_code_set },
    { "reason", _wrap_OnRegStateParam_reason_get, _wrap_OnRegStateParam_reason_set },
    { "rdata", _wrap_OnRegStateParam_rdata_get, _wrap_OnRegStateParam_rdata_set },
    { "expiration", _wrap_OnRegStateParam_expiration_get, _wrap_OnRegStateParam_expiration_set },
    {0,0,0}
};
static swig_lua_method swig_OnRegStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnRegStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnRegStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnRegStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnRegStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnRegStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnRegStateParam_Sf_SwigStatic = {
    "OnRegStateParam",
    swig_OnRegStateParam_Sf_SwigStatic_methods,
    swig_OnRegStateParam_Sf_SwigStatic_attributes,
    swig_OnRegStateParam_Sf_SwigStatic_constants,
    swig_OnRegStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnRegStateParam_bases[] = {0};
static const char *swig_OnRegStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnRegStateParam = { "OnRegStateParam", "OnRegStateParam", &SWIGTYPE_p_pj__OnRegStateParam,_proxy__wrap_new_OnRegStateParam, swig_delete_OnRegStateParam, swig_OnRegStateParam_methods, swig_OnRegStateParam_attributes, &swig_OnRegStateParam_Sf_SwigStatic, swig_OnRegStateParam_meta, swig_OnRegStateParam_bases, swig_OnRegStateParam_base_names };

static int _wrap_OnIncomingSubscribeParam_srvPres_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::srvPres",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::srvPres",1,"pj::OnIncomingSubscribeParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::srvPres",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_srvPres_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"OnIncomingSubscribeParam_srvPres_set");
  if (arg1) (arg1)->srvPres = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_srvPres_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::srvPres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::srvPres",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_srvPres_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (void *) ((arg1)->srvPres);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_fromUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::fromUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::fromUri",1,"pj::OnIncomingSubscribeParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::fromUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_fromUri_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->fromUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_fromUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::fromUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::fromUri",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_fromUri_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (pj::string *) & ((arg1)->fromUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::rdata",1,"pj::OnIncomingSubscribeParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_rdata_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::rdata",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_rdata_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_code_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::code",1,"pj::OnIncomingSubscribeParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::code",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_code_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_code_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::code",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_code_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (pjsip_status_code) ((arg1)->code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::reason",1,"pj::OnIncomingSubscribeParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_reason_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::reason",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_reason_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::txOption",1,"pj::OnIncomingSubscribeParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_txOption_set",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnIncomingSubscribeParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnIncomingSubscribeParam::txOption",1,"pj::OnIncomingSubscribeParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("OnIncomingSubscribeParam_txOption_get",1,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnIncomingSubscribeParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnIncomingSubscribeParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnIncomingSubscribeParam::OnIncomingSubscribeParam",0,0)
  result = (pj::OnIncomingSubscribeParam *)new pj::OnIncomingSubscribeParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnIncomingSubscribeParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnIncomingSubscribeParam(void *obj) {
pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnIncomingSubscribeParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnIncomingSubscribeParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnIncomingSubscribeParam_attributes[] = {
    { "srvPres", _wrap_OnIncomingSubscribeParam_srvPres_get, _wrap_OnIncomingSubscribeParam_srvPres_set },
    { "fromUri", _wrap_OnIncomingSubscribeParam_fromUri_get, _wrap_OnIncomingSubscribeParam_fromUri_set },
    { "rdata", _wrap_OnIncomingSubscribeParam_rdata_get, _wrap_OnIncomingSubscribeParam_rdata_set },
    { "code", _wrap_OnIncomingSubscribeParam_code_get, _wrap_OnIncomingSubscribeParam_code_set },
    { "reason", _wrap_OnIncomingSubscribeParam_reason_get, _wrap_OnIncomingSubscribeParam_reason_set },
    { "txOption", _wrap_OnIncomingSubscribeParam_txOption_get, _wrap_OnIncomingSubscribeParam_txOption_set },
    {0,0,0}
};
static swig_lua_method swig_OnIncomingSubscribeParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnIncomingSubscribeParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnIncomingSubscribeParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnIncomingSubscribeParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnIncomingSubscribeParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnIncomingSubscribeParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnIncomingSubscribeParam_Sf_SwigStatic = {
    "OnIncomingSubscribeParam",
    swig_OnIncomingSubscribeParam_Sf_SwigStatic_methods,
    swig_OnIncomingSubscribeParam_Sf_SwigStatic_attributes,
    swig_OnIncomingSubscribeParam_Sf_SwigStatic_constants,
    swig_OnIncomingSubscribeParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnIncomingSubscribeParam_bases[] = {0};
static const char *swig_OnIncomingSubscribeParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnIncomingSubscribeParam = { "OnIncomingSubscribeParam", "OnIncomingSubscribeParam", &SWIGTYPE_p_pj__OnIncomingSubscribeParam,_proxy__wrap_new_OnIncomingSubscribeParam, swig_delete_OnIncomingSubscribeParam, swig_OnIncomingSubscribeParam_methods, swig_OnIncomingSubscribeParam_attributes, &swig_OnIncomingSubscribeParam_Sf_SwigStatic, swig_OnIncomingSubscribeParam_meta, swig_OnIncomingSubscribeParam_bases, swig_OnIncomingSubscribeParam_base_names };

static int _wrap_OnInstantMessageParam_fromUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::fromUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::fromUri",1,"pj::OnInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::fromUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_fromUri_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->fromUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_fromUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::fromUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::fromUri",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_fromUri_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->fromUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_toUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::toUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::toUri",1,"pj::OnInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::toUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_toUri_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->toUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_toUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::toUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::toUri",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_toUri_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->toUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_contactUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::contactUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::contactUri",1,"pj::OnInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::contactUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_contactUri_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contactUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_contactUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::contactUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::contactUri",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_contactUri_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->contactUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_contentType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::contentType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::contentType",1,"pj::OnInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::contentType",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_contentType_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contentType = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_contentType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::contentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::contentType",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_contentType_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->contentType);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_msgBody_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::msgBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::msgBody",1,"pj::OnInstantMessageParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::msgBody",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_msgBody_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->msgBody = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_msgBody_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::msgBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::msgBody",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_msgBody_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::string *) & ((arg1)->msgBody);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::rdata",1,"pj::OnInstantMessageParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnInstantMessageParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_rdata_set",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnInstantMessageParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageParam::rdata",1,"pj::OnInstantMessageParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("OnInstantMessageParam_rdata_get",1,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnInstantMessageParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageParam::OnInstantMessageParam",0,0)
  result = (pj::OnInstantMessageParam *)new pj::OnInstantMessageParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnInstantMessageParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnInstantMessageParam(void *obj) {
pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnInstantMessageParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnInstantMessageParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnInstantMessageParam_attributes[] = {
    { "fromUri", _wrap_OnInstantMessageParam_fromUri_get, _wrap_OnInstantMessageParam_fromUri_set },
    { "toUri", _wrap_OnInstantMessageParam_toUri_get, _wrap_OnInstantMessageParam_toUri_set },
    { "contactUri", _wrap_OnInstantMessageParam_contactUri_get, _wrap_OnInstantMessageParam_contactUri_set },
    { "contentType", _wrap_OnInstantMessageParam_contentType_get, _wrap_OnInstantMessageParam_contentType_set },
    { "msgBody", _wrap_OnInstantMessageParam_msgBody_get, _wrap_OnInstantMessageParam_msgBody_set },
    { "rdata", _wrap_OnInstantMessageParam_rdata_get, _wrap_OnInstantMessageParam_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_OnInstantMessageParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnInstantMessageParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnInstantMessageParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnInstantMessageParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnInstantMessageParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnInstantMessageParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnInstantMessageParam_Sf_SwigStatic = {
    "OnInstantMessageParam",
    swig_OnInstantMessageParam_Sf_SwigStatic_methods,
    swig_OnInstantMessageParam_Sf_SwigStatic_attributes,
    swig_OnInstantMessageParam_Sf_SwigStatic_constants,
    swig_OnInstantMessageParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnInstantMessageParam_bases[] = {0};
static const char *swig_OnInstantMessageParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnInstantMessageParam = { "OnInstantMessageParam", "OnInstantMessageParam", &SWIGTYPE_p_pj__OnInstantMessageParam,_proxy__wrap_new_OnInstantMessageParam, swig_delete_OnInstantMessageParam, swig_OnInstantMessageParam_methods, swig_OnInstantMessageParam_attributes, &swig_OnInstantMessageParam_Sf_SwigStatic, swig_OnInstantMessageParam_meta, swig_OnInstantMessageParam_bases, swig_OnInstantMessageParam_base_names };

static int _wrap_OnInstantMessageStatusParam_userData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::userData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::userData",1,"pj::OnInstantMessageStatusParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::userData",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_userData_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"OnInstantMessageStatusParam_userData_set");
  if (arg1) (arg1)->userData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_userData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::userData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::userData",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_userData_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pj::Token) ((arg1)->userData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_toUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::toUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::toUri",1,"pj::OnInstantMessageStatusParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::toUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_toUri_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->toUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_toUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::toUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::toUri",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_toUri_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pj::string *) & ((arg1)->toUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_msgBody_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::msgBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::msgBody",1,"pj::OnInstantMessageStatusParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::msgBody",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_msgBody_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->msgBody = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_msgBody_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::msgBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::msgBody",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_msgBody_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pj::string *) & ((arg1)->msgBody);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_code_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::code",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::code",1,"pj::OnInstantMessageStatusParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::code",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_code_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->code = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_code_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::code",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_code_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pjsip_status_code) ((arg1)->code);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::reason",1,"pj::OnInstantMessageStatusParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_reason_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::reason",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_reason_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::rdata",1,"pj::OnInstantMessageStatusParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_rdata_set",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnInstantMessageStatusParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnInstantMessageStatusParam::rdata",1,"pj::OnInstantMessageStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("OnInstantMessageStatusParam_rdata_get",1,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnInstantMessageStatusParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnInstantMessageStatusParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnInstantMessageStatusParam::OnInstantMessageStatusParam",0,0)
  result = (pj::OnInstantMessageStatusParam *)new pj::OnInstantMessageStatusParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnInstantMessageStatusParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnInstantMessageStatusParam(void *obj) {
pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnInstantMessageStatusParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnInstantMessageStatusParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnInstantMessageStatusParam_attributes[] = {
    { "userData", _wrap_OnInstantMessageStatusParam_userData_get, _wrap_OnInstantMessageStatusParam_userData_set },
    { "toUri", _wrap_OnInstantMessageStatusParam_toUri_get, _wrap_OnInstantMessageStatusParam_toUri_set },
    { "msgBody", _wrap_OnInstantMessageStatusParam_msgBody_get, _wrap_OnInstantMessageStatusParam_msgBody_set },
    { "code", _wrap_OnInstantMessageStatusParam_code_get, _wrap_OnInstantMessageStatusParam_code_set },
    { "reason", _wrap_OnInstantMessageStatusParam_reason_get, _wrap_OnInstantMessageStatusParam_reason_set },
    { "rdata", _wrap_OnInstantMessageStatusParam_rdata_get, _wrap_OnInstantMessageStatusParam_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_OnInstantMessageStatusParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnInstantMessageStatusParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnInstantMessageStatusParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnInstantMessageStatusParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnInstantMessageStatusParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnInstantMessageStatusParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnInstantMessageStatusParam_Sf_SwigStatic = {
    "OnInstantMessageStatusParam",
    swig_OnInstantMessageStatusParam_Sf_SwigStatic_methods,
    swig_OnInstantMessageStatusParam_Sf_SwigStatic_attributes,
    swig_OnInstantMessageStatusParam_Sf_SwigStatic_constants,
    swig_OnInstantMessageStatusParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnInstantMessageStatusParam_bases[] = {0};
static const char *swig_OnInstantMessageStatusParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnInstantMessageStatusParam = { "OnInstantMessageStatusParam", "OnInstantMessageStatusParam", &SWIGTYPE_p_pj__OnInstantMessageStatusParam,_proxy__wrap_new_OnInstantMessageStatusParam, swig_delete_OnInstantMessageStatusParam, swig_OnInstantMessageStatusParam_methods, swig_OnInstantMessageStatusParam_attributes, &swig_OnInstantMessageStatusParam_Sf_SwigStatic, swig_OnInstantMessageStatusParam_meta, swig_OnInstantMessageStatusParam_bases, swig_OnInstantMessageStatusParam_base_names };

static int _wrap_OnTypingIndicationParam_fromUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::fromUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::fromUri",1,"pj::OnTypingIndicationParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnTypingIndicationParam::fromUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_fromUri_set",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->fromUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_fromUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::fromUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::fromUri",1,"pj::OnTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_fromUri_get",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  result = (pj::string *) & ((arg1)->fromUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_toUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::toUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::toUri",1,"pj::OnTypingIndicationParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnTypingIndicationParam::toUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_toUri_set",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->toUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_toUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::toUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::toUri",1,"pj::OnTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_toUri_get",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  result = (pj::string *) & ((arg1)->toUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_contactUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::contactUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::contactUri",1,"pj::OnTypingIndicationParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnTypingIndicationParam::contactUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_contactUri_set",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->contactUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_contactUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::contactUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::contactUri",1,"pj::OnTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_contactUri_get",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  result = (pj::string *) & ((arg1)->contactUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_isTyping_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::isTyping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::isTyping",1,"pj::OnTypingIndicationParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::OnTypingIndicationParam::isTyping",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_isTyping_set",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->isTyping = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_isTyping_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::isTyping",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::isTyping",1,"pj::OnTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_isTyping_get",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  result = (bool) ((arg1)->isTyping);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::rdata",1,"pj::OnTypingIndicationParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnTypingIndicationParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_rdata_set",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTypingIndicationParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTypingIndicationParam::rdata",1,"pj::OnTypingIndicationParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("OnTypingIndicationParam_rdata_get",1,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnTypingIndicationParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTypingIndicationParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnTypingIndicationParam::OnTypingIndicationParam",0,0)
  result = (pj::OnTypingIndicationParam *)new pj::OnTypingIndicationParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnTypingIndicationParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnTypingIndicationParam(void *obj) {
pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnTypingIndicationParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnTypingIndicationParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnTypingIndicationParam_attributes[] = {
    { "fromUri", _wrap_OnTypingIndicationParam_fromUri_get, _wrap_OnTypingIndicationParam_fromUri_set },
    { "toUri", _wrap_OnTypingIndicationParam_toUri_get, _wrap_OnTypingIndicationParam_toUri_set },
    { "contactUri", _wrap_OnTypingIndicationParam_contactUri_get, _wrap_OnTypingIndicationParam_contactUri_set },
    { "isTyping", _wrap_OnTypingIndicationParam_isTyping_get, _wrap_OnTypingIndicationParam_isTyping_set },
    { "rdata", _wrap_OnTypingIndicationParam_rdata_get, _wrap_OnTypingIndicationParam_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_OnTypingIndicationParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnTypingIndicationParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnTypingIndicationParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnTypingIndicationParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnTypingIndicationParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnTypingIndicationParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnTypingIndicationParam_Sf_SwigStatic = {
    "OnTypingIndicationParam",
    swig_OnTypingIndicationParam_Sf_SwigStatic_methods,
    swig_OnTypingIndicationParam_Sf_SwigStatic_attributes,
    swig_OnTypingIndicationParam_Sf_SwigStatic_constants,
    swig_OnTypingIndicationParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnTypingIndicationParam_bases[] = {0};
static const char *swig_OnTypingIndicationParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnTypingIndicationParam = { "OnTypingIndicationParam", "OnTypingIndicationParam", &SWIGTYPE_p_pj__OnTypingIndicationParam,_proxy__wrap_new_OnTypingIndicationParam, swig_delete_OnTypingIndicationParam, swig_OnTypingIndicationParam_methods, swig_OnTypingIndicationParam_attributes, &swig_OnTypingIndicationParam_Sf_SwigStatic, swig_OnTypingIndicationParam_meta, swig_OnTypingIndicationParam_bases, swig_OnTypingIndicationParam_base_names };

static int _wrap_OnMwiInfoParam_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  SWIG_check_num_args("pj::OnMwiInfoParam::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnMwiInfoParam::state",1,"pj::OnMwiInfoParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnMwiInfoParam::state",2,"pjsip_evsub_state");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnMwiInfoParam,0))){
    SWIG_fail_ptr("OnMwiInfoParam_state_set",1,SWIGTYPE_p_pj__OnMwiInfoParam);
  }
  
  arg2 = (pjsip_evsub_state)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnMwiInfoParam_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state result;
  
  SWIG_check_num_args("pj::OnMwiInfoParam::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnMwiInfoParam::state",1,"pj::OnMwiInfoParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnMwiInfoParam,0))){
    SWIG_fail_ptr("OnMwiInfoParam_state_get",1,SWIGTYPE_p_pj__OnMwiInfoParam);
  }
  
  result = (pjsip_evsub_state) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnMwiInfoParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnMwiInfoParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnMwiInfoParam::rdata",1,"pj::OnMwiInfoParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnMwiInfoParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnMwiInfoParam,0))){
    SWIG_fail_ptr("OnMwiInfoParam_rdata_set",1,SWIGTYPE_p_pj__OnMwiInfoParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnMwiInfoParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnMwiInfoParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnMwiInfoParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnMwiInfoParam::rdata",1,"pj::OnMwiInfoParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnMwiInfoParam,0))){
    SWIG_fail_ptr("OnMwiInfoParam_rdata_get",1,SWIGTYPE_p_pj__OnMwiInfoParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnMwiInfoParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnMwiInfoParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnMwiInfoParam::OnMwiInfoParam",0,0)
  result = (pj::OnMwiInfoParam *)new pj::OnMwiInfoParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnMwiInfoParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnMwiInfoParam(void *obj) {
pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnMwiInfoParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnMwiInfoParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnMwiInfoParam_attributes[] = {
    { "state", _wrap_OnMwiInfoParam_state_get, _wrap_OnMwiInfoParam_state_set },
    { "rdata", _wrap_OnMwiInfoParam_rdata_get, _wrap_OnMwiInfoParam_rdata_set },
    {0,0,0}
};
static swig_lua_method swig_OnMwiInfoParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnMwiInfoParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnMwiInfoParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnMwiInfoParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnMwiInfoParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnMwiInfoParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnMwiInfoParam_Sf_SwigStatic = {
    "OnMwiInfoParam",
    swig_OnMwiInfoParam_Sf_SwigStatic_methods,
    swig_OnMwiInfoParam_Sf_SwigStatic_attributes,
    swig_OnMwiInfoParam_Sf_SwigStatic_constants,
    swig_OnMwiInfoParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnMwiInfoParam_bases[] = {0};
static const char *swig_OnMwiInfoParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnMwiInfoParam = { "OnMwiInfoParam", "OnMwiInfoParam", &SWIGTYPE_p_pj__OnMwiInfoParam,_proxy__wrap_new_OnMwiInfoParam, swig_delete_OnMwiInfoParam, swig_OnMwiInfoParam_methods, swig_OnMwiInfoParam_attributes, &swig_OnMwiInfoParam_Sf_SwigStatic, swig_OnMwiInfoParam_meta, swig_OnMwiInfoParam_bases, swig_OnMwiInfoParam_base_names };

static int _wrap_PresNotifyParam_srvPres_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::srvPres",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::srvPres",1,"pj::PresNotifyParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::PresNotifyParam::srvPres",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_srvPres_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"PresNotifyParam_srvPres_set");
  if (arg1) (arg1)->srvPres = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_srvPres_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::srvPres",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::srvPres",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_srvPres_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (void *) ((arg1)->srvPres);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::state",1,"pj::PresNotifyParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::PresNotifyParam::state",2,"pjsip_evsub_state");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_state_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  arg2 = (pjsip_evsub_state)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state result;
  
  SWIG_check_num_args("pj::PresNotifyParam::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::state",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_state_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (pjsip_evsub_state) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_stateStr_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::stateStr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::stateStr",1,"pj::PresNotifyParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PresNotifyParam::stateStr",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_stateStr_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->stateStr = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_stateStr_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::stateStr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::stateStr",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_stateStr_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (pj::string *) & ((arg1)->stateStr);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::reason",1,"pj::PresNotifyParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::PresNotifyParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_reason_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::reason",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_reason_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_withBody_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::withBody",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::withBody",1,"pj::PresNotifyParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::PresNotifyParam::withBody",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_withBody_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->withBody = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_withBody_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::PresNotifyParam::withBody",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::withBody",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_withBody_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (bool) ((arg1)->withBody);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::txOption",1,"pj::PresNotifyParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::PresNotifyParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_txOption_set",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("PresNotifyParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PresNotifyParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PresNotifyParam::txOption",1,"pj::PresNotifyParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("PresNotifyParam_txOption_get",1,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_PresNotifyParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::PresNotifyParam *result = 0 ;
  
  SWIG_check_num_args("pj::PresNotifyParam::PresNotifyParam",0,0)
  result = (pj::PresNotifyParam *)new pj::PresNotifyParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__PresNotifyParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PresNotifyParam(void *obj) {
pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_PresNotifyParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_PresNotifyParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_PresNotifyParam_attributes[] = {
    { "srvPres", _wrap_PresNotifyParam_srvPres_get, _wrap_PresNotifyParam_srvPres_set },
    { "state", _wrap_PresNotifyParam_state_get, _wrap_PresNotifyParam_state_set },
    { "stateStr", _wrap_PresNotifyParam_stateStr_get, _wrap_PresNotifyParam_stateStr_set },
    { "reason", _wrap_PresNotifyParam_reason_get, _wrap_PresNotifyParam_reason_set },
    { "withBody", _wrap_PresNotifyParam_withBody_get, _wrap_PresNotifyParam_withBody_set },
    { "txOption", _wrap_PresNotifyParam_txOption_get, _wrap_PresNotifyParam_txOption_set },
    {0,0,0}
};
static swig_lua_method swig_PresNotifyParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_PresNotifyParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PresNotifyParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PresNotifyParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PresNotifyParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PresNotifyParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PresNotifyParam_Sf_SwigStatic = {
    "PresNotifyParam",
    swig_PresNotifyParam_Sf_SwigStatic_methods,
    swig_PresNotifyParam_Sf_SwigStatic_attributes,
    swig_PresNotifyParam_Sf_SwigStatic_constants,
    swig_PresNotifyParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PresNotifyParam_bases[] = {0};
static const char *swig_PresNotifyParam_base_names[] = {0};
static swig_lua_class _wrap_class_PresNotifyParam = { "PresNotifyParam", "PresNotifyParam", &SWIGTYPE_p_pj__PresNotifyParam,_proxy__wrap_new_PresNotifyParam, swig_delete_PresNotifyParam, swig_PresNotifyParam_methods, swig_PresNotifyParam_attributes, &swig_PresNotifyParam_Sf_SwigStatic, swig_PresNotifyParam_meta, swig_PresNotifyParam_bases, swig_PresNotifyParam_base_names };

static int _wrap_FindBuddyMatch_match(lua_State* L) {
  int SWIG_arg = 0;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  pj::string temp2 ;
  bool result;
  
  SWIG_check_num_args("pj::FindBuddyMatch::match",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::FindBuddyMatch::match",1,"pj::FindBuddyMatch *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::FindBuddyMatch::match",2,"pj::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::FindBuddyMatch::match",3,"pj::Buddy const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__FindBuddyMatch,0))){
    SWIG_fail_ptr("FindBuddyMatch_match",1,SWIGTYPE_p_pj__FindBuddyMatch);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("FindBuddyMatch_match",3,SWIGTYPE_p_pj__Buddy);
  }
  
  result = (bool)(arg1)->match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FindBuddyMatch(lua_State* L) {
  int SWIG_arg = 0;
  pj::FindBuddyMatch *result = 0 ;
  
  SWIG_check_num_args("pj::FindBuddyMatch::FindBuddyMatch",0,0)
  result = (pj::FindBuddyMatch *)new pj::FindBuddyMatch();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__FindBuddyMatch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FindBuddyMatch(void *obj) {
pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) obj;
delete arg1;
}
static int _proxy__wrap_new_FindBuddyMatch(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FindBuddyMatch);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FindBuddyMatch_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FindBuddyMatch_methods[]= {
    { "match", _wrap_FindBuddyMatch_match},
    {0,0}
};
static swig_lua_method swig_FindBuddyMatch_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FindBuddyMatch_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FindBuddyMatch_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FindBuddyMatch_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FindBuddyMatch_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FindBuddyMatch_Sf_SwigStatic = {
    "FindBuddyMatch",
    swig_FindBuddyMatch_Sf_SwigStatic_methods,
    swig_FindBuddyMatch_Sf_SwigStatic_attributes,
    swig_FindBuddyMatch_Sf_SwigStatic_constants,
    swig_FindBuddyMatch_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FindBuddyMatch_bases[] = {0};
static const char *swig_FindBuddyMatch_base_names[] = {0};
static swig_lua_class _wrap_class_FindBuddyMatch = { "FindBuddyMatch", "FindBuddyMatch", &SWIGTYPE_p_pj__FindBuddyMatch,_proxy__wrap_new_FindBuddyMatch, swig_delete_FindBuddyMatch, swig_FindBuddyMatch_methods, swig_FindBuddyMatch_attributes, &swig_FindBuddyMatch_Sf_SwigStatic, swig_FindBuddyMatch_meta, swig_FindBuddyMatch_bases, swig_FindBuddyMatch_base_names };

static int _wrap_new_Account(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *result = 0 ;
  
  SWIG_check_num_args("pj::Account::Account",0,0)
  result = (pj::Account *)new pj::Account();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Account,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_create__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::Account::create",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::create",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::create",2,"pj::AccountConfig const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::Account::create",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_create",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("Account_create",2,SWIGTYPE_p_pj__AccountConfig);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_create__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::create",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::create",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::create",2,"pj::AccountConfig const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_create",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("Account_create",2,SWIGTYPE_p_pj__AccountConfig);
  }
  
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_create(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__AccountConfig, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Account_create__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__AccountConfig, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Account_create__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Account_create'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Account::create(pj::AccountConfig const &,bool)\n"
    "    pj::Account::create(pj::AccountConfig const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Account_modify(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::modify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::modify",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::modify",2,"pj::AccountConfig const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_modify",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AccountConfig,0))){
    SWIG_fail_ptr("Account_modify",2,SWIGTYPE_p_pj__AccountConfig);
  }
  
  try {
    (arg1)->modify((pj::AccountConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_isValid(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Account::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::isValid",1,"pj::Account const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_isValid",1,SWIGTYPE_p_pj__Account);
  }
  
  result = (bool)((pj::Account const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_setDefault(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  SWIG_check_num_args("pj::Account::setDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::setDefault",1,"pj::Account *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_setDefault",1,SWIGTYPE_p_pj__Account);
  }
  
  try {
    (arg1)->setDefault();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_isDefault(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Account::isDefault",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::isDefault",1,"pj::Account const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_isDefault",1,SWIGTYPE_p_pj__Account);
  }
  
  result = (bool)((pj::Account const *)arg1)->isDefault();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_getId(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Account::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::getId",1,"pj::Account const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_getId",1,SWIGTYPE_p_pj__Account);
  }
  
  result = (int)((pj::Account const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_lookup(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  pj::Account *result = 0 ;
  
  SWIG_check_num_args("pj::Account::lookup",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pj::Account::lookup",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (pj::Account *)pj::Account::lookup(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Account,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountInfo result;
  
  SWIG_check_num_args("pj::Account::getInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::getInfo",1,"pj::Account const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_getInfo",1,SWIGTYPE_p_pj__Account);
  }
  
  try {
    result = ((pj::Account const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::AccountInfo * resultptr = new pj::AccountInfo((const pj::AccountInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__AccountInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_setRegistration(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::Account::setRegistration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::setRegistration",1,"pj::Account *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::Account::setRegistration",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_setRegistration",1,SWIGTYPE_p_pj__Account);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  try {
    (arg1)->setRegistration(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_setOnlineStatus(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresenceStatus *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::setOnlineStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::setOnlineStatus",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::setOnlineStatus",2,"pj::PresenceStatus const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_setOnlineStatus",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PresenceStatus,0))){
    SWIG_fail_ptr("Account_setOnlineStatus",2,SWIGTYPE_p_pj__PresenceStatus);
  }
  
  try {
    (arg1)->setOnlineStatus((pj::PresenceStatus const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_setTransport(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::TransportId arg2 ;
  
  SWIG_check_num_args("pj::Account::setTransport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::setTransport",1,"pj::Account *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Account::setTransport",2,"pj::TransportId");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_setTransport",1,SWIGTYPE_p_pj__Account);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  try {
    (arg1)->setTransport(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_presNotify(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresNotifyParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::presNotify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::presNotify",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::presNotify",2,"pj::PresNotifyParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_presNotify",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PresNotifyParam,0))){
    SWIG_fail_ptr("Account_presNotify",2,SWIGTYPE_p_pj__PresNotifyParam);
  }
  
  try {
    (arg1)->presNotify((pj::PresNotifyParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_enumBuddies(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::BuddyVector *result = 0 ;
  
  SWIG_check_num_args("pj::Account::enumBuddies",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::enumBuddies",1,"pj::Account const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_enumBuddies",1,SWIGTYPE_p_pj__Account);
  }
  
  try {
    result = (pj::BuddyVector *) &((pj::Account const *)arg1)->enumBuddies();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__Buddy_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_findBuddy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::FindBuddyMatch *arg3 = (pj::FindBuddyMatch *) 0 ;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("pj::Account::findBuddy",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::findBuddy",1,"pj::Account const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Account::findBuddy",2,"pj::string");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("pj::Account::findBuddy",3,"pj::FindBuddyMatch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_findBuddy",1,SWIGTYPE_p_pj__Account);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__FindBuddyMatch,0))){
    SWIG_fail_ptr("Account_findBuddy",3,SWIGTYPE_p_pj__FindBuddyMatch);
  }
  
  try {
    result = (pj::Buddy *)((pj::Account const *)arg1)->findBuddy(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_findBuddy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::Buddy *result = 0 ;
  
  SWIG_check_num_args("pj::Account::findBuddy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::findBuddy",1,"pj::Account const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Account::findBuddy",2,"pj::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_findBuddy",1,SWIGTYPE_p_pj__Account);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_rawlen(L,2));
  try {
    result = (pj::Buddy *)((pj::Account const *)arg1)->findBuddy(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Buddy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_findBuddy(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Account_findBuddy__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_pj__FindBuddyMatch, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Account_findBuddy__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Account_findBuddy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Account::findBuddy(pj::string,pj::FindBuddyMatch *) const\n"
    "    pj::Account::findBuddy(pj::string) const\n");
  lua_error(L);return 0;
}


static int _wrap_Account_addBuddy(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::Buddy *arg2 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("pj::Account::addBuddy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::addBuddy",1,"pj::Account *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Account::addBuddy",2,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_addBuddy",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Account_addBuddy",2,SWIGTYPE_p_pj__Buddy);
  }
  
  (arg1)->addBuddy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_removeBuddy(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::Buddy *arg2 = (pj::Buddy *) 0 ;
  
  SWIG_check_num_args("pj::Account::removeBuddy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::removeBuddy",1,"pj::Account *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Account::removeBuddy",2,"pj::Buddy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_removeBuddy",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Buddy,0))){
    SWIG_fail_ptr("Account_removeBuddy",2,SWIGTYPE_p_pj__Buddy);
  }
  
  (arg1)->removeBuddy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onIncomingCall(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onIncomingCall",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onIncomingCall",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onIncomingCall",2,"pj::OnIncomingCallParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onIncomingCall",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnIncomingCallParam,0))){
    SWIG_fail_ptr("Account_onIncomingCall",2,SWIGTYPE_p_pj__OnIncomingCallParam);
  }
  
  (arg1)->onIncomingCall(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onRegStarted(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onRegStarted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onRegStarted",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onRegStarted",2,"pj::OnRegStartedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onRegStarted",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnRegStartedParam,0))){
    SWIG_fail_ptr("Account_onRegStarted",2,SWIGTYPE_p_pj__OnRegStartedParam);
  }
  
  (arg1)->onRegStarted(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onRegState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onRegState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onRegState",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onRegState",2,"pj::OnRegStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onRegState",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnRegStateParam,0))){
    SWIG_fail_ptr("Account_onRegState",2,SWIGTYPE_p_pj__OnRegStateParam);
  }
  
  (arg1)->onRegState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onIncomingSubscribe(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onIncomingSubscribe",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onIncomingSubscribe",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onIncomingSubscribe",2,"pj::OnIncomingSubscribeParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onIncomingSubscribe",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnIncomingSubscribeParam,0))){
    SWIG_fail_ptr("Account_onIncomingSubscribe",2,SWIGTYPE_p_pj__OnIncomingSubscribeParam);
  }
  
  (arg1)->onIncomingSubscribe(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onInstantMessage(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onInstantMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onInstantMessage",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onInstantMessage",2,"pj::OnInstantMessageParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onInstantMessage",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("Account_onInstantMessage",2,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  (arg1)->onInstantMessage(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onInstantMessageStatus(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onInstantMessageStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onInstantMessageStatus",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onInstantMessageStatus",2,"pj::OnInstantMessageStatusParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onInstantMessageStatus",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("Account_onInstantMessageStatus",2,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  (arg1)->onInstantMessageStatus(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onTypingIndication(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onTypingIndication",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onTypingIndication",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onTypingIndication",2,"pj::OnTypingIndicationParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onTypingIndication",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("Account_onTypingIndication",2,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  (arg1)->onTypingIndication(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Account_onMwiInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Account::onMwiInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Account::onMwiInfo",1,"pj::Account *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Account::onMwiInfo",2,"pj::OnMwiInfoParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("Account_onMwiInfo",1,SWIGTYPE_p_pj__Account);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnMwiInfoParam,0))){
    SWIG_fail_ptr("Account_onMwiInfo",2,SWIGTYPE_p_pj__OnMwiInfoParam);
  }
  
  (arg1)->onMwiInfo(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Account(void *obj) {
pj::Account *arg1 = (pj::Account *) obj;
delete arg1;
}
static int _proxy__wrap_new_Account(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Account);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Account_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Account_methods[]= {
    { "create", _wrap_Account_create},
    { "modify", _wrap_Account_modify},
    { "isValid", _wrap_Account_isValid},
    { "setDefault", _wrap_Account_setDefault},
    { "isDefault", _wrap_Account_isDefault},
    { "getId", _wrap_Account_getId},
    { "getInfo", _wrap_Account_getInfo},
    { "setRegistration", _wrap_Account_setRegistration},
    { "setOnlineStatus", _wrap_Account_setOnlineStatus},
    { "setTransport", _wrap_Account_setTransport},
    { "presNotify", _wrap_Account_presNotify},
    { "enumBuddies", _wrap_Account_enumBuddies},
    { "findBuddy", _wrap_Account_findBuddy},
    { "addBuddy", _wrap_Account_addBuddy},
    { "removeBuddy", _wrap_Account_removeBuddy},
    { "onIncomingCall", _wrap_Account_onIncomingCall},
    { "onRegStarted", _wrap_Account_onRegStarted},
    { "onRegState", _wrap_Account_onRegState},
    { "onIncomingSubscribe", _wrap_Account_onIncomingSubscribe},
    { "onInstantMessage", _wrap_Account_onInstantMessage},
    { "onInstantMessageStatus", _wrap_Account_onInstantMessageStatus},
    { "onTypingIndication", _wrap_Account_onTypingIndication},
    { "onMwiInfo", _wrap_Account_onMwiInfo},
    {0,0}
};
static swig_lua_method swig_Account_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Account_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Account_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Account_Sf_SwigStatic_methods[]= {
    { "lookup", _wrap_Account_lookup},
    {0,0}
};
static swig_lua_class* swig_Account_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Account_Sf_SwigStatic = {
    "Account",
    swig_Account_Sf_SwigStatic_methods,
    swig_Account_Sf_SwigStatic_attributes,
    swig_Account_Sf_SwigStatic_constants,
    swig_Account_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Account_bases[] = {0};
static const char *swig_Account_base_names[] = {0};
static swig_lua_class _wrap_class_Account = { "Account", "Account", &SWIGTYPE_p_pj__Account,_proxy__wrap_new_Account, swig_delete_Account, swig_Account_methods, swig_Account_attributes, &swig_Account_Sf_SwigStatic, swig_Account_meta, swig_Account_bases, swig_Account_base_names };

static int _wrap_MathStat_n_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MathStat::n",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::n",1,"pj::MathStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MathStat::n",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_n_set",1,SWIGTYPE_p_pj__MathStat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->n = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_n_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MathStat::n",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::n",1,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_n_get",1,SWIGTYPE_p_pj__MathStat);
  }
  
  result = (int) ((arg1)->n);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_max_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MathStat::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::max",1,"pj::MathStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MathStat::max",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_max_set",1,SWIGTYPE_p_pj__MathStat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->max = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_max_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MathStat::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::max",1,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_max_get",1,SWIGTYPE_p_pj__MathStat);
  }
  
  result = (int) ((arg1)->max);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_min_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MathStat::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::min",1,"pj::MathStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MathStat::min",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_min_set",1,SWIGTYPE_p_pj__MathStat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->min = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_min_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MathStat::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::min",1,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_min_get",1,SWIGTYPE_p_pj__MathStat);
  }
  
  result = (int) ((arg1)->min);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_last_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MathStat::last",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::last",1,"pj::MathStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MathStat::last",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_last_set",1,SWIGTYPE_p_pj__MathStat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->last = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_last_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MathStat::last",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::last",1,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_last_get",1,SWIGTYPE_p_pj__MathStat);
  }
  
  result = (int) ((arg1)->last);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_mean_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MathStat::mean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::mean",1,"pj::MathStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MathStat::mean",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_mean_set",1,SWIGTYPE_p_pj__MathStat);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mean = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathStat_mean_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MathStat::mean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MathStat::mean",1,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("MathStat_mean_get",1,SWIGTYPE_p_pj__MathStat);
  }
  
  result = (int) ((arg1)->mean);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MathStat(lua_State* L) {
  int SWIG_arg = 0;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::MathStat::MathStat",0,0)
  result = (pj::MathStat *)new pj::MathStat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MathStat(void *obj) {
pj::MathStat *arg1 = (pj::MathStat *) obj;
delete arg1;
}
static int _proxy__wrap_new_MathStat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MathStat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MathStat_attributes[] = {
    { "n", _wrap_MathStat_n_get, _wrap_MathStat_n_set },
    { "max", _wrap_MathStat_max_get, _wrap_MathStat_max_set },
    { "min", _wrap_MathStat_min_get, _wrap_MathStat_min_set },
    { "last", _wrap_MathStat_last_get, _wrap_MathStat_last_set },
    { "mean", _wrap_MathStat_mean_get, _wrap_MathStat_mean_set },
    {0,0,0}
};
static swig_lua_method swig_MathStat_methods[]= {
    {0,0}
};
static swig_lua_method swig_MathStat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MathStat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MathStat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MathStat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MathStat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MathStat_Sf_SwigStatic = {
    "MathStat",
    swig_MathStat_Sf_SwigStatic_methods,
    swig_MathStat_Sf_SwigStatic_attributes,
    swig_MathStat_Sf_SwigStatic_constants,
    swig_MathStat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MathStat_bases[] = {0};
static const char *swig_MathStat_base_names[] = {0};
static swig_lua_class _wrap_class_MathStat = { "MathStat", "MathStat", &SWIGTYPE_p_pj__MathStat,_proxy__wrap_new_MathStat, swig_delete_MathStat, swig_MathStat_methods, swig_MathStat_attributes, &swig_MathStat_Sf_SwigStatic, swig_MathStat_meta, swig_MathStat_bases, swig_MathStat_base_names };

static int _wrap_RtcpStreamStat_update_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::update",1,"pj::RtcpStreamStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::update",2,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_update_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("RtcpStreamStat_update_set",2,SWIGTYPE_p_pj__TimeVal);
  }
  
  if (arg1) (arg1)->update = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_update_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::update",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_update_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (pj::TimeVal *)& ((arg1)->update);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimeVal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_updateCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::updateCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::updateCount",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::updateCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_updateCount_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->updateCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_updateCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::updateCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::updateCount",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_updateCount_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->updateCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_pkt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::pkt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::pkt",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::pkt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_pkt_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->pkt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_pkt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::pkt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::pkt",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_pkt_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->pkt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_bytes_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::bytes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::bytes",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::bytes",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_bytes_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->bytes = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_bytes_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::bytes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::bytes",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_bytes_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->bytes);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_discard_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::discard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::discard",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::discard",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_discard_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->discard = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_discard_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::discard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::discard",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_discard_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->discard);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_loss_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::loss",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::loss",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::loss",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_loss_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->loss = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_loss_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::loss",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::loss",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_loss_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->loss);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_reorder_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::reorder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::reorder",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::reorder",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_reorder_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->reorder = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_reorder_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::reorder",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::reorder",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_reorder_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->reorder);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_dup_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::dup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::dup",1,"pj::RtcpStreamStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::dup",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_dup_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dup = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_dup_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::RtcpStreamStat::dup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::dup",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_dup_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (unsigned int) ((arg1)->dup);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_lossPeriodUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::lossPeriodUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::lossPeriodUsec",1,"pj::RtcpStreamStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::lossPeriodUsec",2,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_lossPeriodUsec_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_lossPeriodUsec_set",2,SWIGTYPE_p_pj__MathStat);
  }
  
  if (arg1) (arg1)->lossPeriodUsec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_lossPeriodUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::lossPeriodUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::lossPeriodUsec",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_lossPeriodUsec_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (pj::MathStat *)& ((arg1)->lossPeriodUsec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_jitterUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::jitterUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::jitterUsec",1,"pj::RtcpStreamStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStreamStat::jitterUsec",2,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_jitterUsec_set",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_jitterUsec_set",2,SWIGTYPE_p_pj__MathStat);
  }
  
  if (arg1) (arg1)->jitterUsec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStreamStat_jitterUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::jitterUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStreamStat::jitterUsec",1,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStreamStat_jitterUsec_get",1,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  result = (pj::MathStat *)& ((arg1)->jitterUsec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtcpStreamStat(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStreamStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStreamStat::RtcpStreamStat",0,0)
  result = (pj::RtcpStreamStat *)new pj::RtcpStreamStat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpStreamStat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RtcpStreamStat(void *obj) {
pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) obj;
delete arg1;
}
static int _proxy__wrap_new_RtcpStreamStat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RtcpStreamStat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RtcpStreamStat_attributes[] = {
    { "update", _wrap_RtcpStreamStat_update_get, _wrap_RtcpStreamStat_update_set },
    { "updateCount", _wrap_RtcpStreamStat_updateCount_get, _wrap_RtcpStreamStat_updateCount_set },
    { "pkt", _wrap_RtcpStreamStat_pkt_get, _wrap_RtcpStreamStat_pkt_set },
    { "bytes", _wrap_RtcpStreamStat_bytes_get, _wrap_RtcpStreamStat_bytes_set },
    { "discard", _wrap_RtcpStreamStat_discard_get, _wrap_RtcpStreamStat_discard_set },
    { "loss", _wrap_RtcpStreamStat_loss_get, _wrap_RtcpStreamStat_loss_set },
    { "reorder", _wrap_RtcpStreamStat_reorder_get, _wrap_RtcpStreamStat_reorder_set },
    { "dup", _wrap_RtcpStreamStat_dup_get, _wrap_RtcpStreamStat_dup_set },
    { "lossPeriodUsec", _wrap_RtcpStreamStat_lossPeriodUsec_get, _wrap_RtcpStreamStat_lossPeriodUsec_set },
    { "jitterUsec", _wrap_RtcpStreamStat_jitterUsec_get, _wrap_RtcpStreamStat_jitterUsec_set },
    {0,0,0}
};
static swig_lua_method swig_RtcpStreamStat_methods[]= {
    {0,0}
};
static swig_lua_method swig_RtcpStreamStat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RtcpStreamStat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RtcpStreamStat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RtcpStreamStat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RtcpStreamStat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RtcpStreamStat_Sf_SwigStatic = {
    "RtcpStreamStat",
    swig_RtcpStreamStat_Sf_SwigStatic_methods,
    swig_RtcpStreamStat_Sf_SwigStatic_attributes,
    swig_RtcpStreamStat_Sf_SwigStatic_constants,
    swig_RtcpStreamStat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RtcpStreamStat_bases[] = {0};
static const char *swig_RtcpStreamStat_base_names[] = {0};
static swig_lua_class _wrap_class_RtcpStreamStat = { "RtcpStreamStat", "RtcpStreamStat", &SWIGTYPE_p_pj__RtcpStreamStat,_proxy__wrap_new_RtcpStreamStat, swig_delete_RtcpStreamStat, swig_RtcpStreamStat_methods, swig_RtcpStreamStat_attributes, &swig_RtcpStreamStat_Sf_SwigStatic, swig_RtcpStreamStat_meta, swig_RtcpStreamStat_bases, swig_RtcpStreamStat_base_names };

static int _wrap_RtcpSdes_cname_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::cname",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::cname",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::cname",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_cname_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->cname = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_cname_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::cname",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::cname",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_cname_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->cname);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_name_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::name",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::name",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_name_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_name_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::name",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_name_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_email_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::email",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::email",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::email",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_email_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->email = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_email_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::email",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::email",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_email_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->email);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_phone_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::phone",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::phone",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::phone",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_phone_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->phone = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_phone_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::phone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::phone",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_phone_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->phone);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_loc_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::loc",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::loc",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::loc",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_loc_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->loc = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_loc_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::loc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::loc",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_loc_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->loc);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_tool_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::tool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::tool",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::tool",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_tool_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->tool = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_tool_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::tool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::tool",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_tool_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->tool);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_note_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::RtcpSdes::note",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::note",1,"pj::RtcpSdes *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::RtcpSdes::note",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_note_set",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->note = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpSdes_note_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::note",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpSdes::note",1,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpSdes_note_get",1,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  result = (pj::string *) & ((arg1)->note);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtcpSdes(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpSdes *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpSdes::RtcpSdes",0,0)
  result = (pj::RtcpSdes *)new pj::RtcpSdes();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpSdes,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RtcpSdes(void *obj) {
pj::RtcpSdes *arg1 = (pj::RtcpSdes *) obj;
delete arg1;
}
static int _proxy__wrap_new_RtcpSdes(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RtcpSdes);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RtcpSdes_attributes[] = {
    { "cname", _wrap_RtcpSdes_cname_get, _wrap_RtcpSdes_cname_set },
    { "name", _wrap_RtcpSdes_name_get, _wrap_RtcpSdes_name_set },
    { "email", _wrap_RtcpSdes_email_get, _wrap_RtcpSdes_email_set },
    { "phone", _wrap_RtcpSdes_phone_get, _wrap_RtcpSdes_phone_set },
    { "loc", _wrap_RtcpSdes_loc_get, _wrap_RtcpSdes_loc_set },
    { "tool", _wrap_RtcpSdes_tool_get, _wrap_RtcpSdes_tool_set },
    { "note", _wrap_RtcpSdes_note_get, _wrap_RtcpSdes_note_set },
    {0,0,0}
};
static swig_lua_method swig_RtcpSdes_methods[]= {
    {0,0}
};
static swig_lua_method swig_RtcpSdes_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RtcpSdes_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RtcpSdes_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RtcpSdes_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RtcpSdes_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RtcpSdes_Sf_SwigStatic = {
    "RtcpSdes",
    swig_RtcpSdes_Sf_SwigStatic_methods,
    swig_RtcpSdes_Sf_SwigStatic_attributes,
    swig_RtcpSdes_Sf_SwigStatic_constants,
    swig_RtcpSdes_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RtcpSdes_bases[] = {0};
static const char *swig_RtcpSdes_base_names[] = {0};
static swig_lua_class _wrap_class_RtcpSdes = { "RtcpSdes", "RtcpSdes", &SWIGTYPE_p_pj__RtcpSdes,_proxy__wrap_new_RtcpSdes, swig_delete_RtcpSdes, swig_RtcpSdes_methods, swig_RtcpSdes_attributes, &swig_RtcpSdes_Sf_SwigStatic, swig_RtcpSdes_meta, swig_RtcpSdes_bases, swig_RtcpSdes_base_names };

static int _wrap_RtcpStat_start_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::start",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::start",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::start",2,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_start_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("RtcpStat_start_set",2,SWIGTYPE_p_pj__TimeVal);
  }
  
  if (arg1) (arg1)->start = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_start_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::start",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_start_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::TimeVal *)& ((arg1)->start);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimeVal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_txStat_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::txStat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::txStat",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::txStat",2,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_txStat_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStat_txStat_set",2,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  if (arg1) (arg1)->txStat = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_txStat_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::txStat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::txStat",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_txStat_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::RtcpStreamStat *)& ((arg1)->txStat);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpStreamStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxStat_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxStat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxStat",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::rxStat",2,"pj::RtcpStreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxStat_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__RtcpStreamStat,0))){
    SWIG_fail_ptr("RtcpStat_rxStat_set",2,SWIGTYPE_p_pj__RtcpStreamStat);
  }
  
  if (arg1) (arg1)->rxStat = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxStat_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxStat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxStat",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxStat_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::RtcpStreamStat *)& ((arg1)->rxStat);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpStreamStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rttUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rttUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rttUsec",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::rttUsec",2,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rttUsec_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("RtcpStat_rttUsec_set",2,SWIGTYPE_p_pj__MathStat);
  }
  
  if (arg1) (arg1)->rttUsec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rttUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rttUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rttUsec",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rttUsec_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::MathStat *)& ((arg1)->rttUsec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rtpTxLastTs_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t arg2 ;
  
  SWIG_check_num_args("pj::RtcpStat::rtpTxLastTs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastTs",1,"pj::RtcpStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastTs",2,"pj_uint32_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rtpTxLastTs_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint32_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->rtpTxLastTs = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rtpTxLastTs_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t result;
  
  SWIG_check_num_args("pj::RtcpStat::rtpTxLastTs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastTs",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rtpTxLastTs_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj_uint32_t) ((arg1)->rtpTxLastTs);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rtpTxLastSeq_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t arg2 ;
  
  SWIG_check_num_args("pj::RtcpStat::rtpTxLastSeq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastSeq",1,"pj::RtcpStat *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastSeq",2,"pj_uint16_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rtpTxLastSeq_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (pj_uint16_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->rtpTxLastSeq = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rtpTxLastSeq_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t result;
  
  SWIG_check_num_args("pj::RtcpStat::rtpTxLastSeq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rtpTxLastSeq",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rtpTxLastSeq_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj_uint16_t) ((arg1)->rtpTxLastSeq);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxIpdvUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxIpdvUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxIpdvUsec",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::rxIpdvUsec",2,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxIpdvUsec_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("RtcpStat_rxIpdvUsec_set",2,SWIGTYPE_p_pj__MathStat);
  }
  
  if (arg1) (arg1)->rxIpdvUsec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxIpdvUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxIpdvUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxIpdvUsec",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxIpdvUsec_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::MathStat *)& ((arg1)->rxIpdvUsec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxRawJitterUsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxRawJitterUsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxRawJitterUsec",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::rxRawJitterUsec",2,"pj::MathStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxRawJitterUsec_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MathStat,0))){
    SWIG_fail_ptr("RtcpStat_rxRawJitterUsec_set",2,SWIGTYPE_p_pj__MathStat);
  }
  
  if (arg1) (arg1)->rxRawJitterUsec = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_rxRawJitterUsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::rxRawJitterUsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::rxRawJitterUsec",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_rxRawJitterUsec_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::MathStat *)& ((arg1)->rxRawJitterUsec);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MathStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_peerSdes_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *arg2 = (pj::RtcpSdes *) 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::peerSdes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::peerSdes",1,"pj::RtcpStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::RtcpStat::peerSdes",2,"pj::RtcpSdes *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_peerSdes_set",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__RtcpSdes,0))){
    SWIG_fail_ptr("RtcpStat_peerSdes_set",2,SWIGTYPE_p_pj__RtcpSdes);
  }
  
  if (arg1) (arg1)->peerSdes = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RtcpStat_peerSdes_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::peerSdes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::RtcpStat::peerSdes",1,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("RtcpStat_peerSdes_get",1,SWIGTYPE_p_pj__RtcpStat);
  }
  
  result = (pj::RtcpSdes *)& ((arg1)->peerSdes);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpSdes,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RtcpStat(lua_State* L) {
  int SWIG_arg = 0;
  pj::RtcpStat *result = 0 ;
  
  SWIG_check_num_args("pj::RtcpStat::RtcpStat",0,0)
  result = (pj::RtcpStat *)new pj::RtcpStat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpStat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RtcpStat(void *obj) {
pj::RtcpStat *arg1 = (pj::RtcpStat *) obj;
delete arg1;
}
static int _proxy__wrap_new_RtcpStat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RtcpStat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RtcpStat_attributes[] = {
    { "start", _wrap_RtcpStat_start_get, _wrap_RtcpStat_start_set },
    { "txStat", _wrap_RtcpStat_txStat_get, _wrap_RtcpStat_txStat_set },
    { "rxStat", _wrap_RtcpStat_rxStat_get, _wrap_RtcpStat_rxStat_set },
    { "rttUsec", _wrap_RtcpStat_rttUsec_get, _wrap_RtcpStat_rttUsec_set },
    { "rtpTxLastTs", _wrap_RtcpStat_rtpTxLastTs_get, _wrap_RtcpStat_rtpTxLastTs_set },
    { "rtpTxLastSeq", _wrap_RtcpStat_rtpTxLastSeq_get, _wrap_RtcpStat_rtpTxLastSeq_set },
    { "rxIpdvUsec", _wrap_RtcpStat_rxIpdvUsec_get, _wrap_RtcpStat_rxIpdvUsec_set },
    { "rxRawJitterUsec", _wrap_RtcpStat_rxRawJitterUsec_get, _wrap_RtcpStat_rxRawJitterUsec_set },
    { "peerSdes", _wrap_RtcpStat_peerSdes_get, _wrap_RtcpStat_peerSdes_set },
    {0,0,0}
};
static swig_lua_method swig_RtcpStat_methods[]= {
    {0,0}
};
static swig_lua_method swig_RtcpStat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RtcpStat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RtcpStat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RtcpStat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RtcpStat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RtcpStat_Sf_SwigStatic = {
    "RtcpStat",
    swig_RtcpStat_Sf_SwigStatic_methods,
    swig_RtcpStat_Sf_SwigStatic_attributes,
    swig_RtcpStat_Sf_SwigStatic_constants,
    swig_RtcpStat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RtcpStat_bases[] = {0};
static const char *swig_RtcpStat_base_names[] = {0};
static swig_lua_class _wrap_class_RtcpStat = { "RtcpStat", "RtcpStat", &SWIGTYPE_p_pj__RtcpStat,_proxy__wrap_new_RtcpStat, swig_delete_RtcpStat, swig_RtcpStat_methods, swig_RtcpStat_attributes, &swig_RtcpStat_Sf_SwigStatic, swig_RtcpStat_meta, swig_RtcpStat_bases, swig_RtcpStat_base_names };

static int _wrap_JbufState_frameSize_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::frameSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::frameSize",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::frameSize",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_frameSize_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->frameSize = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_frameSize_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::frameSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::frameSize",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_frameSize_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->frameSize);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_minPrefetch_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::minPrefetch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::minPrefetch",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::minPrefetch",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_minPrefetch_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minPrefetch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_minPrefetch_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::minPrefetch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::minPrefetch",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_minPrefetch_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->minPrefetch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_maxPrefetch_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::maxPrefetch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::maxPrefetch",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::maxPrefetch",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_maxPrefetch_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxPrefetch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_maxPrefetch_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::maxPrefetch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::maxPrefetch",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_maxPrefetch_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->maxPrefetch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_burst_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::burst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::burst",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::burst",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_burst_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->burst = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_burst_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::burst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::burst",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_burst_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->burst);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_prefetch_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::prefetch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::prefetch",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::prefetch",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_prefetch_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->prefetch = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_prefetch_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::prefetch",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::prefetch",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_prefetch_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->prefetch);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_size_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::size",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::size",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::size",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_size_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->size = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_size_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::size",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_size_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->size);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_avgDelayMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::avgDelayMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::avgDelayMsec",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::avgDelayMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_avgDelayMsec_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->avgDelayMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_avgDelayMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::avgDelayMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::avgDelayMsec",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_avgDelayMsec_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->avgDelayMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_minDelayMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::minDelayMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::minDelayMsec",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::minDelayMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_minDelayMsec_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->minDelayMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_minDelayMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::minDelayMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::minDelayMsec",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_minDelayMsec_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->minDelayMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_maxDelayMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::maxDelayMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::maxDelayMsec",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::maxDelayMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_maxDelayMsec_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxDelayMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_maxDelayMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::maxDelayMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::maxDelayMsec",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_maxDelayMsec_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->maxDelayMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_devDelayMsec_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::devDelayMsec",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::devDelayMsec",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::devDelayMsec",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_devDelayMsec_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->devDelayMsec = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_devDelayMsec_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::devDelayMsec",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::devDelayMsec",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_devDelayMsec_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->devDelayMsec);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_avgBurst_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::avgBurst",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::avgBurst",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::avgBurst",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_avgBurst_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->avgBurst = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_avgBurst_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::avgBurst",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::avgBurst",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_avgBurst_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->avgBurst);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_lost_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::lost",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::lost",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::lost",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_lost_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->lost = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_lost_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::lost",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::lost",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_lost_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->lost);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_discard_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::discard",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::discard",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::discard",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_discard_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->discard = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_discard_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::discard",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::discard",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_discard_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->discard);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_empty_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::JbufState::empty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::empty",1,"pj::JbufState *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::JbufState::empty",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_empty_set",1,SWIGTYPE_p_pj__JbufState);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->empty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JbufState_empty_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::JbufState::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JbufState::empty",1,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("JbufState_empty_get",1,SWIGTYPE_p_pj__JbufState);
  }
  
  result = (unsigned int) ((arg1)->empty);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_JbufState(lua_State* L) {
  int SWIG_arg = 0;
  pj::JbufState *result = 0 ;
  
  SWIG_check_num_args("pj::JbufState::JbufState",0,0)
  result = (pj::JbufState *)new pj::JbufState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__JbufState,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JbufState(void *obj) {
pj::JbufState *arg1 = (pj::JbufState *) obj;
delete arg1;
}
static int _proxy__wrap_new_JbufState(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JbufState);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JbufState_attributes[] = {
    { "frameSize", _wrap_JbufState_frameSize_get, _wrap_JbufState_frameSize_set },
    { "minPrefetch", _wrap_JbufState_minPrefetch_get, _wrap_JbufState_minPrefetch_set },
    { "maxPrefetch", _wrap_JbufState_maxPrefetch_get, _wrap_JbufState_maxPrefetch_set },
    { "burst", _wrap_JbufState_burst_get, _wrap_JbufState_burst_set },
    { "prefetch", _wrap_JbufState_prefetch_get, _wrap_JbufState_prefetch_set },
    { "size", _wrap_JbufState_size_get, _wrap_JbufState_size_set },
    { "avgDelayMsec", _wrap_JbufState_avgDelayMsec_get, _wrap_JbufState_avgDelayMsec_set },
    { "minDelayMsec", _wrap_JbufState_minDelayMsec_get, _wrap_JbufState_minDelayMsec_set },
    { "maxDelayMsec", _wrap_JbufState_maxDelayMsec_get, _wrap_JbufState_maxDelayMsec_set },
    { "devDelayMsec", _wrap_JbufState_devDelayMsec_get, _wrap_JbufState_devDelayMsec_set },
    { "avgBurst", _wrap_JbufState_avgBurst_get, _wrap_JbufState_avgBurst_set },
    { "lost", _wrap_JbufState_lost_get, _wrap_JbufState_lost_set },
    { "discard", _wrap_JbufState_discard_get, _wrap_JbufState_discard_set },
    { "empty", _wrap_JbufState_empty_get, _wrap_JbufState_empty_set },
    {0,0,0}
};
static swig_lua_method swig_JbufState_methods[]= {
    {0,0}
};
static swig_lua_method swig_JbufState_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_JbufState_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JbufState_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JbufState_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JbufState_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JbufState_Sf_SwigStatic = {
    "JbufState",
    swig_JbufState_Sf_SwigStatic_methods,
    swig_JbufState_Sf_SwigStatic_attributes,
    swig_JbufState_Sf_SwigStatic_constants,
    swig_JbufState_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JbufState_bases[] = {0};
static const char *swig_JbufState_base_names[] = {0};
static swig_lua_class _wrap_class_JbufState = { "JbufState", "JbufState", &SWIGTYPE_p_pj__JbufState,_proxy__wrap_new_JbufState, swig_delete_JbufState, swig_JbufState_methods, swig_JbufState_attributes, &swig_JbufState_Sf_SwigStatic, swig_JbufState_meta, swig_JbufState_bases, swig_JbufState_base_names };

static int _wrap_SdpSession_wholeSdp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::SdpSession::wholeSdp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SdpSession::wholeSdp",1,"pj::SdpSession *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::SdpSession::wholeSdp",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("SdpSession_wholeSdp_set",1,SWIGTYPE_p_pj__SdpSession);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->wholeSdp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdpSession_wholeSdp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::SdpSession::wholeSdp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SdpSession::wholeSdp",1,"pj::SdpSession *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("SdpSession_wholeSdp_get",1,SWIGTYPE_p_pj__SdpSession);
  }
  
  result = (pj::string *) & ((arg1)->wholeSdp);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdpSession_pjSdpSession_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::SdpSession::pjSdpSession",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SdpSession::pjSdpSession",1,"pj::SdpSession *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::SdpSession::pjSdpSession",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("SdpSession_pjSdpSession_set",1,SWIGTYPE_p_pj__SdpSession);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"SdpSession_pjSdpSession_set");
  if (arg1) (arg1)->pjSdpSession = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SdpSession_pjSdpSession_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::SdpSession::pjSdpSession",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::SdpSession::pjSdpSession",1,"pj::SdpSession *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("SdpSession_pjSdpSession_get",1,SWIGTYPE_p_pj__SdpSession);
  }
  
  result = (void *) ((arg1)->pjSdpSession);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SdpSession(lua_State* L) {
  int SWIG_arg = 0;
  pj::SdpSession *result = 0 ;
  
  SWIG_check_num_args("pj::SdpSession::SdpSession",0,0)
  result = (pj::SdpSession *)new pj::SdpSession();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SdpSession,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SdpSession(void *obj) {
pj::SdpSession *arg1 = (pj::SdpSession *) obj;
delete arg1;
}
static int _proxy__wrap_new_SdpSession(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SdpSession);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SdpSession_attributes[] = {
    { "wholeSdp", _wrap_SdpSession_wholeSdp_get, _wrap_SdpSession_wholeSdp_set },
    { "pjSdpSession", _wrap_SdpSession_pjSdpSession_get, _wrap_SdpSession_pjSdpSession_set },
    {0,0,0}
};
static swig_lua_method swig_SdpSession_methods[]= {
    {0,0}
};
static swig_lua_method swig_SdpSession_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SdpSession_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SdpSession_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SdpSession_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SdpSession_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SdpSession_Sf_SwigStatic = {
    "SdpSession",
    swig_SdpSession_Sf_SwigStatic_methods,
    swig_SdpSession_Sf_SwigStatic_attributes,
    swig_SdpSession_Sf_SwigStatic_constants,
    swig_SdpSession_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SdpSession_bases[] = {0};
static const char *swig_SdpSession_base_names[] = {0};
static swig_lua_class _wrap_class_SdpSession = { "SdpSession", "SdpSession", &SWIGTYPE_p_pj__SdpSession,_proxy__wrap_new_SdpSession, swig_delete_SdpSession, swig_SdpSession_methods, swig_SdpSession_attributes, &swig_SdpSession_Sf_SwigStatic, swig_SdpSession_meta, swig_SdpSession_bases, swig_SdpSession_base_names };

static int _wrap_MediaFmtChangedEvent_newWidth_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFmtChangedEvent::newWidth",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newWidth",1,"pj::MediaFmtChangedEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newWidth",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFmtChangedEvent,0))){
    SWIG_fail_ptr("MediaFmtChangedEvent_newWidth_set",1,SWIGTYPE_p_pj__MediaFmtChangedEvent);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->newWidth = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFmtChangedEvent_newWidth_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFmtChangedEvent::newWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newWidth",1,"pj::MediaFmtChangedEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFmtChangedEvent,0))){
    SWIG_fail_ptr("MediaFmtChangedEvent_newWidth_get",1,SWIGTYPE_p_pj__MediaFmtChangedEvent);
  }
  
  result = (unsigned int) ((arg1)->newWidth);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFmtChangedEvent_newHeight_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaFmtChangedEvent::newHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newHeight",1,"pj::MediaFmtChangedEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newHeight",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFmtChangedEvent,0))){
    SWIG_fail_ptr("MediaFmtChangedEvent_newHeight_set",1,SWIGTYPE_p_pj__MediaFmtChangedEvent);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->newHeight = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaFmtChangedEvent_newHeight_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaFmtChangedEvent::newHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaFmtChangedEvent::newHeight",1,"pj::MediaFmtChangedEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaFmtChangedEvent,0))){
    SWIG_fail_ptr("MediaFmtChangedEvent_newHeight_get",1,SWIGTYPE_p_pj__MediaFmtChangedEvent);
  }
  
  result = (unsigned int) ((arg1)->newHeight);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaFmtChangedEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  SWIG_check_num_args("pj::MediaFmtChangedEvent::MediaFmtChangedEvent",0,0)
  result = (pj::MediaFmtChangedEvent *)new pj::MediaFmtChangedEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaFmtChangedEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaFmtChangedEvent(void *obj) {
pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaFmtChangedEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaFmtChangedEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaFmtChangedEvent_attributes[] = {
    { "newWidth", _wrap_MediaFmtChangedEvent_newWidth_get, _wrap_MediaFmtChangedEvent_newWidth_set },
    { "newHeight", _wrap_MediaFmtChangedEvent_newHeight_get, _wrap_MediaFmtChangedEvent_newHeight_set },
    {0,0,0}
};
static swig_lua_method swig_MediaFmtChangedEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaFmtChangedEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaFmtChangedEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaFmtChangedEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaFmtChangedEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaFmtChangedEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaFmtChangedEvent_Sf_SwigStatic = {
    "MediaFmtChangedEvent",
    swig_MediaFmtChangedEvent_Sf_SwigStatic_methods,
    swig_MediaFmtChangedEvent_Sf_SwigStatic_attributes,
    swig_MediaFmtChangedEvent_Sf_SwigStatic_constants,
    swig_MediaFmtChangedEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaFmtChangedEvent_bases[] = {0};
static const char *swig_MediaFmtChangedEvent_base_names[] = {0};
static swig_lua_class _wrap_class_MediaFmtChangedEvent = { "MediaFmtChangedEvent", "MediaFmtChangedEvent", &SWIGTYPE_p_pj__MediaFmtChangedEvent,_proxy__wrap_new_MediaFmtChangedEvent, swig_delete_MediaFmtChangedEvent, swig_MediaFmtChangedEvent_methods, swig_MediaFmtChangedEvent_attributes, &swig_MediaFmtChangedEvent_Sf_SwigStatic, swig_MediaFmtChangedEvent_meta, swig_MediaFmtChangedEvent_bases, swig_MediaFmtChangedEvent_base_names };

static int _wrap_MediaEvent_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type arg2 ;
  
  SWIG_check_num_args("pj::MediaEvent::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaEvent::type",1,"pj::MediaEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaEvent::type",2,"pjmedia_event_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaEvent,0))){
    SWIG_fail_ptr("MediaEvent_type_set",1,SWIGTYPE_p_pj__MediaEvent);
  }
  
  arg2 = (pjmedia_event_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaEvent_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type result;
  
  SWIG_check_num_args("pj::MediaEvent::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaEvent::type",1,"pj::MediaEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaEvent,0))){
    SWIG_fail_ptr("MediaEvent_type_get",1,SWIGTYPE_p_pj__MediaEvent);
  }
  
  result = (pjmedia_event_type) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaEvent_pjMediaEvent_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("pj::MediaEvent::pjMediaEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaEvent::pjMediaEvent",1,"pj::MediaEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::MediaEvent::pjMediaEvent",2,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaEvent,0))){
    SWIG_fail_ptr("MediaEvent_pjMediaEvent_set",1,SWIGTYPE_p_pj__MediaEvent);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"MediaEvent_pjMediaEvent_set");
  if (arg1) (arg1)->pjMediaEvent = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaEvent_pjMediaEvent_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("pj::MediaEvent::pjMediaEvent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaEvent::pjMediaEvent",1,"pj::MediaEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaEvent,0))){
    SWIG_fail_ptr("MediaEvent_pjMediaEvent_get",1,SWIGTYPE_p_pj__MediaEvent);
  }
  
  result = (void *) ((arg1)->pjMediaEvent);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaEvent *result = 0 ;
  
  SWIG_check_num_args("pj::MediaEvent::MediaEvent",0,0)
  result = (pj::MediaEvent *)new pj::MediaEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaEvent(void *obj) {
pj::MediaEvent *arg1 = (pj::MediaEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaEvent_attributes[] = {
    { "type", _wrap_MediaEvent_type_get, _wrap_MediaEvent_type_set },
    { "pjMediaEvent", _wrap_MediaEvent_pjMediaEvent_get, _wrap_MediaEvent_pjMediaEvent_set },
    {0,0,0}
};
static swig_lua_method swig_MediaEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaEvent_Sf_SwigStatic = {
    "MediaEvent",
    swig_MediaEvent_Sf_SwigStatic_methods,
    swig_MediaEvent_Sf_SwigStatic_attributes,
    swig_MediaEvent_Sf_SwigStatic_constants,
    swig_MediaEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaEvent_bases[] = {0};
static const char *swig_MediaEvent_base_names[] = {0};
static swig_lua_class _wrap_class_MediaEvent = { "MediaEvent", "MediaEvent", &SWIGTYPE_p_pj__MediaEvent,_proxy__wrap_new_MediaEvent, swig_delete_MediaEvent, swig_MediaEvent_methods, swig_MediaEvent_attributes, &swig_MediaEvent_Sf_SwigStatic, swig_MediaEvent_meta, swig_MediaEvent_bases, swig_MediaEvent_base_names };

static int _wrap_MediaTransportInfo_srcRtpName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::MediaTransportInfo::srcRtpName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtpName",1,"pj::MediaTransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtpName",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaTransportInfo,0))){
    SWIG_fail_ptr("MediaTransportInfo_srcRtpName_set",1,SWIGTYPE_p_pj__MediaTransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->srcRtpName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaTransportInfo_srcRtpName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::MediaTransportInfo::srcRtpName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtpName",1,"pj::MediaTransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaTransportInfo,0))){
    SWIG_fail_ptr("MediaTransportInfo_srcRtpName_get",1,SWIGTYPE_p_pj__MediaTransportInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->srcRtpName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaTransportInfo_srcRtcpName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::MediaTransportInfo::srcRtcpName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtcpName",1,"pj::MediaTransportInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtcpName",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaTransportInfo,0))){
    SWIG_fail_ptr("MediaTransportInfo_srcRtcpName_set",1,SWIGTYPE_p_pj__MediaTransportInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->srcRtcpName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaTransportInfo_srcRtcpName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::MediaTransportInfo::srcRtcpName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaTransportInfo::srcRtcpName",1,"pj::MediaTransportInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaTransportInfo,0))){
    SWIG_fail_ptr("MediaTransportInfo_srcRtcpName_get",1,SWIGTYPE_p_pj__MediaTransportInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->srcRtcpName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaTransportInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaTransportInfo *result = 0 ;
  
  SWIG_check_num_args("pj::MediaTransportInfo::MediaTransportInfo",0,0)
  result = (pj::MediaTransportInfo *)new pj::MediaTransportInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaTransportInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaTransportInfo(void *obj) {
pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaTransportInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaTransportInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaTransportInfo_attributes[] = {
    { "srcRtpName", _wrap_MediaTransportInfo_srcRtpName_get, _wrap_MediaTransportInfo_srcRtpName_set },
    { "srcRtcpName", _wrap_MediaTransportInfo_srcRtcpName_get, _wrap_MediaTransportInfo_srcRtcpName_set },
    {0,0,0}
};
static swig_lua_method swig_MediaTransportInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_MediaTransportInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaTransportInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaTransportInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaTransportInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaTransportInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaTransportInfo_Sf_SwigStatic = {
    "MediaTransportInfo",
    swig_MediaTransportInfo_Sf_SwigStatic_methods,
    swig_MediaTransportInfo_Sf_SwigStatic_attributes,
    swig_MediaTransportInfo_Sf_SwigStatic_constants,
    swig_MediaTransportInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaTransportInfo_bases[] = {0};
static const char *swig_MediaTransportInfo_base_names[] = {0};
static swig_lua_class _wrap_class_MediaTransportInfo = { "MediaTransportInfo", "MediaTransportInfo", &SWIGTYPE_p_pj__MediaTransportInfo,_proxy__wrap_new_MediaTransportInfo, swig_delete_MediaTransportInfo, swig_MediaTransportInfo_methods, swig_MediaTransportInfo_attributes, &swig_MediaTransportInfo_Sf_SwigStatic, swig_MediaTransportInfo_meta, swig_MediaTransportInfo_bases, swig_MediaTransportInfo_base_names };

static int _wrap_CallSetting_flag_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallSetting::flag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::flag",1,"pj::CallSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallSetting::flag",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_flag_set",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->flag = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_flag_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallSetting::flag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::flag",1,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_flag_get",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  result = (unsigned int) ((arg1)->flag);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_reqKeyframeMethod_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallSetting::reqKeyframeMethod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::reqKeyframeMethod",1,"pj::CallSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallSetting::reqKeyframeMethod",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_reqKeyframeMethod_set",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->reqKeyframeMethod = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_reqKeyframeMethod_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallSetting::reqKeyframeMethod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::reqKeyframeMethod",1,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_reqKeyframeMethod_get",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  result = (unsigned int) ((arg1)->reqKeyframeMethod);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_audioCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallSetting::audioCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::audioCount",1,"pj::CallSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallSetting::audioCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_audioCount_set",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->audioCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_audioCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallSetting::audioCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::audioCount",1,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_audioCount_get",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  result = (unsigned int) ((arg1)->audioCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_videoCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallSetting::videoCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::videoCount",1,"pj::CallSetting *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallSetting::videoCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_videoCount_set",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->videoCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSetting_videoCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallSetting::videoCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::videoCount",1,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_videoCount_get",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  result = (unsigned int) ((arg1)->videoCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallSetting__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj_bool_t arg1 ;
  pj_bool_t *argp1 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::CallSetting::CallSetting",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("pj::CallSetting::CallSetting",1,"pj_bool_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_pj_bool_t,0))){
    SWIG_fail_ptr("new_CallSetting",1,SWIGTYPE_p_pj_bool_t);
  }
  arg1 = *argp1;
  
  result = (pj::CallSetting *)new pj::CallSetting(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallSetting__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::CallSetting::CallSetting",0,0)
  result = (pj::CallSetting *)new pj::CallSetting();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallSetting(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CallSetting__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj_bool_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CallSetting__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CallSetting'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::CallSetting::CallSetting(pj_bool_t)\n"
    "    pj::CallSetting::CallSetting()\n");
  lua_error(L);return 0;
}


static int _wrap_CallSetting_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::CallSetting::isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSetting::isEmpty",1,"pj::CallSetting const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallSetting_isEmpty",1,SWIGTYPE_p_pj__CallSetting);
  }
  
  result = (bool)((pj::CallSetting const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallSetting(void *obj) {
pj::CallSetting *arg1 = (pj::CallSetting *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallSetting(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallSetting);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallSetting_attributes[] = {
    { "flag", _wrap_CallSetting_flag_get, _wrap_CallSetting_flag_set },
    { "reqKeyframeMethod", _wrap_CallSetting_reqKeyframeMethod_get, _wrap_CallSetting_reqKeyframeMethod_set },
    { "audioCount", _wrap_CallSetting_audioCount_get, _wrap_CallSetting_audioCount_set },
    { "videoCount", _wrap_CallSetting_videoCount_get, _wrap_CallSetting_videoCount_set },
    {0,0,0}
};
static swig_lua_method swig_CallSetting_methods[]= {
    { "isEmpty", _wrap_CallSetting_isEmpty},
    {0,0}
};
static swig_lua_method swig_CallSetting_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallSetting_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallSetting_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallSetting_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallSetting_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallSetting_Sf_SwigStatic = {
    "CallSetting",
    swig_CallSetting_Sf_SwigStatic_methods,
    swig_CallSetting_Sf_SwigStatic_attributes,
    swig_CallSetting_Sf_SwigStatic_constants,
    swig_CallSetting_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallSetting_bases[] = {0};
static const char *swig_CallSetting_base_names[] = {0};
static swig_lua_class _wrap_class_CallSetting = { "CallSetting", "CallSetting", &SWIGTYPE_p_pj__CallSetting,_proxy__wrap_new_CallSetting, swig_delete_CallSetting, swig_CallSetting_methods, swig_CallSetting_attributes, &swig_CallSetting_Sf_SwigStatic, swig_CallSetting_meta, swig_CallSetting_bases, swig_CallSetting_base_names };

static int _wrap_CallMediaInfo_index_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::index",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::index",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_index_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->index = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_index_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallMediaInfo::index",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::index",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_index_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (unsigned int) ((arg1)->index);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::type",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::type",2,"pjmedia_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_type_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (pjmedia_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type result;
  
  SWIG_check_num_args("pj::CallMediaInfo::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::type",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_type_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (pjmedia_type) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_dir_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::dir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::dir",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::dir",2,"pjmedia_dir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_dir_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (pjmedia_dir)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_dir_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir result;
  
  SWIG_check_num_args("pj::CallMediaInfo::dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::dir",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_dir_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (pjmedia_dir) ((arg1)->dir);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::status",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::status",2,"pjsua_call_media_status");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_status_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (pjsua_call_media_status)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status result;
  
  SWIG_check_num_args("pj::CallMediaInfo::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::status",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_status_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (pjsua_call_media_status) ((arg1)->status);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_audioConfSlot_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::audioConfSlot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::audioConfSlot",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::audioConfSlot",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_audioConfSlot_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->audioConfSlot = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_audioConfSlot_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::CallMediaInfo::audioConfSlot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::audioConfSlot",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_audioConfSlot_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (int) ((arg1)->audioConfSlot);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_videoIncomingWindowId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::videoIncomingWindowId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::videoIncomingWindowId",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::videoIncomingWindowId",2,"pjsua_vid_win_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_videoIncomingWindowId_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (pjsua_vid_win_id)lua_tonumber(L, 2);
  if (arg1) (arg1)->videoIncomingWindowId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_videoIncomingWindowId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id result;
  
  SWIG_check_num_args("pj::CallMediaInfo::videoIncomingWindowId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::videoIncomingWindowId",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_videoIncomingWindowId_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (pjsua_vid_win_id) ((arg1)->videoIncomingWindowId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_videoCapDev_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::videoCapDev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::videoCapDev",1,"pj::CallMediaInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallMediaInfo::videoCapDev",2,"pjmedia_vid_dev_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_videoCapDev_set",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  arg2 = (pjmedia_vid_dev_index)lua_tonumber(L, 2);
  if (arg1) (arg1)->videoCapDev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfo_videoCapDev_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  SWIG_check_num_args("pj::CallMediaInfo::videoCapDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallMediaInfo::videoCapDev",1,"pj::CallMediaInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfo_videoCapDev_get",1,SWIGTYPE_p_pj__CallMediaInfo);
  }
  
  result = (pjmedia_vid_dev_index) ((arg1)->videoCapDev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallMediaInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallMediaInfo *result = 0 ;
  
  SWIG_check_num_args("pj::CallMediaInfo::CallMediaInfo",0,0)
  result = (pj::CallMediaInfo *)new pj::CallMediaInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallMediaInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallMediaInfo(void *obj) {
pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallMediaInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallMediaInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallMediaInfo_attributes[] = {
    { "index", _wrap_CallMediaInfo_index_get, _wrap_CallMediaInfo_index_set },
    { "type", _wrap_CallMediaInfo_type_get, _wrap_CallMediaInfo_type_set },
    { "dir", _wrap_CallMediaInfo_dir_get, _wrap_CallMediaInfo_dir_set },
    { "status", _wrap_CallMediaInfo_status_get, _wrap_CallMediaInfo_status_set },
    { "audioConfSlot", _wrap_CallMediaInfo_audioConfSlot_get, _wrap_CallMediaInfo_audioConfSlot_set },
    { "videoIncomingWindowId", _wrap_CallMediaInfo_videoIncomingWindowId_get, _wrap_CallMediaInfo_videoIncomingWindowId_set },
    { "videoCapDev", _wrap_CallMediaInfo_videoCapDev_get, _wrap_CallMediaInfo_videoCapDev_set },
    {0,0,0}
};
static swig_lua_method swig_CallMediaInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_CallMediaInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallMediaInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallMediaInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallMediaInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallMediaInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallMediaInfo_Sf_SwigStatic = {
    "CallMediaInfo",
    swig_CallMediaInfo_Sf_SwigStatic_methods,
    swig_CallMediaInfo_Sf_SwigStatic_attributes,
    swig_CallMediaInfo_Sf_SwigStatic_constants,
    swig_CallMediaInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallMediaInfo_bases[] = {0};
static const char *swig_CallMediaInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CallMediaInfo = { "CallMediaInfo", "CallMediaInfo", &SWIGTYPE_p_pj__CallMediaInfo,_proxy__wrap_new_CallMediaInfo, swig_delete_CallMediaInfo, swig_CallMediaInfo_methods, swig_CallMediaInfo_attributes, &swig_CallMediaInfo_Sf_SwigStatic, swig_CallMediaInfo_meta, swig_CallMediaInfo_bases, swig_CallMediaInfo_base_names };

static int _wrap_CallInfo_id_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::id",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::id",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::id",2,"pjsua_call_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_id_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (pjsua_call_id)lua_tonumber(L, 2);
  if (arg1) (arg1)->id = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_id_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id result;
  
  SWIG_check_num_args("pj::CallInfo::id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::id",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_id_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pjsua_call_id) ((arg1)->id);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_role_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::role",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::role",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::role",2,"pjsip_role_e");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_role_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (pjsip_role_e)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->role = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_role_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e result;
  
  SWIG_check_num_args("pj::CallInfo::role",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::role",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_role_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pjsip_role_e) ((arg1)->role);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_accId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::accId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::accId",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::accId",2,"pjsua_acc_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_accId_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (pjsua_acc_id)lua_tonumber(L, 2);
  if (arg1) (arg1)->accId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_accId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id result;
  
  SWIG_check_num_args("pj::CallInfo::accId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::accId",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_accId_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pjsua_acc_id) ((arg1)->accId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_localUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::localUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::localUri",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::localUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_localUri_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->localUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_localUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::localUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::localUri",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_localUri_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->localUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_localContact_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::localContact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::localContact",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::localContact",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_localContact_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->localContact = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_localContact_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::localContact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::localContact",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_localContact_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->localContact);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remoteUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::remoteUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remoteUri",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::remoteUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remoteUri_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->remoteUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remoteUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::remoteUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remoteUri",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remoteUri_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->remoteUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remoteContact_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::remoteContact",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remoteContact",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::remoteContact",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remoteContact_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->remoteContact = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remoteContact_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::remoteContact",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remoteContact",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remoteContact_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->remoteContact);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_callIdString_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::callIdString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::callIdString",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::callIdString",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_callIdString_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->callIdString = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_callIdString_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::callIdString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::callIdString",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_callIdString_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->callIdString);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_setting_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  SWIG_check_num_args("pj::CallInfo::setting",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::setting",1,"pj::CallInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallInfo::setting",2,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_setting_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallInfo_setting_set",2,SWIGTYPE_p_pj__CallSetting);
  }
  
  if (arg1) (arg1)->setting = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_setting_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::setting",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::setting",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_setting_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::CallSetting *)& ((arg1)->setting);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::state",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::state",2,"pjsip_inv_state");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_state_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (pjsip_inv_state)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state result;
  
  SWIG_check_num_args("pj::CallInfo::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::state",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_state_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pjsip_inv_state) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_stateText_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::stateText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::stateText",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::stateText",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_stateText_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->stateText = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_stateText_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::stateText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::stateText",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_stateText_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->stateText);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_lastStatusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::lastStatusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::lastStatusCode",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::lastStatusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_lastStatusCode_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastStatusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_lastStatusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::CallInfo::lastStatusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::lastStatusCode",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_lastStatusCode_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pjsip_status_code) ((arg1)->lastStatusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_lastReason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallInfo::lastReason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::lastReason",1,"pj::CallInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallInfo::lastReason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_lastReason_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->lastReason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_lastReason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::lastReason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::lastReason",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_lastReason_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::string *) & ((arg1)->lastReason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_media_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  SWIG_check_num_args("pj::CallInfo::media",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::media",1,"pj::CallInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallInfo::media",2,"pj::CallMediaInfoVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_media_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallInfo_media_set",2,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  if (arg1) (arg1)->media = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_media_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::media",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::media",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_media_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::CallMediaInfoVector *)& ((arg1)->media);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_provMedia_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  SWIG_check_num_args("pj::CallInfo::provMedia",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::provMedia",1,"pj::CallInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallInfo::provMedia",2,"pj::CallMediaInfoVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_provMedia_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallInfo_provMedia_set",2,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  if (arg1) (arg1)->provMedia = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_provMedia_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::provMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::provMedia",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_provMedia_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::CallMediaInfoVector *)& ((arg1)->provMedia);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_connectDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  SWIG_check_num_args("pj::CallInfo::connectDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::connectDuration",1,"pj::CallInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallInfo::connectDuration",2,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_connectDuration_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("CallInfo_connectDuration_set",2,SWIGTYPE_p_pj__TimeVal);
  }
  
  if (arg1) (arg1)->connectDuration = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_connectDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::connectDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::connectDuration",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_connectDuration_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::TimeVal *)& ((arg1)->connectDuration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimeVal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_totalDuration_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  SWIG_check_num_args("pj::CallInfo::totalDuration",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::totalDuration",1,"pj::CallInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallInfo::totalDuration",2,"pj::TimeVal *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_totalDuration_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__TimeVal,0))){
    SWIG_fail_ptr("CallInfo_totalDuration_set",2,SWIGTYPE_p_pj__TimeVal);
  }
  
  if (arg1) (arg1)->totalDuration = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_totalDuration_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::totalDuration",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::totalDuration",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_totalDuration_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (pj::TimeVal *)& ((arg1)->totalDuration);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__TimeVal,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remOfferer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::remOfferer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remOfferer",1,"pj::CallInfo *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::CallInfo::remOfferer",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remOfferer_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->remOfferer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remOfferer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::CallInfo::remOfferer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remOfferer",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remOfferer_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (bool) ((arg1)->remOfferer);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remAudioCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::remAudioCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remAudioCount",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::remAudioCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remAudioCount_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->remAudioCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remAudioCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallInfo::remAudioCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remAudioCount",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remAudioCount_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (unsigned int) ((arg1)->remAudioCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remVideoCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallInfo::remVideoCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remVideoCount",1,"pj::CallInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallInfo::remVideoCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remVideoCount_set",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->remVideoCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallInfo_remVideoCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallInfo::remVideoCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallInfo::remVideoCount",1,"pj::CallInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallInfo,0))){
    SWIG_fail_ptr("CallInfo_remVideoCount_get",1,SWIGTYPE_p_pj__CallInfo);
  }
  
  result = (unsigned int) ((arg1)->remVideoCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallInfo *result = 0 ;
  
  SWIG_check_num_args("pj::CallInfo::CallInfo",0,0)
  result = (pj::CallInfo *)new pj::CallInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallInfo(void *obj) {
pj::CallInfo *arg1 = (pj::CallInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallInfo_attributes[] = {
    { "id", _wrap_CallInfo_id_get, _wrap_CallInfo_id_set },
    { "role", _wrap_CallInfo_role_get, _wrap_CallInfo_role_set },
    { "accId", _wrap_CallInfo_accId_get, _wrap_CallInfo_accId_set },
    { "localUri", _wrap_CallInfo_localUri_get, _wrap_CallInfo_localUri_set },
    { "localContact", _wrap_CallInfo_localContact_get, _wrap_CallInfo_localContact_set },
    { "remoteUri", _wrap_CallInfo_remoteUri_get, _wrap_CallInfo_remoteUri_set },
    { "remoteContact", _wrap_CallInfo_remoteContact_get, _wrap_CallInfo_remoteContact_set },
    { "callIdString", _wrap_CallInfo_callIdString_get, _wrap_CallInfo_callIdString_set },
    { "setting", _wrap_CallInfo_setting_get, _wrap_CallInfo_setting_set },
    { "state", _wrap_CallInfo_state_get, _wrap_CallInfo_state_set },
    { "stateText", _wrap_CallInfo_stateText_get, _wrap_CallInfo_stateText_set },
    { "lastStatusCode", _wrap_CallInfo_lastStatusCode_get, _wrap_CallInfo_lastStatusCode_set },
    { "lastReason", _wrap_CallInfo_lastReason_get, _wrap_CallInfo_lastReason_set },
    { "media", _wrap_CallInfo_media_get, _wrap_CallInfo_media_set },
    { "provMedia", _wrap_CallInfo_provMedia_get, _wrap_CallInfo_provMedia_set },
    { "connectDuration", _wrap_CallInfo_connectDuration_get, _wrap_CallInfo_connectDuration_set },
    { "totalDuration", _wrap_CallInfo_totalDuration_get, _wrap_CallInfo_totalDuration_set },
    { "remOfferer", _wrap_CallInfo_remOfferer_get, _wrap_CallInfo_remOfferer_set },
    { "remAudioCount", _wrap_CallInfo_remAudioCount_get, _wrap_CallInfo_remAudioCount_set },
    { "remVideoCount", _wrap_CallInfo_remVideoCount_get, _wrap_CallInfo_remVideoCount_set },
    {0,0,0}
};
static swig_lua_method swig_CallInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_CallInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallInfo_Sf_SwigStatic = {
    "CallInfo",
    swig_CallInfo_Sf_SwigStatic_methods,
    swig_CallInfo_Sf_SwigStatic_attributes,
    swig_CallInfo_Sf_SwigStatic_constants,
    swig_CallInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallInfo_bases[] = {0};
static const char *swig_CallInfo_base_names[] = {0};
static swig_lua_class _wrap_class_CallInfo = { "CallInfo", "CallInfo", &SWIGTYPE_p_pj__CallInfo,_proxy__wrap_new_CallInfo, swig_delete_CallInfo, swig_CallInfo_methods, swig_CallInfo_attributes, &swig_CallInfo_Sf_SwigStatic, swig_CallInfo_meta, swig_CallInfo_bases, swig_CallInfo_base_names };

static int _wrap_StreamInfo_type_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::type",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::type",2,"pjmedia_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_type_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  arg2 = (pjmedia_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_type_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type result;
  
  SWIG_check_num_args("pj::StreamInfo::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::type",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_type_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pjmedia_type) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_proto_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::proto",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::proto",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::proto",2,"pjmedia_tp_proto");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_proto_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  arg2 = (pjmedia_tp_proto)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->proto = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_proto_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto result;
  
  SWIG_check_num_args("pj::StreamInfo::proto",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::proto",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_proto_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pjmedia_tp_proto) ((arg1)->proto);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_dir_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::dir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::dir",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::dir",2,"pjmedia_dir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_dir_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  arg2 = (pjmedia_dir)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_dir_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir result;
  
  SWIG_check_num_args("pj::StreamInfo::dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::dir",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_dir_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pjmedia_dir) ((arg1)->dir);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_remoteRtpAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::StreamInfo::remoteRtpAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::remoteRtpAddress",1,"pj::StreamInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::StreamInfo::remoteRtpAddress",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_remoteRtpAddress_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->remoteRtpAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_remoteRtpAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::StreamInfo::remoteRtpAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::remoteRtpAddress",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_remoteRtpAddress_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->remoteRtpAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_remoteRtcpAddress_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::StreamInfo::remoteRtcpAddress",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::remoteRtcpAddress",1,"pj::StreamInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::StreamInfo::remoteRtcpAddress",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_remoteRtcpAddress_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->remoteRtcpAddress = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_remoteRtcpAddress_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::StreamInfo::remoteRtcpAddress",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::remoteRtcpAddress",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_remoteRtcpAddress_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->remoteRtcpAddress);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_txPt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::txPt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::txPt",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::txPt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_txPt_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->txPt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_txPt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::StreamInfo::txPt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::txPt",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_txPt_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (unsigned int) ((arg1)->txPt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_rxPt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::rxPt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::rxPt",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::rxPt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_rxPt_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rxPt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_rxPt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::StreamInfo::rxPt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::rxPt",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_rxPt_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (unsigned int) ((arg1)->rxPt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::StreamInfo::codecName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecName",1,"pj::StreamInfo *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::StreamInfo::codecName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecName_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->codecName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::StreamInfo::codecName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecName",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecName_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pj::string *) & ((arg1)->codecName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecClockRate_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::StreamInfo::codecClockRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecClockRate",1,"pj::StreamInfo *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::StreamInfo::codecClockRate",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecClockRate_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->codecClockRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecClockRate_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::StreamInfo::codecClockRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecClockRate",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecClockRate_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (unsigned int) ((arg1)->codecClockRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecParam_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam arg2 = (pj::CodecParam) 0 ;
  
  SWIG_check_num_args("pj::StreamInfo::codecParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecParam",1,"pj::StreamInfo *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::StreamInfo::codecParam",2,"pj::CodecParam");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecParam_set",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  arg2=(pj::CodecParam)SWIG_MustGetPtr(L,2,0,0,2,"StreamInfo_codecParam_set");
  if (arg1) (arg1)->codecParam = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamInfo_codecParam_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam result;
  
  SWIG_check_num_args("pj::StreamInfo::codecParam",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamInfo::codecParam",1,"pj::StreamInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamInfo,0))){
    SWIG_fail_ptr("StreamInfo_codecParam_get",1,SWIGTYPE_p_pj__StreamInfo);
  }
  
  result = (pj::CodecParam) ((arg1)->codecParam);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StreamInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamInfo *result = 0 ;
  
  SWIG_check_num_args("pj::StreamInfo::StreamInfo",0,0)
  result = (pj::StreamInfo *)new pj::StreamInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__StreamInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StreamInfo(void *obj) {
pj::StreamInfo *arg1 = (pj::StreamInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_StreamInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StreamInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StreamInfo_attributes[] = {
    { "type", _wrap_StreamInfo_type_get, _wrap_StreamInfo_type_set },
    { "proto", _wrap_StreamInfo_proto_get, _wrap_StreamInfo_proto_set },
    { "dir", _wrap_StreamInfo_dir_get, _wrap_StreamInfo_dir_set },
    { "remoteRtpAddress", _wrap_StreamInfo_remoteRtpAddress_get, _wrap_StreamInfo_remoteRtpAddress_set },
    { "remoteRtcpAddress", _wrap_StreamInfo_remoteRtcpAddress_get, _wrap_StreamInfo_remoteRtcpAddress_set },
    { "txPt", _wrap_StreamInfo_txPt_get, _wrap_StreamInfo_txPt_set },
    { "rxPt", _wrap_StreamInfo_rxPt_get, _wrap_StreamInfo_rxPt_set },
    { "codecName", _wrap_StreamInfo_codecName_get, _wrap_StreamInfo_codecName_set },
    { "codecClockRate", _wrap_StreamInfo_codecClockRate_get, _wrap_StreamInfo_codecClockRate_set },
    { "codecParam", _wrap_StreamInfo_codecParam_get, _wrap_StreamInfo_codecParam_set },
    {0,0,0}
};
static swig_lua_method swig_StreamInfo_methods[]= {
    {0,0}
};
static swig_lua_method swig_StreamInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StreamInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StreamInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StreamInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StreamInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StreamInfo_Sf_SwigStatic = {
    "StreamInfo",
    swig_StreamInfo_Sf_SwigStatic_methods,
    swig_StreamInfo_Sf_SwigStatic_attributes,
    swig_StreamInfo_Sf_SwigStatic_constants,
    swig_StreamInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StreamInfo_bases[] = {0};
static const char *swig_StreamInfo_base_names[] = {0};
static swig_lua_class _wrap_class_StreamInfo = { "StreamInfo", "StreamInfo", &SWIGTYPE_p_pj__StreamInfo,_proxy__wrap_new_StreamInfo, swig_delete_StreamInfo, swig_StreamInfo_methods, swig_StreamInfo_attributes, &swig_StreamInfo_Sf_SwigStatic, swig_StreamInfo_meta, swig_StreamInfo_bases, swig_StreamInfo_base_names };

static int _wrap_StreamStat_rtcp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *arg2 = (pj::RtcpStat *) 0 ;
  
  SWIG_check_num_args("pj::StreamStat::rtcp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamStat::rtcp",1,"pj::StreamStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::StreamStat::rtcp",2,"pj::RtcpStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamStat,0))){
    SWIG_fail_ptr("StreamStat_rtcp_set",1,SWIGTYPE_p_pj__StreamStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__RtcpStat,0))){
    SWIG_fail_ptr("StreamStat_rtcp_set",2,SWIGTYPE_p_pj__RtcpStat);
  }
  
  if (arg1) (arg1)->rtcp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamStat_rtcp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *result = 0 ;
  
  SWIG_check_num_args("pj::StreamStat::rtcp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamStat::rtcp",1,"pj::StreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamStat,0))){
    SWIG_fail_ptr("StreamStat_rtcp_get",1,SWIGTYPE_p_pj__StreamStat);
  }
  
  result = (pj::RtcpStat *)& ((arg1)->rtcp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__RtcpStat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamStat_jbuf_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *arg2 = (pj::JbufState *) 0 ;
  
  SWIG_check_num_args("pj::StreamStat::jbuf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamStat::jbuf",1,"pj::StreamStat *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::StreamStat::jbuf",2,"pj::JbufState *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamStat,0))){
    SWIG_fail_ptr("StreamStat_jbuf_set",1,SWIGTYPE_p_pj__StreamStat);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__JbufState,0))){
    SWIG_fail_ptr("StreamStat_jbuf_set",2,SWIGTYPE_p_pj__JbufState);
  }
  
  if (arg1) (arg1)->jbuf = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StreamStat_jbuf_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *result = 0 ;
  
  SWIG_check_num_args("pj::StreamStat::jbuf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::StreamStat::jbuf",1,"pj::StreamStat *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__StreamStat,0))){
    SWIG_fail_ptr("StreamStat_jbuf_get",1,SWIGTYPE_p_pj__StreamStat);
  }
  
  result = (pj::JbufState *)& ((arg1)->jbuf);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__JbufState,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StreamStat(lua_State* L) {
  int SWIG_arg = 0;
  pj::StreamStat *result = 0 ;
  
  SWIG_check_num_args("pj::StreamStat::StreamStat",0,0)
  result = (pj::StreamStat *)new pj::StreamStat();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__StreamStat,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StreamStat(void *obj) {
pj::StreamStat *arg1 = (pj::StreamStat *) obj;
delete arg1;
}
static int _proxy__wrap_new_StreamStat(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_StreamStat);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_StreamStat_attributes[] = {
    { "rtcp", _wrap_StreamStat_rtcp_get, _wrap_StreamStat_rtcp_set },
    { "jbuf", _wrap_StreamStat_jbuf_get, _wrap_StreamStat_jbuf_set },
    {0,0,0}
};
static swig_lua_method swig_StreamStat_methods[]= {
    {0,0}
};
static swig_lua_method swig_StreamStat_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_StreamStat_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_StreamStat_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_StreamStat_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_StreamStat_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_StreamStat_Sf_SwigStatic = {
    "StreamStat",
    swig_StreamStat_Sf_SwigStatic_methods,
    swig_StreamStat_Sf_SwigStatic_attributes,
    swig_StreamStat_Sf_SwigStatic_constants,
    swig_StreamStat_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_StreamStat_bases[] = {0};
static const char *swig_StreamStat_base_names[] = {0};
static swig_lua_class _wrap_class_StreamStat = { "StreamStat", "StreamStat", &SWIGTYPE_p_pj__StreamStat,_proxy__wrap_new_StreamStat, swig_delete_StreamStat, swig_StreamStat_methods, swig_StreamStat_attributes, &swig_StreamStat_Sf_SwigStatic, swig_StreamStat_meta, swig_StreamStat_bases, swig_StreamStat_base_names };

static int _wrap_OnCallStateParam_e_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  SWIG_check_num_args("pj::OnCallStateParam::e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallStateParam::e",1,"pj::OnCallStateParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallStateParam::e",2,"pj::SipEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallStateParam,0))){
    SWIG_fail_ptr("OnCallStateParam_e_set",1,SWIGTYPE_p_pj__OnCallStateParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("OnCallStateParam_e_set",2,SWIGTYPE_p_pj__SipEvent);
  }
  
  if (arg1) (arg1)->e = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallStateParam_e_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallStateParam::e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallStateParam::e",1,"pj::OnCallStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallStateParam,0))){
    SWIG_fail_ptr("OnCallStateParam_e_get",1,SWIGTYPE_p_pj__OnCallStateParam);
  }
  
  result = (pj::SipEvent *)& ((arg1)->e);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallStateParam::OnCallStateParam",0,0)
  result = (pj::OnCallStateParam *)new pj::OnCallStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallStateParam(void *obj) {
pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallStateParam_attributes[] = {
    { "e", _wrap_OnCallStateParam_e_get, _wrap_OnCallStateParam_e_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallStateParam_Sf_SwigStatic = {
    "OnCallStateParam",
    swig_OnCallStateParam_Sf_SwigStatic_methods,
    swig_OnCallStateParam_Sf_SwigStatic_attributes,
    swig_OnCallStateParam_Sf_SwigStatic_constants,
    swig_OnCallStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallStateParam_bases[] = {0};
static const char *swig_OnCallStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallStateParam = { "OnCallStateParam", "OnCallStateParam", &SWIGTYPE_p_pj__OnCallStateParam,_proxy__wrap_new_OnCallStateParam, swig_delete_OnCallStateParam, swig_OnCallStateParam_methods, swig_OnCallStateParam_attributes, &swig_OnCallStateParam_Sf_SwigStatic, swig_OnCallStateParam_meta, swig_OnCallStateParam_bases, swig_OnCallStateParam_base_names };

static int _wrap_OnCallTsxStateParam_e_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  SWIG_check_num_args("pj::OnCallTsxStateParam::e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTsxStateParam::e",1,"pj::OnCallTsxStateParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallTsxStateParam::e",2,"pj::SipEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTsxStateParam,0))){
    SWIG_fail_ptr("OnCallTsxStateParam_e_set",1,SWIGTYPE_p_pj__OnCallTsxStateParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("OnCallTsxStateParam_e_set",2,SWIGTYPE_p_pj__SipEvent);
  }
  
  if (arg1) (arg1)->e = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTsxStateParam_e_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTsxStateParam::e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTsxStateParam::e",1,"pj::OnCallTsxStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTsxStateParam,0))){
    SWIG_fail_ptr("OnCallTsxStateParam_e_get",1,SWIGTYPE_p_pj__OnCallTsxStateParam);
  }
  
  result = (pj::SipEvent *)& ((arg1)->e);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallTsxStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTsxStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTsxStateParam::OnCallTsxStateParam",0,0)
  result = (pj::OnCallTsxStateParam *)new pj::OnCallTsxStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallTsxStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallTsxStateParam(void *obj) {
pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallTsxStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallTsxStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallTsxStateParam_attributes[] = {
    { "e", _wrap_OnCallTsxStateParam_e_get, _wrap_OnCallTsxStateParam_e_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallTsxStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallTsxStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallTsxStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallTsxStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallTsxStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallTsxStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallTsxStateParam_Sf_SwigStatic = {
    "OnCallTsxStateParam",
    swig_OnCallTsxStateParam_Sf_SwigStatic_methods,
    swig_OnCallTsxStateParam_Sf_SwigStatic_attributes,
    swig_OnCallTsxStateParam_Sf_SwigStatic_constants,
    swig_OnCallTsxStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallTsxStateParam_bases[] = {0};
static const char *swig_OnCallTsxStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallTsxStateParam = { "OnCallTsxStateParam", "OnCallTsxStateParam", &SWIGTYPE_p_pj__OnCallTsxStateParam,_proxy__wrap_new_OnCallTsxStateParam, swig_delete_OnCallTsxStateParam, swig_OnCallTsxStateParam_methods, swig_OnCallTsxStateParam_attributes, &swig_OnCallTsxStateParam_Sf_SwigStatic, swig_OnCallTsxStateParam_meta, swig_OnCallTsxStateParam_bases, swig_OnCallTsxStateParam_base_names };

static int _wrap_new_OnCallMediaStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallMediaStateParam::OnCallMediaStateParam",0,0)
  result = (pj::OnCallMediaStateParam *)new pj::OnCallMediaStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallMediaStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallMediaStateParam(void *obj) {
pj::OnCallMediaStateParam *arg1 = (pj::OnCallMediaStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallMediaStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallMediaStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallMediaStateParam_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OnCallMediaStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallMediaStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallMediaStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallMediaStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallMediaStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallMediaStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallMediaStateParam_Sf_SwigStatic = {
    "OnCallMediaStateParam",
    swig_OnCallMediaStateParam_Sf_SwigStatic_methods,
    swig_OnCallMediaStateParam_Sf_SwigStatic_attributes,
    swig_OnCallMediaStateParam_Sf_SwigStatic_constants,
    swig_OnCallMediaStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallMediaStateParam_bases[] = {0};
static const char *swig_OnCallMediaStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallMediaStateParam = { "OnCallMediaStateParam", "OnCallMediaStateParam", &SWIGTYPE_p_pj__OnCallMediaStateParam,_proxy__wrap_new_OnCallMediaStateParam, swig_delete_OnCallMediaStateParam, swig_OnCallMediaStateParam_methods, swig_OnCallMediaStateParam_attributes, &swig_OnCallMediaStateParam_Sf_SwigStatic, swig_OnCallMediaStateParam_meta, swig_OnCallMediaStateParam_bases, swig_OnCallMediaStateParam_base_names };

static int _wrap_OnCallSdpCreatedParam_sdp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  SWIG_check_num_args("pj::OnCallSdpCreatedParam::sdp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::sdp",1,"pj::OnCallSdpCreatedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::sdp",2,"pj::SdpSession *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallSdpCreatedParam,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_sdp_set",1,SWIGTYPE_p_pj__OnCallSdpCreatedParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_sdp_set",2,SWIGTYPE_p_pj__SdpSession);
  }
  
  if (arg1) (arg1)->sdp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallSdpCreatedParam_sdp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallSdpCreatedParam::sdp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::sdp",1,"pj::OnCallSdpCreatedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallSdpCreatedParam,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_sdp_get",1,SWIGTYPE_p_pj__OnCallSdpCreatedParam);
  }
  
  result = (pj::SdpSession *)& ((arg1)->sdp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SdpSession,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallSdpCreatedParam_remSdp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  SWIG_check_num_args("pj::OnCallSdpCreatedParam::remSdp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::remSdp",1,"pj::OnCallSdpCreatedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::remSdp",2,"pj::SdpSession *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallSdpCreatedParam,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_remSdp_set",1,SWIGTYPE_p_pj__OnCallSdpCreatedParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_remSdp_set",2,SWIGTYPE_p_pj__SdpSession);
  }
  
  if (arg1) (arg1)->remSdp = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallSdpCreatedParam_remSdp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallSdpCreatedParam::remSdp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallSdpCreatedParam::remSdp",1,"pj::OnCallSdpCreatedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallSdpCreatedParam,0))){
    SWIG_fail_ptr("OnCallSdpCreatedParam_remSdp_get",1,SWIGTYPE_p_pj__OnCallSdpCreatedParam);
  }
  
  result = (pj::SdpSession *)& ((arg1)->remSdp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SdpSession,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallSdpCreatedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallSdpCreatedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallSdpCreatedParam::OnCallSdpCreatedParam",0,0)
  result = (pj::OnCallSdpCreatedParam *)new pj::OnCallSdpCreatedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallSdpCreatedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallSdpCreatedParam(void *obj) {
pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallSdpCreatedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallSdpCreatedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallSdpCreatedParam_attributes[] = {
    { "sdp", _wrap_OnCallSdpCreatedParam_sdp_get, _wrap_OnCallSdpCreatedParam_sdp_set },
    { "remSdp", _wrap_OnCallSdpCreatedParam_remSdp_get, _wrap_OnCallSdpCreatedParam_remSdp_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallSdpCreatedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallSdpCreatedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallSdpCreatedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallSdpCreatedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallSdpCreatedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallSdpCreatedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallSdpCreatedParam_Sf_SwigStatic = {
    "OnCallSdpCreatedParam",
    swig_OnCallSdpCreatedParam_Sf_SwigStatic_methods,
    swig_OnCallSdpCreatedParam_Sf_SwigStatic_attributes,
    swig_OnCallSdpCreatedParam_Sf_SwigStatic_constants,
    swig_OnCallSdpCreatedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallSdpCreatedParam_bases[] = {0};
static const char *swig_OnCallSdpCreatedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallSdpCreatedParam = { "OnCallSdpCreatedParam", "OnCallSdpCreatedParam", &SWIGTYPE_p_pj__OnCallSdpCreatedParam,_proxy__wrap_new_OnCallSdpCreatedParam, swig_delete_OnCallSdpCreatedParam, swig_OnCallSdpCreatedParam_methods, swig_OnCallSdpCreatedParam_attributes, &swig_OnCallSdpCreatedParam_Sf_SwigStatic, swig_OnCallSdpCreatedParam_meta, swig_OnCallSdpCreatedParam_bases, swig_OnCallSdpCreatedParam_base_names };

static int _wrap_OnStreamCreatedParam_stream_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::stream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::stream",1,"pj::OnStreamCreatedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnStreamCreatedParam::stream",2,"pj::MediaStream");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_stream_set",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  arg2=(pj::MediaStream)SWIG_MustGetPtr(L,2,0,0,2,"OnStreamCreatedParam_stream_set");
  if (arg1) (arg1)->stream = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamCreatedParam_stream_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream result;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::stream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::stream",1,"pj::OnStreamCreatedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_stream_get",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  result = (pj::MediaStream) ((arg1)->stream);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamCreatedParam_streamIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::streamIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::streamIdx",1,"pj::OnStreamCreatedParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnStreamCreatedParam::streamIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_streamIdx_set",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->streamIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamCreatedParam_streamIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::streamIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::streamIdx",1,"pj::OnStreamCreatedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_streamIdx_get",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  result = (unsigned int) ((arg1)->streamIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamCreatedParam_pPort_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort arg2 = (pj::MediaPort) 0 ;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::pPort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::pPort",1,"pj::OnStreamCreatedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnStreamCreatedParam::pPort",2,"pj::MediaPort");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_pPort_set",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  arg2=(pj::MediaPort)SWIG_MustGetPtr(L,2,0,0,2,"OnStreamCreatedParam_pPort_set");
  if (arg1) (arg1)->pPort = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamCreatedParam_pPort_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort result;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::pPort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamCreatedParam::pPort",1,"pj::OnStreamCreatedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("OnStreamCreatedParam_pPort_get",1,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  result = (pj::MediaPort) ((arg1)->pPort);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnStreamCreatedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamCreatedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnStreamCreatedParam::OnStreamCreatedParam",0,0)
  result = (pj::OnStreamCreatedParam *)new pj::OnStreamCreatedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnStreamCreatedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnStreamCreatedParam(void *obj) {
pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnStreamCreatedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnStreamCreatedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnStreamCreatedParam_attributes[] = {
    { "stream", _wrap_OnStreamCreatedParam_stream_get, _wrap_OnStreamCreatedParam_stream_set },
    { "streamIdx", _wrap_OnStreamCreatedParam_streamIdx_get, _wrap_OnStreamCreatedParam_streamIdx_set },
    { "pPort", _wrap_OnStreamCreatedParam_pPort_get, _wrap_OnStreamCreatedParam_pPort_set },
    {0,0,0}
};
static swig_lua_method swig_OnStreamCreatedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnStreamCreatedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnStreamCreatedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnStreamCreatedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnStreamCreatedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnStreamCreatedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnStreamCreatedParam_Sf_SwigStatic = {
    "OnStreamCreatedParam",
    swig_OnStreamCreatedParam_Sf_SwigStatic_methods,
    swig_OnStreamCreatedParam_Sf_SwigStatic_attributes,
    swig_OnStreamCreatedParam_Sf_SwigStatic_constants,
    swig_OnStreamCreatedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnStreamCreatedParam_bases[] = {0};
static const char *swig_OnStreamCreatedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnStreamCreatedParam = { "OnStreamCreatedParam", "OnStreamCreatedParam", &SWIGTYPE_p_pj__OnStreamCreatedParam,_proxy__wrap_new_OnStreamCreatedParam, swig_delete_OnStreamCreatedParam, swig_OnStreamCreatedParam_methods, swig_OnStreamCreatedParam_attributes, &swig_OnStreamCreatedParam_Sf_SwigStatic, swig_OnStreamCreatedParam_meta, swig_OnStreamCreatedParam_bases, swig_OnStreamCreatedParam_base_names };

static int _wrap_OnStreamDestroyedParam_stream_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  SWIG_check_num_args("pj::OnStreamDestroyedParam::stream",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamDestroyedParam::stream",1,"pj::OnStreamDestroyedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnStreamDestroyedParam::stream",2,"pj::MediaStream");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamDestroyedParam,0))){
    SWIG_fail_ptr("OnStreamDestroyedParam_stream_set",1,SWIGTYPE_p_pj__OnStreamDestroyedParam);
  }
  
  arg2=(pj::MediaStream)SWIG_MustGetPtr(L,2,0,0,2,"OnStreamDestroyedParam_stream_set");
  if (arg1) (arg1)->stream = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamDestroyedParam_stream_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream result;
  
  SWIG_check_num_args("pj::OnStreamDestroyedParam::stream",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamDestroyedParam::stream",1,"pj::OnStreamDestroyedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamDestroyedParam,0))){
    SWIG_fail_ptr("OnStreamDestroyedParam_stream_get",1,SWIGTYPE_p_pj__OnStreamDestroyedParam);
  }
  
  result = (pj::MediaStream) ((arg1)->stream);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamDestroyedParam_streamIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnStreamDestroyedParam::streamIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamDestroyedParam::streamIdx",1,"pj::OnStreamDestroyedParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnStreamDestroyedParam::streamIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamDestroyedParam,0))){
    SWIG_fail_ptr("OnStreamDestroyedParam_streamIdx_set",1,SWIGTYPE_p_pj__OnStreamDestroyedParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->streamIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnStreamDestroyedParam_streamIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnStreamDestroyedParam::streamIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnStreamDestroyedParam::streamIdx",1,"pj::OnStreamDestroyedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnStreamDestroyedParam,0))){
    SWIG_fail_ptr("OnStreamDestroyedParam_streamIdx_get",1,SWIGTYPE_p_pj__OnStreamDestroyedParam);
  }
  
  result = (unsigned int) ((arg1)->streamIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnStreamDestroyedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnStreamDestroyedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnStreamDestroyedParam::OnStreamDestroyedParam",0,0)
  result = (pj::OnStreamDestroyedParam *)new pj::OnStreamDestroyedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnStreamDestroyedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnStreamDestroyedParam(void *obj) {
pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnStreamDestroyedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnStreamDestroyedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnStreamDestroyedParam_attributes[] = {
    { "stream", _wrap_OnStreamDestroyedParam_stream_get, _wrap_OnStreamDestroyedParam_stream_set },
    { "streamIdx", _wrap_OnStreamDestroyedParam_streamIdx_get, _wrap_OnStreamDestroyedParam_streamIdx_set },
    {0,0,0}
};
static swig_lua_method swig_OnStreamDestroyedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnStreamDestroyedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnStreamDestroyedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnStreamDestroyedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnStreamDestroyedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnStreamDestroyedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnStreamDestroyedParam_Sf_SwigStatic = {
    "OnStreamDestroyedParam",
    swig_OnStreamDestroyedParam_Sf_SwigStatic_methods,
    swig_OnStreamDestroyedParam_Sf_SwigStatic_attributes,
    swig_OnStreamDestroyedParam_Sf_SwigStatic_constants,
    swig_OnStreamDestroyedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnStreamDestroyedParam_bases[] = {0};
static const char *swig_OnStreamDestroyedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnStreamDestroyedParam = { "OnStreamDestroyedParam", "OnStreamDestroyedParam", &SWIGTYPE_p_pj__OnStreamDestroyedParam,_proxy__wrap_new_OnStreamDestroyedParam, swig_delete_OnStreamDestroyedParam, swig_OnStreamDestroyedParam_methods, swig_OnStreamDestroyedParam_attributes, &swig_OnStreamDestroyedParam_Sf_SwigStatic, swig_OnStreamDestroyedParam_meta, swig_OnStreamDestroyedParam_bases, swig_OnStreamDestroyedParam_base_names };

static int _wrap_OnDtmfDigitParam_digit_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnDtmfDigitParam::digit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnDtmfDigitParam::digit",1,"pj::OnDtmfDigitParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnDtmfDigitParam::digit",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnDtmfDigitParam,0))){
    SWIG_fail_ptr("OnDtmfDigitParam_digit_set",1,SWIGTYPE_p_pj__OnDtmfDigitParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->digit = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnDtmfDigitParam_digit_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnDtmfDigitParam::digit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnDtmfDigitParam::digit",1,"pj::OnDtmfDigitParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnDtmfDigitParam,0))){
    SWIG_fail_ptr("OnDtmfDigitParam_digit_get",1,SWIGTYPE_p_pj__OnDtmfDigitParam);
  }
  
  result = (pj::string *) & ((arg1)->digit);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnDtmfDigitParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnDtmfDigitParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnDtmfDigitParam::OnDtmfDigitParam",0,0)
  result = (pj::OnDtmfDigitParam *)new pj::OnDtmfDigitParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnDtmfDigitParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnDtmfDigitParam(void *obj) {
pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnDtmfDigitParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnDtmfDigitParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnDtmfDigitParam_attributes[] = {
    { "digit", _wrap_OnDtmfDigitParam_digit_get, _wrap_OnDtmfDigitParam_digit_set },
    {0,0,0}
};
static swig_lua_method swig_OnDtmfDigitParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnDtmfDigitParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnDtmfDigitParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnDtmfDigitParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnDtmfDigitParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnDtmfDigitParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnDtmfDigitParam_Sf_SwigStatic = {
    "OnDtmfDigitParam",
    swig_OnDtmfDigitParam_Sf_SwigStatic_methods,
    swig_OnDtmfDigitParam_Sf_SwigStatic_attributes,
    swig_OnDtmfDigitParam_Sf_SwigStatic_constants,
    swig_OnDtmfDigitParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnDtmfDigitParam_bases[] = {0};
static const char *swig_OnDtmfDigitParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnDtmfDigitParam = { "OnDtmfDigitParam", "OnDtmfDigitParam", &SWIGTYPE_p_pj__OnDtmfDigitParam,_proxy__wrap_new_OnDtmfDigitParam, swig_delete_OnDtmfDigitParam, swig_OnDtmfDigitParam_methods, swig_OnDtmfDigitParam_attributes, &swig_OnDtmfDigitParam_Sf_SwigStatic, swig_OnDtmfDigitParam_meta, swig_OnDtmfDigitParam_bases, swig_OnDtmfDigitParam_base_names };

static int _wrap_OnCallTransferRequestParam_dstUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::dstUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::dstUri",1,"pj::OnCallTransferRequestParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnCallTransferRequestParam::dstUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_dstUri_set",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->dstUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferRequestParam_dstUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::dstUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::dstUri",1,"pj::OnCallTransferRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_dstUri_get",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  result = (pj::string *) & ((arg1)->dstUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferRequestParam_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::statusCode",1,"pj::OnCallTransferRequestParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallTransferRequestParam::statusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_statusCode_set",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferRequestParam_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::statusCode",1,"pj::OnCallTransferRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_statusCode_get",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  result = (pjsip_status_code) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferRequestParam_opt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::opt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::opt",1,"pj::OnCallTransferRequestParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallTransferRequestParam::opt",2,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_opt_set",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_opt_set",2,SWIGTYPE_p_pj__CallSetting);
  }
  
  if (arg1) (arg1)->opt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferRequestParam_opt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::opt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferRequestParam::opt",1,"pj::OnCallTransferRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("OnCallTransferRequestParam_opt_get",1,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  result = (pj::CallSetting *)& ((arg1)->opt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallTransferRequestParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferRequestParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferRequestParam::OnCallTransferRequestParam",0,0)
  result = (pj::OnCallTransferRequestParam *)new pj::OnCallTransferRequestParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallTransferRequestParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallTransferRequestParam(void *obj) {
pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallTransferRequestParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallTransferRequestParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallTransferRequestParam_attributes[] = {
    { "dstUri", _wrap_OnCallTransferRequestParam_dstUri_get, _wrap_OnCallTransferRequestParam_dstUri_set },
    { "statusCode", _wrap_OnCallTransferRequestParam_statusCode_get, _wrap_OnCallTransferRequestParam_statusCode_set },
    { "opt", _wrap_OnCallTransferRequestParam_opt_get, _wrap_OnCallTransferRequestParam_opt_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallTransferRequestParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallTransferRequestParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallTransferRequestParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallTransferRequestParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallTransferRequestParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallTransferRequestParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallTransferRequestParam_Sf_SwigStatic = {
    "OnCallTransferRequestParam",
    swig_OnCallTransferRequestParam_Sf_SwigStatic_methods,
    swig_OnCallTransferRequestParam_Sf_SwigStatic_attributes,
    swig_OnCallTransferRequestParam_Sf_SwigStatic_constants,
    swig_OnCallTransferRequestParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallTransferRequestParam_bases[] = {0};
static const char *swig_OnCallTransferRequestParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallTransferRequestParam = { "OnCallTransferRequestParam", "OnCallTransferRequestParam", &SWIGTYPE_p_pj__OnCallTransferRequestParam,_proxy__wrap_new_OnCallTransferRequestParam, swig_delete_OnCallTransferRequestParam, swig_OnCallTransferRequestParam_methods, swig_OnCallTransferRequestParam_attributes, &swig_OnCallTransferRequestParam_Sf_SwigStatic, swig_OnCallTransferRequestParam_meta, swig_OnCallTransferRequestParam_bases, swig_OnCallTransferRequestParam_base_names };

static int _wrap_OnCallTransferStatusParam_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::statusCode",1,"pj::OnCallTransferStatusParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallTransferStatusParam::statusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_statusCode_set",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::statusCode",1,"pj::OnCallTransferStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_statusCode_get",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  result = (pjsip_status_code) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::reason",1,"pj::OnCallTransferStatusParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnCallTransferStatusParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_reason_set",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::reason",1,"pj::OnCallTransferStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_reason_get",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_finalNotify_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::finalNotify",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::finalNotify",1,"pj::OnCallTransferStatusParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::OnCallTransferStatusParam::finalNotify",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_finalNotify_set",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->finalNotify = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_finalNotify_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::finalNotify",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::finalNotify",1,"pj::OnCallTransferStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_finalNotify_get",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  result = (bool) ((arg1)->finalNotify);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_cont_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::cont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::cont",1,"pj::OnCallTransferStatusParam *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::OnCallTransferStatusParam::cont",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_cont_set",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->cont = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallTransferStatusParam_cont_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::cont",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallTransferStatusParam::cont",1,"pj::OnCallTransferStatusParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("OnCallTransferStatusParam_cont_get",1,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  result = (bool) ((arg1)->cont);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallTransferStatusParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallTransferStatusParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallTransferStatusParam::OnCallTransferStatusParam",0,0)
  result = (pj::OnCallTransferStatusParam *)new pj::OnCallTransferStatusParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallTransferStatusParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallTransferStatusParam(void *obj) {
pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallTransferStatusParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallTransferStatusParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallTransferStatusParam_attributes[] = {
    { "statusCode", _wrap_OnCallTransferStatusParam_statusCode_get, _wrap_OnCallTransferStatusParam_statusCode_set },
    { "reason", _wrap_OnCallTransferStatusParam_reason_get, _wrap_OnCallTransferStatusParam_reason_set },
    { "finalNotify", _wrap_OnCallTransferStatusParam_finalNotify_get, _wrap_OnCallTransferStatusParam_finalNotify_set },
    { "cont", _wrap_OnCallTransferStatusParam_cont_get, _wrap_OnCallTransferStatusParam_cont_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallTransferStatusParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallTransferStatusParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallTransferStatusParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallTransferStatusParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallTransferStatusParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallTransferStatusParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallTransferStatusParam_Sf_SwigStatic = {
    "OnCallTransferStatusParam",
    swig_OnCallTransferStatusParam_Sf_SwigStatic_methods,
    swig_OnCallTransferStatusParam_Sf_SwigStatic_attributes,
    swig_OnCallTransferStatusParam_Sf_SwigStatic_constants,
    swig_OnCallTransferStatusParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallTransferStatusParam_bases[] = {0};
static const char *swig_OnCallTransferStatusParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallTransferStatusParam = { "OnCallTransferStatusParam", "OnCallTransferStatusParam", &SWIGTYPE_p_pj__OnCallTransferStatusParam,_proxy__wrap_new_OnCallTransferStatusParam, swig_delete_OnCallTransferStatusParam, swig_OnCallTransferStatusParam_methods, swig_OnCallTransferStatusParam_attributes, &swig_OnCallTransferStatusParam_Sf_SwigStatic, swig_OnCallTransferStatusParam_meta, swig_OnCallTransferStatusParam_bases, swig_OnCallTransferStatusParam_base_names };

static int _wrap_OnCallReplaceRequestParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::rdata",1,"pj::OnCallReplaceRequestParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_rdata_set",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::rdata",1,"pj::OnCallReplaceRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_rdata_get",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::statusCode",1,"pj::OnCallReplaceRequestParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::statusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_statusCode_set",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::statusCode",1,"pj::OnCallReplaceRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_statusCode_get",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  result = (pjsip_status_code) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::reason",1,"pj::OnCallReplaceRequestParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_reason_set",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::reason",1,"pj::OnCallReplaceRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_reason_get",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_opt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::opt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::opt",1,"pj::OnCallReplaceRequestParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::opt",2,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_opt_set",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_opt_set",2,SWIGTYPE_p_pj__CallSetting);
  }
  
  if (arg1) (arg1)->opt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplaceRequestParam_opt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::opt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplaceRequestParam::opt",1,"pj::OnCallReplaceRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("OnCallReplaceRequestParam_opt_get",1,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  result = (pj::CallSetting *)& ((arg1)->opt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallReplaceRequestParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplaceRequestParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallReplaceRequestParam::OnCallReplaceRequestParam",0,0)
  result = (pj::OnCallReplaceRequestParam *)new pj::OnCallReplaceRequestParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallReplaceRequestParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallReplaceRequestParam(void *obj) {
pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallReplaceRequestParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallReplaceRequestParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallReplaceRequestParam_attributes[] = {
    { "rdata", _wrap_OnCallReplaceRequestParam_rdata_get, _wrap_OnCallReplaceRequestParam_rdata_set },
    { "statusCode", _wrap_OnCallReplaceRequestParam_statusCode_get, _wrap_OnCallReplaceRequestParam_statusCode_set },
    { "reason", _wrap_OnCallReplaceRequestParam_reason_get, _wrap_OnCallReplaceRequestParam_reason_set },
    { "opt", _wrap_OnCallReplaceRequestParam_opt_get, _wrap_OnCallReplaceRequestParam_opt_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallReplaceRequestParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallReplaceRequestParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallReplaceRequestParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallReplaceRequestParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallReplaceRequestParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallReplaceRequestParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallReplaceRequestParam_Sf_SwigStatic = {
    "OnCallReplaceRequestParam",
    swig_OnCallReplaceRequestParam_Sf_SwigStatic_methods,
    swig_OnCallReplaceRequestParam_Sf_SwigStatic_attributes,
    swig_OnCallReplaceRequestParam_Sf_SwigStatic_constants,
    swig_OnCallReplaceRequestParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallReplaceRequestParam_bases[] = {0};
static const char *swig_OnCallReplaceRequestParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallReplaceRequestParam = { "OnCallReplaceRequestParam", "OnCallReplaceRequestParam", &SWIGTYPE_p_pj__OnCallReplaceRequestParam,_proxy__wrap_new_OnCallReplaceRequestParam, swig_delete_OnCallReplaceRequestParam, swig_OnCallReplaceRequestParam_methods, swig_OnCallReplaceRequestParam_attributes, &swig_OnCallReplaceRequestParam_Sf_SwigStatic, swig_OnCallReplaceRequestParam_meta, swig_OnCallReplaceRequestParam_bases, swig_OnCallReplaceRequestParam_base_names };

static int _wrap_OnCallReplacedParam_newCallId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id arg2 ;
  
  SWIG_check_num_args("pj::OnCallReplacedParam::newCallId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplacedParam::newCallId",1,"pj::OnCallReplacedParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallReplacedParam::newCallId",2,"pjsua_call_id");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplacedParam,0))){
    SWIG_fail_ptr("OnCallReplacedParam_newCallId_set",1,SWIGTYPE_p_pj__OnCallReplacedParam);
  }
  
  arg2 = (pjsua_call_id)lua_tonumber(L, 2);
  if (arg1) (arg1)->newCallId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallReplacedParam_newCallId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id result;
  
  SWIG_check_num_args("pj::OnCallReplacedParam::newCallId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallReplacedParam::newCallId",1,"pj::OnCallReplacedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallReplacedParam,0))){
    SWIG_fail_ptr("OnCallReplacedParam_newCallId_get",1,SWIGTYPE_p_pj__OnCallReplacedParam);
  }
  
  result = (pjsua_call_id) ((arg1)->newCallId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallReplacedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallReplacedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallReplacedParam::OnCallReplacedParam",0,0)
  result = (pj::OnCallReplacedParam *)new pj::OnCallReplacedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallReplacedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallReplacedParam(void *obj) {
pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallReplacedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallReplacedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallReplacedParam_attributes[] = {
    { "newCallId", _wrap_OnCallReplacedParam_newCallId_get, _wrap_OnCallReplacedParam_newCallId_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallReplacedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallReplacedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallReplacedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallReplacedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallReplacedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallReplacedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallReplacedParam_Sf_SwigStatic = {
    "OnCallReplacedParam",
    swig_OnCallReplacedParam_Sf_SwigStatic_methods,
    swig_OnCallReplacedParam_Sf_SwigStatic_attributes,
    swig_OnCallReplacedParam_Sf_SwigStatic_constants,
    swig_OnCallReplacedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallReplacedParam_bases[] = {0};
static const char *swig_OnCallReplacedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallReplacedParam = { "OnCallReplacedParam", "OnCallReplacedParam", &SWIGTYPE_p_pj__OnCallReplacedParam,_proxy__wrap_new_OnCallReplacedParam, swig_delete_OnCallReplacedParam, swig_OnCallReplacedParam_methods, swig_OnCallReplacedParam_attributes, &swig_OnCallReplacedParam_Sf_SwigStatic, swig_OnCallReplacedParam_meta, swig_OnCallReplacedParam_bases, swig_OnCallReplacedParam_base_names };

static int _wrap_OnCallRxOfferParam_offer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::offer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::offer",1,"pj::OnCallRxOfferParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallRxOfferParam::offer",2,"pj::SdpSession *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_offer_set",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SdpSession,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_offer_set",2,SWIGTYPE_p_pj__SdpSession);
  }
  
  if (arg1) (arg1)->offer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRxOfferParam_offer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::offer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::offer",1,"pj::OnCallRxOfferParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_offer_get",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  result = (pj::SdpSession *)& ((arg1)->offer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SdpSession,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRxOfferParam_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::statusCode",1,"pj::OnCallRxOfferParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallRxOfferParam::statusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_statusCode_set",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRxOfferParam_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::statusCode",1,"pj::OnCallRxOfferParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_statusCode_get",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  result = (pjsip_status_code) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRxOfferParam_opt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::opt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::opt",1,"pj::OnCallRxOfferParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallRxOfferParam::opt",2,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_opt_set",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_opt_set",2,SWIGTYPE_p_pj__CallSetting);
  }
  
  if (arg1) (arg1)->opt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRxOfferParam_opt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::opt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRxOfferParam::opt",1,"pj::OnCallRxOfferParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("OnCallRxOfferParam_opt_get",1,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  result = (pj::CallSetting *)& ((arg1)->opt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallRxOfferParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRxOfferParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRxOfferParam::OnCallRxOfferParam",0,0)
  result = (pj::OnCallRxOfferParam *)new pj::OnCallRxOfferParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallRxOfferParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallRxOfferParam(void *obj) {
pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallRxOfferParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallRxOfferParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallRxOfferParam_attributes[] = {
    { "offer", _wrap_OnCallRxOfferParam_offer_get, _wrap_OnCallRxOfferParam_offer_set },
    { "statusCode", _wrap_OnCallRxOfferParam_statusCode_get, _wrap_OnCallRxOfferParam_statusCode_set },
    { "opt", _wrap_OnCallRxOfferParam_opt_get, _wrap_OnCallRxOfferParam_opt_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallRxOfferParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallRxOfferParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallRxOfferParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallRxOfferParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallRxOfferParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallRxOfferParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallRxOfferParam_Sf_SwigStatic = {
    "OnCallRxOfferParam",
    swig_OnCallRxOfferParam_Sf_SwigStatic_methods,
    swig_OnCallRxOfferParam_Sf_SwigStatic_attributes,
    swig_OnCallRxOfferParam_Sf_SwigStatic_constants,
    swig_OnCallRxOfferParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallRxOfferParam_bases[] = {0};
static const char *swig_OnCallRxOfferParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallRxOfferParam = { "OnCallRxOfferParam", "OnCallRxOfferParam", &SWIGTYPE_p_pj__OnCallRxOfferParam,_proxy__wrap_new_OnCallRxOfferParam, swig_delete_OnCallRxOfferParam, swig_OnCallRxOfferParam_methods, swig_OnCallRxOfferParam_attributes, &swig_OnCallRxOfferParam_Sf_SwigStatic, swig_OnCallRxOfferParam_meta, swig_OnCallRxOfferParam_bases, swig_OnCallRxOfferParam_base_names };

static int _wrap_OnCallRedirectedParam_targetUri_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnCallRedirectedParam::targetUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRedirectedParam::targetUri",1,"pj::OnCallRedirectedParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnCallRedirectedParam::targetUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRedirectedParam,0))){
    SWIG_fail_ptr("OnCallRedirectedParam_targetUri_set",1,SWIGTYPE_p_pj__OnCallRedirectedParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->targetUri = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRedirectedParam_targetUri_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRedirectedParam::targetUri",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRedirectedParam::targetUri",1,"pj::OnCallRedirectedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRedirectedParam,0))){
    SWIG_fail_ptr("OnCallRedirectedParam_targetUri_get",1,SWIGTYPE_p_pj__OnCallRedirectedParam);
  }
  
  result = (pj::string *) & ((arg1)->targetUri);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRedirectedParam_e_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  SWIG_check_num_args("pj::OnCallRedirectedParam::e",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRedirectedParam::e",1,"pj::OnCallRedirectedParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallRedirectedParam::e",2,"pj::SipEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRedirectedParam,0))){
    SWIG_fail_ptr("OnCallRedirectedParam_e_set",1,SWIGTYPE_p_pj__OnCallRedirectedParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipEvent,0))){
    SWIG_fail_ptr("OnCallRedirectedParam_e_set",2,SWIGTYPE_p_pj__SipEvent);
  }
  
  if (arg1) (arg1)->e = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallRedirectedParam_e_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRedirectedParam::e",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallRedirectedParam::e",1,"pj::OnCallRedirectedParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallRedirectedParam,0))){
    SWIG_fail_ptr("OnCallRedirectedParam_e_get",1,SWIGTYPE_p_pj__OnCallRedirectedParam);
  }
  
  result = (pj::SipEvent *)& ((arg1)->e);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallRedirectedParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallRedirectedParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallRedirectedParam::OnCallRedirectedParam",0,0)
  result = (pj::OnCallRedirectedParam *)new pj::OnCallRedirectedParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallRedirectedParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallRedirectedParam(void *obj) {
pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallRedirectedParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallRedirectedParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallRedirectedParam_attributes[] = {
    { "targetUri", _wrap_OnCallRedirectedParam_targetUri_get, _wrap_OnCallRedirectedParam_targetUri_set },
    { "e", _wrap_OnCallRedirectedParam_e_get, _wrap_OnCallRedirectedParam_e_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallRedirectedParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallRedirectedParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallRedirectedParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallRedirectedParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallRedirectedParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallRedirectedParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallRedirectedParam_Sf_SwigStatic = {
    "OnCallRedirectedParam",
    swig_OnCallRedirectedParam_Sf_SwigStatic_methods,
    swig_OnCallRedirectedParam_Sf_SwigStatic_attributes,
    swig_OnCallRedirectedParam_Sf_SwigStatic_constants,
    swig_OnCallRedirectedParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallRedirectedParam_bases[] = {0};
static const char *swig_OnCallRedirectedParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallRedirectedParam = { "OnCallRedirectedParam", "OnCallRedirectedParam", &SWIGTYPE_p_pj__OnCallRedirectedParam,_proxy__wrap_new_OnCallRedirectedParam, swig_delete_OnCallRedirectedParam, swig_OnCallRedirectedParam_methods, swig_OnCallRedirectedParam_attributes, &swig_OnCallRedirectedParam_Sf_SwigStatic, swig_OnCallRedirectedParam_meta, swig_OnCallRedirectedParam_bases, swig_OnCallRedirectedParam_base_names };

static int _wrap_OnCallMediaEventParam_medIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnCallMediaEventParam::medIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaEventParam::medIdx",1,"pj::OnCallMediaEventParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallMediaEventParam::medIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaEventParam,0))){
    SWIG_fail_ptr("OnCallMediaEventParam_medIdx_set",1,SWIGTYPE_p_pj__OnCallMediaEventParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->medIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaEventParam_medIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnCallMediaEventParam::medIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaEventParam::medIdx",1,"pj::OnCallMediaEventParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaEventParam,0))){
    SWIG_fail_ptr("OnCallMediaEventParam_medIdx_get",1,SWIGTYPE_p_pj__OnCallMediaEventParam);
  }
  
  result = (unsigned int) ((arg1)->medIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaEventParam_ev_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  SWIG_check_num_args("pj::OnCallMediaEventParam::ev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaEventParam::ev",1,"pj::OnCallMediaEventParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCallMediaEventParam::ev",2,"pj::MediaEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaEventParam,0))){
    SWIG_fail_ptr("OnCallMediaEventParam_ev_set",1,SWIGTYPE_p_pj__OnCallMediaEventParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaEvent,0))){
    SWIG_fail_ptr("OnCallMediaEventParam_ev_set",2,SWIGTYPE_p_pj__MediaEvent);
  }
  
  if (arg1) (arg1)->ev = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaEventParam_ev_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallMediaEventParam::ev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaEventParam::ev",1,"pj::OnCallMediaEventParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaEventParam,0))){
    SWIG_fail_ptr("OnCallMediaEventParam_ev_get",1,SWIGTYPE_p_pj__OnCallMediaEventParam);
  }
  
  result = (pj::MediaEvent *)& ((arg1)->ev);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaEvent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallMediaEventParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaEventParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallMediaEventParam::OnCallMediaEventParam",0,0)
  result = (pj::OnCallMediaEventParam *)new pj::OnCallMediaEventParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallMediaEventParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallMediaEventParam(void *obj) {
pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallMediaEventParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallMediaEventParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallMediaEventParam_attributes[] = {
    { "medIdx", _wrap_OnCallMediaEventParam_medIdx_get, _wrap_OnCallMediaEventParam_medIdx_set },
    { "ev", _wrap_OnCallMediaEventParam_ev_get, _wrap_OnCallMediaEventParam_ev_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallMediaEventParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallMediaEventParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallMediaEventParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallMediaEventParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallMediaEventParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallMediaEventParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallMediaEventParam_Sf_SwigStatic = {
    "OnCallMediaEventParam",
    swig_OnCallMediaEventParam_Sf_SwigStatic_methods,
    swig_OnCallMediaEventParam_Sf_SwigStatic_attributes,
    swig_OnCallMediaEventParam_Sf_SwigStatic_constants,
    swig_OnCallMediaEventParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallMediaEventParam_bases[] = {0};
static const char *swig_OnCallMediaEventParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallMediaEventParam = { "OnCallMediaEventParam", "OnCallMediaEventParam", &SWIGTYPE_p_pj__OnCallMediaEventParam,_proxy__wrap_new_OnCallMediaEventParam, swig_delete_OnCallMediaEventParam, swig_OnCallMediaEventParam_methods, swig_OnCallMediaEventParam_attributes, &swig_OnCallMediaEventParam_Sf_SwigStatic, swig_OnCallMediaEventParam_meta, swig_OnCallMediaEventParam_bases, swig_OnCallMediaEventParam_base_names };

static int _wrap_OnCallMediaTransportStateParam_medIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::medIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::medIdx",1,"pj::OnCallMediaTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::medIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_medIdx_set",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->medIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_medIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::medIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::medIdx",1,"pj::OnCallMediaTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_medIdx_get",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  result = (unsigned int) ((arg1)->medIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st arg2 ;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::state",1,"pj::OnCallMediaTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::state",2,"pjsua_med_tp_st");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_state_set",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  arg2 = (pjsua_med_tp_st)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st result;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::state",1,"pj::OnCallMediaTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_state_get",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  result = (pjsua_med_tp_st) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::status",1,"pj::OnCallMediaTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::status",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_status_set",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::status",1,"pj::OnCallMediaTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_status_get",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  result = (pj_status_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_sipErrorCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::sipErrorCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::sipErrorCode",1,"pj::OnCallMediaTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::sipErrorCode",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_sipErrorCode_set",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sipErrorCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCallMediaTransportStateParam_sipErrorCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::sipErrorCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCallMediaTransportStateParam::sipErrorCode",1,"pj::OnCallMediaTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("OnCallMediaTransportStateParam_sipErrorCode_get",1,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  result = (int) ((arg1)->sipErrorCode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCallMediaTransportStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCallMediaTransportStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCallMediaTransportStateParam::OnCallMediaTransportStateParam",0,0)
  result = (pj::OnCallMediaTransportStateParam *)new pj::OnCallMediaTransportStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCallMediaTransportStateParam(void *obj) {
pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCallMediaTransportStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCallMediaTransportStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCallMediaTransportStateParam_attributes[] = {
    { "medIdx", _wrap_OnCallMediaTransportStateParam_medIdx_get, _wrap_OnCallMediaTransportStateParam_medIdx_set },
    { "state", _wrap_OnCallMediaTransportStateParam_state_get, _wrap_OnCallMediaTransportStateParam_state_set },
    { "status", _wrap_OnCallMediaTransportStateParam_status_get, _wrap_OnCallMediaTransportStateParam_status_set },
    { "sipErrorCode", _wrap_OnCallMediaTransportStateParam_sipErrorCode_get, _wrap_OnCallMediaTransportStateParam_sipErrorCode_set },
    {0,0,0}
};
static swig_lua_method swig_OnCallMediaTransportStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCallMediaTransportStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCallMediaTransportStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCallMediaTransportStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCallMediaTransportStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCallMediaTransportStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCallMediaTransportStateParam_Sf_SwigStatic = {
    "OnCallMediaTransportStateParam",
    swig_OnCallMediaTransportStateParam_Sf_SwigStatic_methods,
    swig_OnCallMediaTransportStateParam_Sf_SwigStatic_attributes,
    swig_OnCallMediaTransportStateParam_Sf_SwigStatic_constants,
    swig_OnCallMediaTransportStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCallMediaTransportStateParam_bases[] = {0};
static const char *swig_OnCallMediaTransportStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCallMediaTransportStateParam = { "OnCallMediaTransportStateParam", "OnCallMediaTransportStateParam", &SWIGTYPE_p_pj__OnCallMediaTransportStateParam,_proxy__wrap_new_OnCallMediaTransportStateParam, swig_delete_OnCallMediaTransportStateParam, swig_OnCallMediaTransportStateParam_methods, swig_OnCallMediaTransportStateParam_attributes, &swig_OnCallMediaTransportStateParam_Sf_SwigStatic, swig_OnCallMediaTransportStateParam_meta, swig_OnCallMediaTransportStateParam_bases, swig_OnCallMediaTransportStateParam_base_names };

static int _wrap_OnCreateMediaTransportParam_mediaIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::mediaIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaIdx",1,"pj::OnCreateMediaTransportParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaIdx",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_mediaIdx_set",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->mediaIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCreateMediaTransportParam_mediaIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::mediaIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaIdx",1,"pj::OnCreateMediaTransportParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_mediaIdx_get",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  result = (unsigned int) ((arg1)->mediaIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCreateMediaTransportParam_mediaTp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport arg2 = (pj::MediaTransport) 0 ;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::mediaTp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaTp",1,"pj::OnCreateMediaTransportParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaTp",2,"pj::MediaTransport");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_mediaTp_set",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  arg2=(pj::MediaTransport)SWIG_MustGetPtr(L,2,0,0,2,"OnCreateMediaTransportParam_mediaTp_set");
  if (arg1) (arg1)->mediaTp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCreateMediaTransportParam_mediaTp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport result;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::mediaTp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::mediaTp",1,"pj::OnCreateMediaTransportParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_mediaTp_get",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  result = (pj::MediaTransport) ((arg1)->mediaTp);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCreateMediaTransportParam_flags_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::flags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::flags",1,"pj::OnCreateMediaTransportParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::flags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_flags_set",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->flags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnCreateMediaTransportParam_flags_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::flags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnCreateMediaTransportParam::flags",1,"pj::OnCreateMediaTransportParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("OnCreateMediaTransportParam_flags_get",1,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  result = (unsigned int) ((arg1)->flags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnCreateMediaTransportParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnCreateMediaTransportParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnCreateMediaTransportParam::OnCreateMediaTransportParam",0,0)
  result = (pj::OnCreateMediaTransportParam *)new pj::OnCreateMediaTransportParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnCreateMediaTransportParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnCreateMediaTransportParam(void *obj) {
pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnCreateMediaTransportParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnCreateMediaTransportParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnCreateMediaTransportParam_attributes[] = {
    { "mediaIdx", _wrap_OnCreateMediaTransportParam_mediaIdx_get, _wrap_OnCreateMediaTransportParam_mediaIdx_set },
    { "mediaTp", _wrap_OnCreateMediaTransportParam_mediaTp_get, _wrap_OnCreateMediaTransportParam_mediaTp_set },
    { "flags", _wrap_OnCreateMediaTransportParam_flags_get, _wrap_OnCreateMediaTransportParam_flags_set },
    {0,0,0}
};
static swig_lua_method swig_OnCreateMediaTransportParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnCreateMediaTransportParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnCreateMediaTransportParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnCreateMediaTransportParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnCreateMediaTransportParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnCreateMediaTransportParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnCreateMediaTransportParam_Sf_SwigStatic = {
    "OnCreateMediaTransportParam",
    swig_OnCreateMediaTransportParam_Sf_SwigStatic_methods,
    swig_OnCreateMediaTransportParam_Sf_SwigStatic_attributes,
    swig_OnCreateMediaTransportParam_Sf_SwigStatic_constants,
    swig_OnCreateMediaTransportParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnCreateMediaTransportParam_bases[] = {0};
static const char *swig_OnCreateMediaTransportParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnCreateMediaTransportParam = { "OnCreateMediaTransportParam", "OnCreateMediaTransportParam", &SWIGTYPE_p_pj__OnCreateMediaTransportParam,_proxy__wrap_new_OnCreateMediaTransportParam, swig_delete_OnCreateMediaTransportParam, swig_OnCreateMediaTransportParam_methods, swig_OnCreateMediaTransportParam_attributes, &swig_OnCreateMediaTransportParam_Sf_SwigStatic, swig_OnCreateMediaTransportParam_meta, swig_OnCreateMediaTransportParam_bases, swig_OnCreateMediaTransportParam_base_names };

static int _wrap_CallOpParam_opt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::opt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::opt",1,"pj::CallOpParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallOpParam::opt",2,"pj::CallSetting *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_opt_set",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSetting,0))){
    SWIG_fail_ptr("CallOpParam_opt_set",2,SWIGTYPE_p_pj__CallSetting);
  }
  
  if (arg1) (arg1)->opt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_opt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::opt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::opt",1,"pj::CallOpParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_opt_get",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  result = (pj::CallSetting *)& ((arg1)->opt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSetting,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_statusCode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code arg2 ;
  
  SWIG_check_num_args("pj::CallOpParam::statusCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::statusCode",1,"pj::CallOpParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallOpParam::statusCode",2,"pjsip_status_code");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_statusCode_set",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  arg2 = (pjsip_status_code)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->statusCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_statusCode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code result;
  
  SWIG_check_num_args("pj::CallOpParam::statusCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::statusCode",1,"pj::CallOpParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_statusCode_get",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  result = (pjsip_status_code) ((arg1)->statusCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallOpParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::reason",1,"pj::CallOpParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallOpParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_reason_set",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::reason",1,"pj::CallOpParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_reason_get",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_options_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::CallOpParam::options",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::options",1,"pj::CallOpParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallOpParam::options",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_options_set",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->options = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_options_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::CallOpParam::options",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::options",1,"pj::CallOpParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_options_get",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  result = (unsigned int) ((arg1)->options);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::txOption",1,"pj::CallOpParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallOpParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_txOption_set",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("CallOpParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallOpParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallOpParam::txOption",1,"pj::CallOpParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("CallOpParam_txOption_get",1,SWIGTYPE_p_pj__CallOpParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallOpParam__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  pj::CallOpParam *result = 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::CallOpParam",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("pj::CallOpParam::CallOpParam",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (pj::CallOpParam *)new pj::CallOpParam(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallOpParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallOpParam__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallOpParam *result = 0 ;
  
  SWIG_check_num_args("pj::CallOpParam::CallOpParam",0,0)
  result = (pj::CallOpParam *)new pj::CallOpParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallOpParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallOpParam(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CallOpParam__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CallOpParam__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CallOpParam'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::CallOpParam::CallOpParam(bool)\n"
    "    pj::CallOpParam::CallOpParam()\n");
  lua_error(L);return 0;
}


static void swig_delete_CallOpParam(void *obj) {
pj::CallOpParam *arg1 = (pj::CallOpParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallOpParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallOpParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallOpParam_attributes[] = {
    { "opt", _wrap_CallOpParam_opt_get, _wrap_CallOpParam_opt_set },
    { "statusCode", _wrap_CallOpParam_statusCode_get, _wrap_CallOpParam_statusCode_set },
    { "reason", _wrap_CallOpParam_reason_get, _wrap_CallOpParam_reason_set },
    { "options", _wrap_CallOpParam_options_get, _wrap_CallOpParam_options_set },
    { "txOption", _wrap_CallOpParam_txOption_get, _wrap_CallOpParam_txOption_set },
    {0,0,0}
};
static swig_lua_method swig_CallOpParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_CallOpParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallOpParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallOpParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallOpParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallOpParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallOpParam_Sf_SwigStatic = {
    "CallOpParam",
    swig_CallOpParam_Sf_SwigStatic_methods,
    swig_CallOpParam_Sf_SwigStatic_attributes,
    swig_CallOpParam_Sf_SwigStatic_constants,
    swig_CallOpParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallOpParam_bases[] = {0};
static const char *swig_CallOpParam_base_names[] = {0};
static swig_lua_class _wrap_class_CallOpParam = { "CallOpParam", "CallOpParam", &SWIGTYPE_p_pj__CallOpParam,_proxy__wrap_new_CallOpParam, swig_delete_CallOpParam, swig_CallOpParam_methods, swig_CallOpParam_attributes, &swig_CallOpParam_Sf_SwigStatic, swig_CallOpParam_meta, swig_CallOpParam_bases, swig_CallOpParam_base_names };

static int _wrap_CallSendRequestParam_method_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::CallSendRequestParam::method",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSendRequestParam::method",1,"pj::CallSendRequestParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::CallSendRequestParam::method",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSendRequestParam,0))){
    SWIG_fail_ptr("CallSendRequestParam_method_set",1,SWIGTYPE_p_pj__CallSendRequestParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->method = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSendRequestParam_method_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::CallSendRequestParam::method",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSendRequestParam::method",1,"pj::CallSendRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSendRequestParam,0))){
    SWIG_fail_ptr("CallSendRequestParam_method_get",1,SWIGTYPE_p_pj__CallSendRequestParam);
  }
  
  result = (pj::string *) & ((arg1)->method);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSendRequestParam_txOption_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  SWIG_check_num_args("pj::CallSendRequestParam::txOption",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSendRequestParam::txOption",1,"pj::CallSendRequestParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::CallSendRequestParam::txOption",2,"pj::SipTxOption *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSendRequestParam,0))){
    SWIG_fail_ptr("CallSendRequestParam_txOption_set",1,SWIGTYPE_p_pj__CallSendRequestParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipTxOption,0))){
    SWIG_fail_ptr("CallSendRequestParam_txOption_set",2,SWIGTYPE_p_pj__SipTxOption);
  }
  
  if (arg1) (arg1)->txOption = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallSendRequestParam_txOption_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  SWIG_check_num_args("pj::CallSendRequestParam::txOption",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallSendRequestParam::txOption",1,"pj::CallSendRequestParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallSendRequestParam,0))){
    SWIG_fail_ptr("CallSendRequestParam_txOption_get",1,SWIGTYPE_p_pj__CallSendRequestParam);
  }
  
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipTxOption,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallSendRequestParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallSendRequestParam *result = 0 ;
  
  SWIG_check_num_args("pj::CallSendRequestParam::CallSendRequestParam",0,0)
  result = (pj::CallSendRequestParam *)new pj::CallSendRequestParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallSendRequestParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallSendRequestParam(void *obj) {
pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallSendRequestParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallSendRequestParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallSendRequestParam_attributes[] = {
    { "method", _wrap_CallSendRequestParam_method_get, _wrap_CallSendRequestParam_method_set },
    { "txOption", _wrap_CallSendRequestParam_txOption_get, _wrap_CallSendRequestParam_txOption_set },
    {0,0,0}
};
static swig_lua_method swig_CallSendRequestParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_CallSendRequestParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallSendRequestParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallSendRequestParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallSendRequestParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallSendRequestParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallSendRequestParam_Sf_SwigStatic = {
    "CallSendRequestParam",
    swig_CallSendRequestParam_Sf_SwigStatic_methods,
    swig_CallSendRequestParam_Sf_SwigStatic_attributes,
    swig_CallSendRequestParam_Sf_SwigStatic_constants,
    swig_CallSendRequestParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallSendRequestParam_bases[] = {0};
static const char *swig_CallSendRequestParam_base_names[] = {0};
static swig_lua_class _wrap_class_CallSendRequestParam = { "CallSendRequestParam", "CallSendRequestParam", &SWIGTYPE_p_pj__CallSendRequestParam,_proxy__wrap_new_CallSendRequestParam, swig_delete_CallSendRequestParam, swig_CallSendRequestParam_methods, swig_CallSendRequestParam_attributes, &swig_CallSendRequestParam_Sf_SwigStatic, swig_CallSendRequestParam_meta, swig_CallSendRequestParam_bases, swig_CallSendRequestParam_base_names };

static int _wrap_CallVidSetStreamParam_medIdx_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::medIdx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::medIdx",1,"pj::CallVidSetStreamParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallVidSetStreamParam::medIdx",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_medIdx_set",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->medIdx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallVidSetStreamParam_medIdx_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::medIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::medIdx",1,"pj::CallVidSetStreamParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_medIdx_get",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  result = (int) ((arg1)->medIdx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallVidSetStreamParam_dir_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir arg2 ;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::dir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::dir",1,"pj::CallVidSetStreamParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallVidSetStreamParam::dir",2,"pjmedia_dir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_dir_set",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  arg2 = (pjmedia_dir)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->dir = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallVidSetStreamParam_dir_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir result;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::dir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::dir",1,"pj::CallVidSetStreamParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_dir_get",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  result = (pjmedia_dir) ((arg1)->dir);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallVidSetStreamParam_capDev_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::capDev",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::capDev",1,"pj::CallVidSetStreamParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::CallVidSetStreamParam::capDev",2,"pjmedia_vid_dev_index");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_capDev_set",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  arg2 = (pjmedia_vid_dev_index)lua_tonumber(L, 2);
  if (arg1) (arg1)->capDev = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallVidSetStreamParam_capDev_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::capDev",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::CallVidSetStreamParam::capDev",1,"pj::CallVidSetStreamParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("CallVidSetStreamParam_capDev_get",1,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  result = (pjmedia_vid_dev_index) ((arg1)->capDev);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallVidSetStreamParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::CallVidSetStreamParam *result = 0 ;
  
  SWIG_check_num_args("pj::CallVidSetStreamParam::CallVidSetStreamParam",0,0)
  result = (pj::CallVidSetStreamParam *)new pj::CallVidSetStreamParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__CallVidSetStreamParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallVidSetStreamParam(void *obj) {
pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallVidSetStreamParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallVidSetStreamParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallVidSetStreamParam_attributes[] = {
    { "medIdx", _wrap_CallVidSetStreamParam_medIdx_get, _wrap_CallVidSetStreamParam_medIdx_set },
    { "dir", _wrap_CallVidSetStreamParam_dir_get, _wrap_CallVidSetStreamParam_dir_set },
    { "capDev", _wrap_CallVidSetStreamParam_capDev_get, _wrap_CallVidSetStreamParam_capDev_set },
    {0,0,0}
};
static swig_lua_method swig_CallVidSetStreamParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_CallVidSetStreamParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CallVidSetStreamParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallVidSetStreamParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallVidSetStreamParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallVidSetStreamParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallVidSetStreamParam_Sf_SwigStatic = {
    "CallVidSetStreamParam",
    swig_CallVidSetStreamParam_Sf_SwigStatic_methods,
    swig_CallVidSetStreamParam_Sf_SwigStatic_attributes,
    swig_CallVidSetStreamParam_Sf_SwigStatic_constants,
    swig_CallVidSetStreamParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallVidSetStreamParam_bases[] = {0};
static const char *swig_CallVidSetStreamParam_base_names[] = {0};
static swig_lua_class _wrap_class_CallVidSetStreamParam = { "CallVidSetStreamParam", "CallVidSetStreamParam", &SWIGTYPE_p_pj__CallVidSetStreamParam,_proxy__wrap_new_CallVidSetStreamParam, swig_delete_CallVidSetStreamParam, swig_CallVidSetStreamParam_methods, swig_CallVidSetStreamParam_attributes, &swig_CallVidSetStreamParam_Sf_SwigStatic, swig_CallVidSetStreamParam_meta, swig_CallVidSetStreamParam_bases, swig_CallVidSetStreamParam_base_names };

static int _wrap_new_Call__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = 0 ;
  int arg2 ;
  pj::Call *result = 0 ;
  
  SWIG_check_num_args("pj::Call::Call",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("pj::Call::Call",1,"pj::Account &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::Call",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("new_Call",1,SWIGTYPE_p_pj__Account);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (pj::Call *)new pj::Call(*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Call,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Call__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Account *arg1 = 0 ;
  pj::Call *result = 0 ;
  
  SWIG_check_num_args("pj::Call::Call",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("pj::Call::Call",1,"pj::Account &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Account,0))){
    SWIG_fail_ptr("new_Call",1,SWIGTYPE_p_pj__Account);
  }
  
  result = (pj::Call *)new pj::Call(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Call,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Call(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Call__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Account, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Call__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Call'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Call::Call(pj::Account &,int)\n"
    "    pj::Call::Call(pj::Account &)\n");
  lua_error(L);return 0;
}


static int _wrap_Call_getInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallInfo result;
  
  SWIG_check_num_args("pj::Call::getInfo",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getInfo",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getInfo",1,SWIGTYPE_p_pj__Call);
  }
  
  try {
    result = ((pj::Call const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::CallInfo * resultptr = new pj::CallInfo((const pj::CallInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__CallInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_isActive(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Call::isActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::isActive",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_isActive",1,SWIGTYPE_p_pj__Call);
  }
  
  result = (bool)((pj::Call const *)arg1)->isActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getId(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Call::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getId",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getId",1,SWIGTYPE_p_pj__Call);
  }
  
  result = (int)((pj::Call const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_lookup(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  pj::Call *result = 0 ;
  
  SWIG_check_num_args("pj::Call::lookup",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("pj::Call::lookup",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (pj::Call *)pj::Call::lookup(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Call,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_hasMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Call::hasMedia",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::hasMedia",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_hasMedia",1,SWIGTYPE_p_pj__Call);
  }
  
  result = (bool)((pj::Call const *)arg1)->hasMedia();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getMedia(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::Media *result = 0 ;
  
  SWIG_check_num_args("pj::Call::getMedia",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getMedia",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::getMedia",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getMedia",1,SWIGTYPE_p_pj__Call);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (pj::Media *)((pj::Call const *)arg1)->getMedia(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Media,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_remoteHasCap(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  pj::string temp3 ;
  pj::string temp4 ;
  pjsip_dialog_cap_status result;
  
  SWIG_check_num_args("pj::Call::remoteHasCap",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::remoteHasCap",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::remoteHasCap",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::Call::remoteHasCap",3,"pj::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("pj::Call::remoteHasCap",4,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_remoteHasCap",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (pjsip_dialog_cap_status)((pj::Call const *)arg1)->remoteHasCap(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_setUserData(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::Call::setUserData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::setUserData",1,"pj::Call *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Call::setUserData",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_setUserData",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"Call_setUserData");
  (arg1)->setUserData(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getUserData(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::Call::getUserData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getUserData",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getUserData",1,SWIGTYPE_p_pj__Call);
  }
  
  result = (pj::Token)((pj::Call const *)arg1)->getUserData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getRemNatType(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj_stun_nat_type result;
  
  SWIG_check_num_args("pj::Call::getRemNatType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getRemNatType",1,"pj::Call *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getRemNatType",1,SWIGTYPE_p_pj__Call);
  }
  
  try {
    result = (pj_stun_nat_type)(arg1)->getRemNatType();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_makeCall(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Call::makeCall",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::makeCall",1,"pj::Call *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Call::makeCall",2,"pj::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Call::makeCall",3,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_makeCall",1,SWIGTYPE_p_pj__Call);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_makeCall",3,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->makeCall((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_answer(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::answer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::answer",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::answer",2,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_answer",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_answer",2,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->answer((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_hangup(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::hangup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::hangup",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::hangup",2,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_hangup",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_hangup",2,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->hangup((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_setHold(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::setHold",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::setHold",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::setHold",2,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_setHold",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_setHold",2,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->setHold((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_reinvite(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::reinvite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::reinvite",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::reinvite",2,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_reinvite",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_reinvite",2,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->reinvite((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_update(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::update",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::update",2,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_update",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_update",2,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->update((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_xfer(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Call::xfer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::xfer",1,"pj::Call *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Call::xfer",2,"pj::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Call::xfer",3,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_xfer",1,SWIGTYPE_p_pj__Call);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_xfer",3,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->xfer((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_xferReplaces(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Call *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  SWIG_check_num_args("pj::Call::xferReplaces",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::xferReplaces",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::xferReplaces",2,"pj::Call const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Call::xferReplaces",3,"pj::CallOpParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_xferReplaces",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_xferReplaces",2,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__CallOpParam,0))){
    SWIG_fail_ptr("Call_xferReplaces",3,SWIGTYPE_p_pj__CallOpParam);
  }
  
  try {
    (arg1)->xferReplaces((pj::Call const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_processRedirect(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsip_redirect_op arg2 ;
  
  SWIG_check_num_args("pj::Call::processRedirect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::processRedirect",1,"pj::Call *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::processRedirect",2,"pjsip_redirect_op");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_processRedirect",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2 = (pjsip_redirect_op)(int)lua_tonumber(L, 2);
  try {
    (arg1)->processRedirect(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_dialDtmf(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Call::dialDtmf",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::dialDtmf",1,"pj::Call *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Call::dialDtmf",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_dialDtmf",1,SWIGTYPE_p_pj__Call);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->dialDtmf((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_sendInstantMessage(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::sendInstantMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::sendInstantMessage",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::sendInstantMessage",2,"pj::SendInstantMessageParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_sendInstantMessage",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SendInstantMessageParam,0))){
    SWIG_fail_ptr("Call_sendInstantMessage",2,SWIGTYPE_p_pj__SendInstantMessageParam);
  }
  
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_sendTypingIndication(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::sendTypingIndication",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::sendTypingIndication",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::sendTypingIndication",2,"pj::SendTypingIndicationParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_sendTypingIndication",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SendTypingIndicationParam,0))){
    SWIG_fail_ptr("Call_sendTypingIndication",2,SWIGTYPE_p_pj__SendTypingIndicationParam);
  }
  
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_sendRequest(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendRequestParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::sendRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::sendRequest",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::sendRequest",2,"pj::CallSendRequestParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_sendRequest",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__CallSendRequestParam,0))){
    SWIG_fail_ptr("Call_sendRequest",2,SWIGTYPE_p_pj__CallSendRequestParam);
  }
  
  try {
    (arg1)->sendRequest((pj::CallSendRequestParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_dump(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool arg2 ;
  pj::string arg3 ;
  pj::string result;
  
  SWIG_check_num_args("pj::Call::dump",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::dump",1,"pj::Call *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::Call::dump",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::Call::dump",3,"pj::string const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_dump",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (&arg3)->assign(lua_tostring(L,3),lua_rawlen(L,3));
  try {
    result = (arg1)->dump(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_vidGetStreamIdx(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::Call::vidGetStreamIdx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::vidGetStreamIdx",1,"pj::Call const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_vidGetStreamIdx",1,SWIGTYPE_p_pj__Call);
  }
  
  result = (int)((pj::Call const *)arg1)->vidGetStreamIdx();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_vidStreamIsRunning(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pjmedia_dir arg3 ;
  bool result;
  
  SWIG_check_num_args("pj::Call::vidStreamIsRunning",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::vidStreamIsRunning",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::vidStreamIsRunning",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::Call::vidStreamIsRunning",3,"pjmedia_dir");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_vidStreamIsRunning",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (pjmedia_dir)(int)lua_tonumber(L, 3);
  result = (bool)((pj::Call const *)arg1)->vidStreamIsRunning(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_vidSetStream(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsua_call_vid_strm_op arg2 ;
  pj::CallVidSetStreamParam *arg3 = 0 ;
  
  SWIG_check_num_args("pj::Call::vidSetStream",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::vidSetStream",1,"pj::Call *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::vidSetStream",2,"pjsua_call_vid_strm_op");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Call::vidSetStream",3,"pj::CallVidSetStreamParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_vidSetStream",1,SWIGTYPE_p_pj__Call);
  }
  
  arg2 = (pjsua_call_vid_strm_op)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__CallVidSetStreamParam,0))){
    SWIG_fail_ptr("Call_vidSetStream",3,SWIGTYPE_p_pj__CallVidSetStreamParam);
  }
  
  try {
    (arg1)->vidSetStream(arg2,(pj::CallVidSetStreamParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getStreamInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamInfo result;
  
  SWIG_check_num_args("pj::Call::getStreamInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getStreamInfo",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::getStreamInfo",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getStreamInfo",1,SWIGTYPE_p_pj__Call);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = ((pj::Call const *)arg1)->getStreamInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StreamInfo * resultptr = new pj::StreamInfo((const pj::StreamInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__StreamInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getStreamStat(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamStat result;
  
  SWIG_check_num_args("pj::Call::getStreamStat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getStreamStat",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::getStreamStat",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getStreamStat",1,SWIGTYPE_p_pj__Call);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = ((pj::Call const *)arg1)->getStreamStat(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::StreamStat * resultptr = new pj::StreamStat((const pj::StreamStat &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__StreamStat,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_getMedTransportInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::MediaTransportInfo result;
  
  SWIG_check_num_args("pj::Call::getMedTransportInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::getMedTransportInfo",1,"pj::Call const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Call::getMedTransportInfo",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_getMedTransportInfo",1,SWIGTYPE_p_pj__Call);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = ((pj::Call const *)arg1)->getMedTransportInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::MediaTransportInfo * resultptr = new pj::MediaTransportInfo((const pj::MediaTransportInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__MediaTransportInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_processMediaUpdate(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::processMediaUpdate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::processMediaUpdate",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::processMediaUpdate",2,"pj::OnCallMediaStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_processMediaUpdate",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallMediaStateParam,0))){
    SWIG_fail_ptr("Call_processMediaUpdate",2,SWIGTYPE_p_pj__OnCallMediaStateParam);
  }
  
  (arg1)->processMediaUpdate(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_processStateChange(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::processStateChange",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::processStateChange",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::processStateChange",2,"pj::OnCallStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_processStateChange",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallStateParam,0))){
    SWIG_fail_ptr("Call_processStateChange",2,SWIGTYPE_p_pj__OnCallStateParam);
  }
  
  (arg1)->processStateChange(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallState",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallState",2,"pj::OnCallStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallState",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallStateParam,0))){
    SWIG_fail_ptr("Call_onCallState",2,SWIGTYPE_p_pj__OnCallStateParam);
  }
  
  (arg1)->onCallState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallTsxState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallTsxState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallTsxState",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallTsxState",2,"pj::OnCallTsxStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallTsxState",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallTsxStateParam,0))){
    SWIG_fail_ptr("Call_onCallTsxState",2,SWIGTYPE_p_pj__OnCallTsxStateParam);
  }
  
  (arg1)->onCallTsxState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallMediaState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallMediaState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallMediaState",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallMediaState",2,"pj::OnCallMediaStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallMediaState",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallMediaStateParam,0))){
    SWIG_fail_ptr("Call_onCallMediaState",2,SWIGTYPE_p_pj__OnCallMediaStateParam);
  }
  
  (arg1)->onCallMediaState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallSdpCreated(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallSdpCreated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallSdpCreated",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallSdpCreated",2,"pj::OnCallSdpCreatedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallSdpCreated",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallSdpCreatedParam,0))){
    SWIG_fail_ptr("Call_onCallSdpCreated",2,SWIGTYPE_p_pj__OnCallSdpCreatedParam);
  }
  
  (arg1)->onCallSdpCreated(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onStreamCreated(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onStreamCreated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onStreamCreated",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onStreamCreated",2,"pj::OnStreamCreatedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onStreamCreated",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnStreamCreatedParam,0))){
    SWIG_fail_ptr("Call_onStreamCreated",2,SWIGTYPE_p_pj__OnStreamCreatedParam);
  }
  
  (arg1)->onStreamCreated(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onStreamDestroyed(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onStreamDestroyed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onStreamDestroyed",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onStreamDestroyed",2,"pj::OnStreamDestroyedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onStreamDestroyed",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnStreamDestroyedParam,0))){
    SWIG_fail_ptr("Call_onStreamDestroyed",2,SWIGTYPE_p_pj__OnStreamDestroyedParam);
  }
  
  (arg1)->onStreamDestroyed(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onDtmfDigit(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onDtmfDigit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onDtmfDigit",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onDtmfDigit",2,"pj::OnDtmfDigitParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onDtmfDigit",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnDtmfDigitParam,0))){
    SWIG_fail_ptr("Call_onDtmfDigit",2,SWIGTYPE_p_pj__OnDtmfDigitParam);
  }
  
  (arg1)->onDtmfDigit(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallTransferRequest(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallTransferRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallTransferRequest",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallTransferRequest",2,"pj::OnCallTransferRequestParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallTransferRequest",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallTransferRequestParam,0))){
    SWIG_fail_ptr("Call_onCallTransferRequest",2,SWIGTYPE_p_pj__OnCallTransferRequestParam);
  }
  
  (arg1)->onCallTransferRequest(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallTransferStatus(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallTransferStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallTransferStatus",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallTransferStatus",2,"pj::OnCallTransferStatusParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallTransferStatus",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallTransferStatusParam,0))){
    SWIG_fail_ptr("Call_onCallTransferStatus",2,SWIGTYPE_p_pj__OnCallTransferStatusParam);
  }
  
  (arg1)->onCallTransferStatus(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallReplaceRequest(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallReplaceRequest",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallReplaceRequest",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallReplaceRequest",2,"pj::OnCallReplaceRequestParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallReplaceRequest",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallReplaceRequestParam,0))){
    SWIG_fail_ptr("Call_onCallReplaceRequest",2,SWIGTYPE_p_pj__OnCallReplaceRequestParam);
  }
  
  (arg1)->onCallReplaceRequest(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallReplaced(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallReplaced",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallReplaced",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallReplaced",2,"pj::OnCallReplacedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallReplaced",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallReplacedParam,0))){
    SWIG_fail_ptr("Call_onCallReplaced",2,SWIGTYPE_p_pj__OnCallReplacedParam);
  }
  
  (arg1)->onCallReplaced(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallRxOffer(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallRxOffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallRxOffer",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallRxOffer",2,"pj::OnCallRxOfferParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallRxOffer",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallRxOfferParam,0))){
    SWIG_fail_ptr("Call_onCallRxOffer",2,SWIGTYPE_p_pj__OnCallRxOfferParam);
  }
  
  (arg1)->onCallRxOffer(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onInstantMessage(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onInstantMessage",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onInstantMessage",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onInstantMessage",2,"pj::OnInstantMessageParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onInstantMessage",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnInstantMessageParam,0))){
    SWIG_fail_ptr("Call_onInstantMessage",2,SWIGTYPE_p_pj__OnInstantMessageParam);
  }
  
  (arg1)->onInstantMessage(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onInstantMessageStatus(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onInstantMessageStatus",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onInstantMessageStatus",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onInstantMessageStatus",2,"pj::OnInstantMessageStatusParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onInstantMessageStatus",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnInstantMessageStatusParam,0))){
    SWIG_fail_ptr("Call_onInstantMessageStatus",2,SWIGTYPE_p_pj__OnInstantMessageStatusParam);
  }
  
  (arg1)->onInstantMessageStatus(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onTypingIndication(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onTypingIndication",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onTypingIndication",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onTypingIndication",2,"pj::OnTypingIndicationParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onTypingIndication",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnTypingIndicationParam,0))){
    SWIG_fail_ptr("Call_onTypingIndication",2,SWIGTYPE_p_pj__OnTypingIndicationParam);
  }
  
  (arg1)->onTypingIndication(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallRedirected(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  SWIG_check_num_args("pj::Call::onCallRedirected",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallRedirected",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallRedirected",2,"pj::OnCallRedirectedParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallRedirected",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallRedirectedParam,0))){
    SWIG_fail_ptr("Call_onCallRedirected",2,SWIGTYPE_p_pj__OnCallRedirectedParam);
  }
  
  result = (pjsip_redirect_op)(arg1)->onCallRedirected(*arg2);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallMediaTransportState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallMediaTransportState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallMediaTransportState",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallMediaTransportState",2,"pj::OnCallMediaTransportStateParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallMediaTransportState",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallMediaTransportStateParam,0))){
    SWIG_fail_ptr("Call_onCallMediaTransportState",2,SWIGTYPE_p_pj__OnCallMediaTransportStateParam);
  }
  
  (arg1)->onCallMediaTransportState(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCallMediaEvent(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCallMediaEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCallMediaEvent",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCallMediaEvent",2,"pj::OnCallMediaEventParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCallMediaEvent",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCallMediaEventParam,0))){
    SWIG_fail_ptr("Call_onCallMediaEvent",2,SWIGTYPE_p_pj__OnCallMediaEventParam);
  }
  
  (arg1)->onCallMediaEvent(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Call_onCreateMediaTransport(lua_State* L) {
  int SWIG_arg = 0;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Call::onCreateMediaTransport",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Call::onCreateMediaTransport",1,"pj::Call *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Call::onCreateMediaTransport",2,"pj::OnCreateMediaTransportParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Call,0))){
    SWIG_fail_ptr("Call_onCreateMediaTransport",1,SWIGTYPE_p_pj__Call);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnCreateMediaTransportParam,0))){
    SWIG_fail_ptr("Call_onCreateMediaTransport",2,SWIGTYPE_p_pj__OnCreateMediaTransportParam);
  }
  
  (arg1)->onCreateMediaTransport(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Call(void *obj) {
pj::Call *arg1 = (pj::Call *) obj;
delete arg1;
}
static int _proxy__wrap_new_Call(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Call);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Call_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Call_methods[]= {
    { "getInfo", _wrap_Call_getInfo},
    { "isActive", _wrap_Call_isActive},
    { "getId", _wrap_Call_getId},
    { "hasMedia", _wrap_Call_hasMedia},
    { "getMedia", _wrap_Call_getMedia},
    { "remoteHasCap", _wrap_Call_remoteHasCap},
    { "setUserData", _wrap_Call_setUserData},
    { "getUserData", _wrap_Call_getUserData},
    { "getRemNatType", _wrap_Call_getRemNatType},
    { "makeCall", _wrap_Call_makeCall},
    { "answer", _wrap_Call_answer},
    { "hangup", _wrap_Call_hangup},
    { "setHold", _wrap_Call_setHold},
    { "reinvite", _wrap_Call_reinvite},
    { "update", _wrap_Call_update},
    { "xfer", _wrap_Call_xfer},
    { "xferReplaces", _wrap_Call_xferReplaces},
    { "processRedirect", _wrap_Call_processRedirect},
    { "dialDtmf", _wrap_Call_dialDtmf},
    { "sendInstantMessage", _wrap_Call_sendInstantMessage},
    { "sendTypingIndication", _wrap_Call_sendTypingIndication},
    { "sendRequest", _wrap_Call_sendRequest},
    { "dump", _wrap_Call_dump},
    { "vidGetStreamIdx", _wrap_Call_vidGetStreamIdx},
    { "vidStreamIsRunning", _wrap_Call_vidStreamIsRunning},
    { "vidSetStream", _wrap_Call_vidSetStream},
    { "getStreamInfo", _wrap_Call_getStreamInfo},
    { "getStreamStat", _wrap_Call_getStreamStat},
    { "getMedTransportInfo", _wrap_Call_getMedTransportInfo},
    { "processMediaUpdate", _wrap_Call_processMediaUpdate},
    { "processStateChange", _wrap_Call_processStateChange},
    { "onCallState", _wrap_Call_onCallState},
    { "onCallTsxState", _wrap_Call_onCallTsxState},
    { "onCallMediaState", _wrap_Call_onCallMediaState},
    { "onCallSdpCreated", _wrap_Call_onCallSdpCreated},
    { "onStreamCreated", _wrap_Call_onStreamCreated},
    { "onStreamDestroyed", _wrap_Call_onStreamDestroyed},
    { "onDtmfDigit", _wrap_Call_onDtmfDigit},
    { "onCallTransferRequest", _wrap_Call_onCallTransferRequest},
    { "onCallTransferStatus", _wrap_Call_onCallTransferStatus},
    { "onCallReplaceRequest", _wrap_Call_onCallReplaceRequest},
    { "onCallReplaced", _wrap_Call_onCallReplaced},
    { "onCallRxOffer", _wrap_Call_onCallRxOffer},
    { "onInstantMessage", _wrap_Call_onInstantMessage},
    { "onInstantMessageStatus", _wrap_Call_onInstantMessageStatus},
    { "onTypingIndication", _wrap_Call_onTypingIndication},
    { "onCallRedirected", _wrap_Call_onCallRedirected},
    { "onCallMediaTransportState", _wrap_Call_onCallMediaTransportState},
    { "onCallMediaEvent", _wrap_Call_onCallMediaEvent},
    { "onCreateMediaTransport", _wrap_Call_onCreateMediaTransport},
    {0,0}
};
static swig_lua_method swig_Call_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Call_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Call_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Call_Sf_SwigStatic_methods[]= {
    { "lookup", _wrap_Call_lookup},
    {0,0}
};
static swig_lua_class* swig_Call_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Call_Sf_SwigStatic = {
    "Call",
    swig_Call_Sf_SwigStatic_methods,
    swig_Call_Sf_SwigStatic_attributes,
    swig_Call_Sf_SwigStatic_constants,
    swig_Call_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Call_bases[] = {0};
static const char *swig_Call_base_names[] = {0};
static swig_lua_class _wrap_class_Call = { "Call", "Call", &SWIGTYPE_p_pj__Call,_proxy__wrap_new_Call, swig_delete_Call, swig_Call_methods, swig_Call_attributes, &swig_Call_Sf_SwigStatic, swig_Call_meta, swig_Call_bases, swig_Call_base_names };

static int _wrap_new_CallMediaInfoVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::vector",0,0)
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallMediaInfoVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::vector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::vector",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallMediaInfoVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::vector",1,"std::vector< pj::CallMediaInfo > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("new_CallMediaInfoVector",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >((std::vector< pj::CallMediaInfo > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallMediaInfoVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  pj::CallMediaInfo arg2 ;
  pj::CallMediaInfo *argp2 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::vector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::vector",1,"unsigned int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::vector",2,"pj::CallMediaInfo");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("new_CallMediaInfoVector",2,SWIGTYPE_p_pj__CallMediaInfo);
  }
  arg2 = *argp2;
  
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CallMediaInfoVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CallMediaInfoVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CallMediaInfoVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_CallMediaInfoVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__CallMediaInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_CallMediaInfoVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CallMediaInfoVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< pj::CallMediaInfo >::vector()\n"
    "    std::vector< pj::CallMediaInfo >::vector(unsigned int)\n"
    "    std::vector< pj::CallMediaInfo >::vector(std::vector< pj::CallMediaInfo > const &)\n"
    "    std::vector< pj::CallMediaInfo >::vector(unsigned int,pj::CallMediaInfo)\n");
  lua_error(L);return 0;
}


static int _wrap_CallMediaInfoVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::size",1,"std::vector< pj::CallMediaInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_size",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = (unsigned int)((std::vector< pj::CallMediaInfo > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::max_size",1,"std::vector< pj::CallMediaInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_max_size",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = (unsigned int)((std::vector< pj::CallMediaInfo > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::empty",1,"std::vector< pj::CallMediaInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_empty",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = (bool)((std::vector< pj::CallMediaInfo > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::clear",1,"std::vector< pj::CallMediaInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_clear",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  pj::CallMediaInfo arg2 ;
  pj::CallMediaInfo *argp2 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::push_back",1,"std::vector< pj::CallMediaInfo > *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::push_back",2,"pj::CallMediaInfo");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_push_back",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfoVector_push_back",2,SWIGTYPE_p_pj__CallMediaInfo);
  }
  arg2 = *argp2;
  
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::pop_back",1,"std::vector< pj::CallMediaInfo > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_pop_back",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  pj::CallMediaInfo result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::front",1,"std::vector< pj::CallMediaInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_front",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->front();
  {
    pj::CallMediaInfo * resultptr = new pj::CallMediaInfo((const pj::CallMediaInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__CallMediaInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  pj::CallMediaInfo result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::back",1,"std::vector< pj::CallMediaInfo > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector_back",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->back();
  {
    pj::CallMediaInfo * resultptr = new pj::CallMediaInfo((const pj::CallMediaInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__CallMediaInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  unsigned int arg2 ;
  pj::CallMediaInfo result;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::__getitem__",1,"std::vector< pj::CallMediaInfo > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector___getitem",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  {
    pj::CallMediaInfo * resultptr = new pj::CallMediaInfo((const pj::CallMediaInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__CallMediaInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CallMediaInfoVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  unsigned int arg2 ;
  pj::CallMediaInfo arg3 ;
  pj::CallMediaInfo *argp3 ;
  
  SWIG_check_num_args("std::vector< pj::CallMediaInfo >::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::__setitem__",1,"std::vector< pj::CallMediaInfo > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::__setitem__",2,"unsigned int");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("std::vector< pj::CallMediaInfo >::__setitem__",3,"pj::CallMediaInfo");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,0))){
    SWIG_fail_ptr("CallMediaInfoVector___setitem",1,SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_pj__CallMediaInfo,0))){
    SWIG_fail_ptr("CallMediaInfoVector___setitem",3,SWIGTYPE_p_pj__CallMediaInfo);
  }
  arg3 = *argp3;
  
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CallMediaInfoVector(void *obj) {
std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) obj;
delete arg1;
}
static int _proxy__wrap_new_CallMediaInfoVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CallMediaInfoVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CallMediaInfoVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CallMediaInfoVector_methods[]= {
    { "size", _wrap_CallMediaInfoVector_size},
    { "max_size", _wrap_CallMediaInfoVector_max_size},
    { "empty", _wrap_CallMediaInfoVector_empty},
    { "clear", _wrap_CallMediaInfoVector_clear},
    { "push_back", _wrap_CallMediaInfoVector_push_back},
    { "pop_back", _wrap_CallMediaInfoVector_pop_back},
    { "front", _wrap_CallMediaInfoVector_front},
    { "back", _wrap_CallMediaInfoVector_back},
    { "__getitem", _wrap_CallMediaInfoVector___getitem},
    { "__setitem", _wrap_CallMediaInfoVector___setitem},
    {0,0}
};
static swig_lua_method swig_CallMediaInfoVector_meta[] = {
    { "__getitem", _wrap_CallMediaInfoVector___getitem},
    { "__setitem", _wrap_CallMediaInfoVector___setitem},
    {0,0}
};

static swig_lua_attribute swig_CallMediaInfoVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CallMediaInfoVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CallMediaInfoVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CallMediaInfoVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CallMediaInfoVector_Sf_SwigStatic = {
    "CallMediaInfoVector",
    swig_CallMediaInfoVector_Sf_SwigStatic_methods,
    swig_CallMediaInfoVector_Sf_SwigStatic_attributes,
    swig_CallMediaInfoVector_Sf_SwigStatic_constants,
    swig_CallMediaInfoVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CallMediaInfoVector_bases[] = {0};
static const char *swig_CallMediaInfoVector_base_names[] = {0};
static swig_lua_class _wrap_class_CallMediaInfoVector = { "CallMediaInfoVector", "CallMediaInfoVector", &SWIGTYPE_p_std__vectorT_pj__CallMediaInfo_t,_proxy__wrap_new_CallMediaInfoVector, swig_delete_CallMediaInfoVector, swig_CallMediaInfoVector_methods, swig_CallMediaInfoVector_attributes, &swig_CallMediaInfoVector_Sf_SwigStatic, swig_CallMediaInfoVector_meta, swig_CallMediaInfoVector_bases, swig_CallMediaInfoVector_base_names };

static int _wrap_new_JsonDocument(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *result = 0 ;
  
  SWIG_check_num_args("pj::JsonDocument::JsonDocument",0,0)
  result = (pj::JsonDocument *)new pj::JsonDocument();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__JsonDocument,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JsonDocument_loadFile(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::JsonDocument::loadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JsonDocument::loadFile",1,"pj::JsonDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::JsonDocument::loadFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JsonDocument,0))){
    SWIG_fail_ptr("JsonDocument_loadFile",1,SWIGTYPE_p_pj__JsonDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JsonDocument_loadString(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::JsonDocument::loadString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JsonDocument::loadString",1,"pj::JsonDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::JsonDocument::loadString",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JsonDocument,0))){
    SWIG_fail_ptr("JsonDocument_loadString",1,SWIGTYPE_p_pj__JsonDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JsonDocument_saveFile(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::JsonDocument::saveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JsonDocument::saveFile",1,"pj::JsonDocument *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::JsonDocument::saveFile",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JsonDocument,0))){
    SWIG_fail_ptr("JsonDocument_saveFile",1,SWIGTYPE_p_pj__JsonDocument);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JsonDocument_saveString(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string result;
  
  SWIG_check_num_args("pj::JsonDocument::saveString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JsonDocument::saveString",1,"pj::JsonDocument *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JsonDocument,0))){
    SWIG_fail_ptr("JsonDocument_saveString",1,SWIGTYPE_p_pj__JsonDocument);
  }
  
  try {
    result = (arg1)->saveString();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_JsonDocument_getRootContainer(lua_State* L) {
  int SWIG_arg = 0;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  SWIG_check_num_args("pj::JsonDocument::getRootContainer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::JsonDocument::getRootContainer",1,"pj::JsonDocument const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__JsonDocument,0))){
    SWIG_fail_ptr("JsonDocument_getRootContainer",1,SWIGTYPE_p_pj__JsonDocument);
  }
  
  result = (pj::ContainerNode *) &((pj::JsonDocument const *)arg1)->getRootContainer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__ContainerNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_JsonDocument(void *obj) {
pj::JsonDocument *arg1 = (pj::JsonDocument *) obj;
delete arg1;
}
static int _proxy__wrap_new_JsonDocument(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_JsonDocument);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_JsonDocument_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_JsonDocument_methods[]= {
    { "loadFile", _wrap_JsonDocument_loadFile},
    { "loadString", _wrap_JsonDocument_loadString},
    { "saveFile", _wrap_JsonDocument_saveFile},
    { "saveString", _wrap_JsonDocument_saveString},
    { "getRootContainer", _wrap_JsonDocument_getRootContainer},
    {0,0}
};
static swig_lua_method swig_JsonDocument_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_JsonDocument_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_JsonDocument_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_JsonDocument_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_JsonDocument_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_JsonDocument_Sf_SwigStatic = {
    "JsonDocument",
    swig_JsonDocument_Sf_SwigStatic_methods,
    swig_JsonDocument_Sf_SwigStatic_attributes,
    swig_JsonDocument_Sf_SwigStatic_constants,
    swig_JsonDocument_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_JsonDocument_bases[] = {0,0};
static const char *swig_JsonDocument_base_names[] = {"pj::PersistentDocument *",0};
static swig_lua_class _wrap_class_JsonDocument = { "JsonDocument", "JsonDocument", &SWIGTYPE_p_pj__JsonDocument,_proxy__wrap_new_JsonDocument, swig_delete_JsonDocument, swig_JsonDocument_methods, swig_JsonDocument_attributes, &swig_JsonDocument_Sf_SwigStatic, swig_JsonDocument_meta, swig_JsonDocument_bases, swig_JsonDocument_base_names };

static int _wrap_OnNatDetectionCompleteParam_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::status",1,"pj::OnNatDetectionCompleteParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::status",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_status_set",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::status",1,"pj::OnNatDetectionCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_status_get",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  result = (pj_status_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_reason_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::reason",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::reason",1,"pj::OnNatDetectionCompleteParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::reason",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_reason_set",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->reason = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_reason_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::reason",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::reason",1,"pj::OnNatDetectionCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_reason_get",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  result = (pj::string *) & ((arg1)->reason);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_natType_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type arg2 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::natType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natType",1,"pj::OnNatDetectionCompleteParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natType",2,"pj_stun_nat_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_natType_set",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  arg2 = (pj_stun_nat_type)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->natType = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_natType_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type result;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::natType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natType",1,"pj::OnNatDetectionCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_natType_get",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  result = (pj_stun_nat_type) ((arg1)->natType);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_natTypeName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::natTypeName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natTypeName",1,"pj::OnNatDetectionCompleteParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natTypeName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_natTypeName_set",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->natTypeName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatDetectionCompleteParam_natTypeName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::natTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatDetectionCompleteParam::natTypeName",1,"pj::OnNatDetectionCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("OnNatDetectionCompleteParam_natTypeName_get",1,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  result = (pj::string *) & ((arg1)->natTypeName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnNatDetectionCompleteParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatDetectionCompleteParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatDetectionCompleteParam::OnNatDetectionCompleteParam",0,0)
  result = (pj::OnNatDetectionCompleteParam *)new pj::OnNatDetectionCompleteParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnNatDetectionCompleteParam(void *obj) {
pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnNatDetectionCompleteParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnNatDetectionCompleteParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnNatDetectionCompleteParam_attributes[] = {
    { "status", _wrap_OnNatDetectionCompleteParam_status_get, _wrap_OnNatDetectionCompleteParam_status_set },
    { "reason", _wrap_OnNatDetectionCompleteParam_reason_get, _wrap_OnNatDetectionCompleteParam_reason_set },
    { "natType", _wrap_OnNatDetectionCompleteParam_natType_get, _wrap_OnNatDetectionCompleteParam_natType_set },
    { "natTypeName", _wrap_OnNatDetectionCompleteParam_natTypeName_get, _wrap_OnNatDetectionCompleteParam_natTypeName_set },
    {0,0,0}
};
static swig_lua_method swig_OnNatDetectionCompleteParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnNatDetectionCompleteParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnNatDetectionCompleteParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnNatDetectionCompleteParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnNatDetectionCompleteParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnNatDetectionCompleteParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnNatDetectionCompleteParam_Sf_SwigStatic = {
    "OnNatDetectionCompleteParam",
    swig_OnNatDetectionCompleteParam_Sf_SwigStatic_methods,
    swig_OnNatDetectionCompleteParam_Sf_SwigStatic_attributes,
    swig_OnNatDetectionCompleteParam_Sf_SwigStatic_constants,
    swig_OnNatDetectionCompleteParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnNatDetectionCompleteParam_bases[] = {0};
static const char *swig_OnNatDetectionCompleteParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnNatDetectionCompleteParam = { "OnNatDetectionCompleteParam", "OnNatDetectionCompleteParam", &SWIGTYPE_p_pj__OnNatDetectionCompleteParam,_proxy__wrap_new_OnNatDetectionCompleteParam, swig_delete_OnNatDetectionCompleteParam, swig_OnNatDetectionCompleteParam_methods, swig_OnNatDetectionCompleteParam_attributes, &swig_OnNatDetectionCompleteParam_Sf_SwigStatic, swig_OnNatDetectionCompleteParam_meta, swig_OnNatDetectionCompleteParam_bases, swig_OnNatDetectionCompleteParam_base_names };

static int _wrap_OnNatCheckStunServersCompleteParam_userData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::userData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::userData",1,"pj::OnNatCheckStunServersCompleteParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::userData",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_userData_set",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"OnNatCheckStunServersCompleteParam_userData_set");
  if (arg1) (arg1)->userData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_userData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::userData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::userData",1,"pj::OnNatCheckStunServersCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_userData_get",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  result = (pj::Token) ((arg1)->userData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_status_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::status",1,"pj::OnNatCheckStunServersCompleteParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::status",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_status_set",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_status_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::status",1,"pj::OnNatCheckStunServersCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_status_get",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  result = (pj_status_t) ((arg1)->status);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_name_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::name",1,"pj::OnNatCheckStunServersCompleteParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::name",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_name_set",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_name_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::name",1,"pj::OnNatCheckStunServersCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_name_get",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  result = (pj::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_addr_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  pj::SocketAddress temp2 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::addr",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::addr",1,"pj::OnNatCheckStunServersCompleteParam *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::addr",2,"pj::SocketAddress const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_addr_set",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->addr = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnNatCheckStunServersCompleteParam_addr_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::addr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnNatCheckStunServersCompleteParam::addr",1,"pj::OnNatCheckStunServersCompleteParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("OnNatCheckStunServersCompleteParam_addr_get",1,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  result = (pj::SocketAddress *) & ((arg1)->addr);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnNatCheckStunServersCompleteParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnNatCheckStunServersCompleteParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnNatCheckStunServersCompleteParam::OnNatCheckStunServersCompleteParam",0,0)
  result = (pj::OnNatCheckStunServersCompleteParam *)new pj::OnNatCheckStunServersCompleteParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnNatCheckStunServersCompleteParam(void *obj) {
pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnNatCheckStunServersCompleteParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnNatCheckStunServersCompleteParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnNatCheckStunServersCompleteParam_attributes[] = {
    { "userData", _wrap_OnNatCheckStunServersCompleteParam_userData_get, _wrap_OnNatCheckStunServersCompleteParam_userData_set },
    { "status", _wrap_OnNatCheckStunServersCompleteParam_status_get, _wrap_OnNatCheckStunServersCompleteParam_status_set },
    { "name", _wrap_OnNatCheckStunServersCompleteParam_name_get, _wrap_OnNatCheckStunServersCompleteParam_name_set },
    { "addr", _wrap_OnNatCheckStunServersCompleteParam_addr_get, _wrap_OnNatCheckStunServersCompleteParam_addr_set },
    {0,0,0}
};
static swig_lua_method swig_OnNatCheckStunServersCompleteParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnNatCheckStunServersCompleteParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic = {
    "OnNatCheckStunServersCompleteParam",
    swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_methods,
    swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_attributes,
    swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_constants,
    swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnNatCheckStunServersCompleteParam_bases[] = {0};
static const char *swig_OnNatCheckStunServersCompleteParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnNatCheckStunServersCompleteParam = { "OnNatCheckStunServersCompleteParam", "OnNatCheckStunServersCompleteParam", &SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,_proxy__wrap_new_OnNatCheckStunServersCompleteParam, swig_delete_OnNatCheckStunServersCompleteParam, swig_OnNatCheckStunServersCompleteParam_methods, swig_OnNatCheckStunServersCompleteParam_attributes, &swig_OnNatCheckStunServersCompleteParam_Sf_SwigStatic, swig_OnNatCheckStunServersCompleteParam_meta, swig_OnNatCheckStunServersCompleteParam_bases, swig_OnNatCheckStunServersCompleteParam_base_names };

static int _wrap_OnTimerParam_userData_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::OnTimerParam::userData",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTimerParam::userData",1,"pj::OnTimerParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnTimerParam::userData",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTimerParam,0))){
    SWIG_fail_ptr("OnTimerParam_userData_set",1,SWIGTYPE_p_pj__OnTimerParam);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"OnTimerParam_userData_set");
  if (arg1) (arg1)->userData = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTimerParam_userData_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::OnTimerParam::userData",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTimerParam::userData",1,"pj::OnTimerParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTimerParam,0))){
    SWIG_fail_ptr("OnTimerParam_userData_get",1,SWIGTYPE_p_pj__OnTimerParam);
  }
  
  result = (pj::Token) ((arg1)->userData);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTimerParam_msecDelay_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::OnTimerParam::msecDelay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTimerParam::msecDelay",1,"pj::OnTimerParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnTimerParam::msecDelay",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTimerParam,0))){
    SWIG_fail_ptr("OnTimerParam_msecDelay_set",1,SWIGTYPE_p_pj__OnTimerParam);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->msecDelay = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTimerParam_msecDelay_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::OnTimerParam::msecDelay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTimerParam::msecDelay",1,"pj::OnTimerParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTimerParam,0))){
    SWIG_fail_ptr("OnTimerParam_msecDelay_get",1,SWIGTYPE_p_pj__OnTimerParam);
  }
  
  result = (unsigned int) ((arg1)->msecDelay);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnTimerParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTimerParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnTimerParam::OnTimerParam",0,0)
  result = (pj::OnTimerParam *)new pj::OnTimerParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnTimerParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnTimerParam(void *obj) {
pj::OnTimerParam *arg1 = (pj::OnTimerParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnTimerParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnTimerParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnTimerParam_attributes[] = {
    { "userData", _wrap_OnTimerParam_userData_get, _wrap_OnTimerParam_userData_set },
    { "msecDelay", _wrap_OnTimerParam_msecDelay_get, _wrap_OnTimerParam_msecDelay_set },
    {0,0,0}
};
static swig_lua_method swig_OnTimerParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnTimerParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnTimerParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnTimerParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnTimerParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnTimerParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnTimerParam_Sf_SwigStatic = {
    "OnTimerParam",
    swig_OnTimerParam_Sf_SwigStatic_methods,
    swig_OnTimerParam_Sf_SwigStatic_attributes,
    swig_OnTimerParam_Sf_SwigStatic_constants,
    swig_OnTimerParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnTimerParam_bases[] = {0};
static const char *swig_OnTimerParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnTimerParam = { "OnTimerParam", "OnTimerParam", &SWIGTYPE_p_pj__OnTimerParam,_proxy__wrap_new_OnTimerParam, swig_delete_OnTimerParam, swig_OnTimerParam_methods, swig_OnTimerParam_attributes, &swig_OnTimerParam_Sf_SwigStatic, swig_OnTimerParam_meta, swig_OnTimerParam_bases, swig_OnTimerParam_base_names };

static int _wrap_OnTransportStateParam_hnd_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  SWIG_check_num_args("pj::OnTransportStateParam::hnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::hnd",1,"pj::OnTransportStateParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnTransportStateParam::hnd",2,"pj::TransportHandle");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_hnd_set",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  arg2=(pj::TransportHandle)SWIG_MustGetPtr(L,2,0,0,2,"OnTransportStateParam_hnd_set");
  if (arg1) (arg1)->hnd = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTransportStateParam_hnd_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle result;
  
  SWIG_check_num_args("pj::OnTransportStateParam::hnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::hnd",1,"pj::OnTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_hnd_get",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  result = (pj::TransportHandle) ((arg1)->hnd);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTransportStateParam_state_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state arg2 ;
  
  SWIG_check_num_args("pj::OnTransportStateParam::state",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::state",1,"pj::OnTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnTransportStateParam::state",2,"pjsip_transport_state");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_state_set",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  arg2 = (pjsip_transport_state)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->state = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTransportStateParam_state_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state result;
  
  SWIG_check_num_args("pj::OnTransportStateParam::state",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::state",1,"pj::OnTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_state_get",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  result = (pjsip_transport_state) ((arg1)->state);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTransportStateParam_lastError_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  SWIG_check_num_args("pj::OnTransportStateParam::lastError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::lastError",1,"pj::OnTransportStateParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnTransportStateParam::lastError",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_lastError_set",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  if (arg1) (arg1)->lastError = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnTransportStateParam_lastError_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::OnTransportStateParam::lastError",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnTransportStateParam::lastError",1,"pj::OnTransportStateParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("OnTransportStateParam_lastError_get",1,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  result = (pj_status_t) ((arg1)->lastError);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnTransportStateParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnTransportStateParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnTransportStateParam::OnTransportStateParam",0,0)
  result = (pj::OnTransportStateParam *)new pj::OnTransportStateParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnTransportStateParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnTransportStateParam(void *obj) {
pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnTransportStateParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnTransportStateParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnTransportStateParam_attributes[] = {
    { "hnd", _wrap_OnTransportStateParam_hnd_get, _wrap_OnTransportStateParam_hnd_set },
    { "state", _wrap_OnTransportStateParam_state_get, _wrap_OnTransportStateParam_state_set },
    { "lastError", _wrap_OnTransportStateParam_lastError_get, _wrap_OnTransportStateParam_lastError_set },
    {0,0,0}
};
static swig_lua_method swig_OnTransportStateParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnTransportStateParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnTransportStateParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnTransportStateParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnTransportStateParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnTransportStateParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnTransportStateParam_Sf_SwigStatic = {
    "OnTransportStateParam",
    swig_OnTransportStateParam_Sf_SwigStatic_methods,
    swig_OnTransportStateParam_Sf_SwigStatic_attributes,
    swig_OnTransportStateParam_Sf_SwigStatic_constants,
    swig_OnTransportStateParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnTransportStateParam_bases[] = {0};
static const char *swig_OnTransportStateParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnTransportStateParam = { "OnTransportStateParam", "OnTransportStateParam", &SWIGTYPE_p_pj__OnTransportStateParam,_proxy__wrap_new_OnTransportStateParam, swig_delete_OnTransportStateParam, swig_OnTransportStateParam_methods, swig_OnTransportStateParam_attributes, &swig_OnTransportStateParam_Sf_SwigStatic, swig_OnTransportStateParam_meta, swig_OnTransportStateParam_bases, swig_OnTransportStateParam_base_names };

static int _wrap_OnSelectAccountParam_rdata_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  SWIG_check_num_args("pj::OnSelectAccountParam::rdata",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnSelectAccountParam::rdata",1,"pj::OnSelectAccountParam *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::OnSelectAccountParam::rdata",2,"pj::SipRxData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnSelectAccountParam,0))){
    SWIG_fail_ptr("OnSelectAccountParam_rdata_set",1,SWIGTYPE_p_pj__OnSelectAccountParam);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__SipRxData,0))){
    SWIG_fail_ptr("OnSelectAccountParam_rdata_set",2,SWIGTYPE_p_pj__SipRxData);
  }
  
  if (arg1) (arg1)->rdata = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnSelectAccountParam_rdata_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  SWIG_check_num_args("pj::OnSelectAccountParam::rdata",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnSelectAccountParam::rdata",1,"pj::OnSelectAccountParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnSelectAccountParam,0))){
    SWIG_fail_ptr("OnSelectAccountParam_rdata_get",1,SWIGTYPE_p_pj__OnSelectAccountParam);
  }
  
  result = (pj::SipRxData *)& ((arg1)->rdata);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__SipRxData,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnSelectAccountParam_accountIndex_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::OnSelectAccountParam::accountIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnSelectAccountParam::accountIndex",1,"pj::OnSelectAccountParam *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::OnSelectAccountParam::accountIndex",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnSelectAccountParam,0))){
    SWIG_fail_ptr("OnSelectAccountParam_accountIndex_set",1,SWIGTYPE_p_pj__OnSelectAccountParam);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->accountIndex = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OnSelectAccountParam_accountIndex_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::OnSelectAccountParam::accountIndex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::OnSelectAccountParam::accountIndex",1,"pj::OnSelectAccountParam *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__OnSelectAccountParam,0))){
    SWIG_fail_ptr("OnSelectAccountParam_accountIndex_get",1,SWIGTYPE_p_pj__OnSelectAccountParam);
  }
  
  result = (int) ((arg1)->accountIndex);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OnSelectAccountParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::OnSelectAccountParam *result = 0 ;
  
  SWIG_check_num_args("pj::OnSelectAccountParam::OnSelectAccountParam",0,0)
  result = (pj::OnSelectAccountParam *)new pj::OnSelectAccountParam();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__OnSelectAccountParam,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OnSelectAccountParam(void *obj) {
pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) obj;
delete arg1;
}
static int _proxy__wrap_new_OnSelectAccountParam(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OnSelectAccountParam);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OnSelectAccountParam_attributes[] = {
    { "rdata", _wrap_OnSelectAccountParam_rdata_get, _wrap_OnSelectAccountParam_rdata_set },
    { "accountIndex", _wrap_OnSelectAccountParam_accountIndex_get, _wrap_OnSelectAccountParam_accountIndex_set },
    {0,0,0}
};
static swig_lua_method swig_OnSelectAccountParam_methods[]= {
    {0,0}
};
static swig_lua_method swig_OnSelectAccountParam_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OnSelectAccountParam_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OnSelectAccountParam_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OnSelectAccountParam_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OnSelectAccountParam_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OnSelectAccountParam_Sf_SwigStatic = {
    "OnSelectAccountParam",
    swig_OnSelectAccountParam_Sf_SwigStatic_methods,
    swig_OnSelectAccountParam_Sf_SwigStatic_attributes,
    swig_OnSelectAccountParam_Sf_SwigStatic_constants,
    swig_OnSelectAccountParam_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OnSelectAccountParam_bases[] = {0};
static const char *swig_OnSelectAccountParam_base_names[] = {0};
static swig_lua_class _wrap_class_OnSelectAccountParam = { "OnSelectAccountParam", "OnSelectAccountParam", &SWIGTYPE_p_pj__OnSelectAccountParam,_proxy__wrap_new_OnSelectAccountParam, swig_delete_OnSelectAccountParam, swig_OnSelectAccountParam_methods, swig_OnSelectAccountParam_attributes, &swig_OnSelectAccountParam_Sf_SwigStatic, swig_OnSelectAccountParam_meta, swig_OnSelectAccountParam_bases, swig_OnSelectAccountParam_base_names };

static int _wrap_UaConfig_maxCalls_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::maxCalls",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::maxCalls",1,"pj::UaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::UaConfig::maxCalls",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_maxCalls_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxCalls = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_maxCalls_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::UaConfig::maxCalls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::maxCalls",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_maxCalls_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (unsigned int) ((arg1)->maxCalls);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_threadCnt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::threadCnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::threadCnt",1,"pj::UaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::UaConfig::threadCnt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_threadCnt_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->threadCnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_threadCnt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::UaConfig::threadCnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::threadCnt",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_threadCnt_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (unsigned int) ((arg1)->threadCnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_mainThreadOnly_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::mainThreadOnly",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::mainThreadOnly",1,"pj::UaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::UaConfig::mainThreadOnly",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_mainThreadOnly_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->mainThreadOnly = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_mainThreadOnly_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::UaConfig::mainThreadOnly",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::mainThreadOnly",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_mainThreadOnly_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (bool) ((arg1)->mainThreadOnly);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_nameserver_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  SWIG_check_num_args("pj::UaConfig::nameserver",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::nameserver",1,"pj::UaConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UaConfig::nameserver",2,"pj::StringVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_nameserver_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("UaConfig_nameserver_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->nameserver = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_nameserver_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::nameserver",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::nameserver",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_nameserver_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (pj::StringVector *)& ((arg1)->nameserver);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_userAgent_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::UaConfig::userAgent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::userAgent",1,"pj::UaConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::UaConfig::userAgent",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_userAgent_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->userAgent = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_userAgent_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::userAgent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::userAgent",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_userAgent_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (pj::string *) & ((arg1)->userAgent);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_stunServer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  SWIG_check_num_args("pj::UaConfig::stunServer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::stunServer",1,"pj::UaConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::UaConfig::stunServer",2,"pj::StringVector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_stunServer_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("UaConfig_stunServer_set",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  if (arg1) (arg1)->stunServer = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_stunServer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::stunServer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::stunServer",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_stunServer_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (pj::StringVector *)& ((arg1)->stunServer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__string_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_stunIgnoreFailure_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::stunIgnoreFailure",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::stunIgnoreFailure",1,"pj::UaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::UaConfig::stunIgnoreFailure",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_stunIgnoreFailure_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->stunIgnoreFailure = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_stunIgnoreFailure_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::UaConfig::stunIgnoreFailure",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::stunIgnoreFailure",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_stunIgnoreFailure_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (bool) ((arg1)->stunIgnoreFailure);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_natTypeInSdp_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::natTypeInSdp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::natTypeInSdp",1,"pj::UaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::UaConfig::natTypeInSdp",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_natTypeInSdp_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->natTypeInSdp = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_natTypeInSdp_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::UaConfig::natTypeInSdp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::natTypeInSdp",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_natTypeInSdp_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (int) ((arg1)->natTypeInSdp);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_mwiUnsolicitedEnabled_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::UaConfig::mwiUnsolicitedEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::mwiUnsolicitedEnabled",1,"pj::UaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::UaConfig::mwiUnsolicitedEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_mwiUnsolicitedEnabled_set",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->mwiUnsolicitedEnabled = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_mwiUnsolicitedEnabled_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::UaConfig::mwiUnsolicitedEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::mwiUnsolicitedEnabled",1,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_mwiUnsolicitedEnabled_get",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  result = (bool) ((arg1)->mwiUnsolicitedEnabled);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_UaConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::UaConfig",0,0)
  result = (pj::UaConfig *)new pj::UaConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__UaConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::readObject",1,"pj::UaConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::UaConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_readObject",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("UaConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UaConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::UaConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::UaConfig::writeObject",1,"pj::UaConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::UaConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("UaConfig_writeObject",1,SWIGTYPE_p_pj__UaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("UaConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::UaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UaConfig(void *obj) {
pj::UaConfig *arg1 = (pj::UaConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_UaConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UaConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UaConfig_attributes[] = {
    { "maxCalls", _wrap_UaConfig_maxCalls_get, _wrap_UaConfig_maxCalls_set },
    { "threadCnt", _wrap_UaConfig_threadCnt_get, _wrap_UaConfig_threadCnt_set },
    { "mainThreadOnly", _wrap_UaConfig_mainThreadOnly_get, _wrap_UaConfig_mainThreadOnly_set },
    { "nameserver", _wrap_UaConfig_nameserver_get, _wrap_UaConfig_nameserver_set },
    { "userAgent", _wrap_UaConfig_userAgent_get, _wrap_UaConfig_userAgent_set },
    { "stunServer", _wrap_UaConfig_stunServer_get, _wrap_UaConfig_stunServer_set },
    { "stunIgnoreFailure", _wrap_UaConfig_stunIgnoreFailure_get, _wrap_UaConfig_stunIgnoreFailure_set },
    { "natTypeInSdp", _wrap_UaConfig_natTypeInSdp_get, _wrap_UaConfig_natTypeInSdp_set },
    { "mwiUnsolicitedEnabled", _wrap_UaConfig_mwiUnsolicitedEnabled_get, _wrap_UaConfig_mwiUnsolicitedEnabled_set },
    {0,0,0}
};
static swig_lua_method swig_UaConfig_methods[]= {
    { "readObject", _wrap_UaConfig_readObject},
    { "writeObject", _wrap_UaConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_UaConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UaConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UaConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UaConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UaConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UaConfig_Sf_SwigStatic = {
    "UaConfig",
    swig_UaConfig_Sf_SwigStatic_methods,
    swig_UaConfig_Sf_SwigStatic_attributes,
    swig_UaConfig_Sf_SwigStatic_constants,
    swig_UaConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UaConfig_bases[] = {0,0};
static const char *swig_UaConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_UaConfig = { "UaConfig", "UaConfig", &SWIGTYPE_p_pj__UaConfig,_proxy__wrap_new_UaConfig, swig_delete_UaConfig, swig_UaConfig_methods, swig_UaConfig_attributes, &swig_UaConfig_Sf_SwigStatic, swig_UaConfig_meta, swig_UaConfig_bases, swig_UaConfig_base_names };

static int _wrap_LogEntry_level_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::LogEntry::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::level",1,"pj::LogEntry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogEntry::level",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_level_set",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_level_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::LogEntry::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::level",1,"pj::LogEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_level_get",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  result = (int) ((arg1)->level);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_msg_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::LogEntry::msg",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::msg",1,"pj::LogEntry *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::LogEntry::msg",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_msg_set",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->msg = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_msg_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::LogEntry::msg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::msg",1,"pj::LogEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_msg_get",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  result = (pj::string *) & ((arg1)->msg);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_threadId_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long arg2 ;
  
  SWIG_check_num_args("pj::LogEntry::threadId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::threadId",1,"pj::LogEntry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogEntry::threadId",2,"long");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_threadId_set",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  arg2 = (long)lua_tonumber(L, 2);
  if (arg1) (arg1)->threadId = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_threadId_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long result;
  
  SWIG_check_num_args("pj::LogEntry::threadId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::threadId",1,"pj::LogEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_threadId_get",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  result = (long) ((arg1)->threadId);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_threadName_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::LogEntry::threadName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::threadName",1,"pj::LogEntry *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::LogEntry::threadName",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_threadName_set",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->threadName = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogEntry_threadName_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::LogEntry::threadName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogEntry::threadName",1,"pj::LogEntry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogEntry_threadName_get",1,SWIGTYPE_p_pj__LogEntry);
  }
  
  result = (pj::string *) & ((arg1)->threadName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogEntry(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogEntry *result = 0 ;
  
  SWIG_check_num_args("pj::LogEntry::LogEntry",0,0)
  result = (pj::LogEntry *)new pj::LogEntry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__LogEntry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogEntry(void *obj) {
pj::LogEntry *arg1 = (pj::LogEntry *) obj;
delete arg1;
}
static int _proxy__wrap_new_LogEntry(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LogEntry);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LogEntry_attributes[] = {
    { "level", _wrap_LogEntry_level_get, _wrap_LogEntry_level_set },
    { "msg", _wrap_LogEntry_msg_get, _wrap_LogEntry_msg_set },
    { "threadId", _wrap_LogEntry_threadId_get, _wrap_LogEntry_threadId_set },
    { "threadName", _wrap_LogEntry_threadName_get, _wrap_LogEntry_threadName_set },
    {0,0,0}
};
static swig_lua_method swig_LogEntry_methods[]= {
    {0,0}
};
static swig_lua_method swig_LogEntry_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LogEntry_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LogEntry_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LogEntry_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LogEntry_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LogEntry_Sf_SwigStatic = {
    "LogEntry",
    swig_LogEntry_Sf_SwigStatic_methods,
    swig_LogEntry_Sf_SwigStatic_attributes,
    swig_LogEntry_Sf_SwigStatic_constants,
    swig_LogEntry_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LogEntry_bases[] = {0};
static const char *swig_LogEntry_base_names[] = {0};
static swig_lua_class _wrap_class_LogEntry = { "LogEntry", "LogEntry", &SWIGTYPE_p_pj__LogEntry,_proxy__wrap_new_LogEntry, swig_delete_LogEntry, swig_LogEntry_methods, swig_LogEntry_attributes, &swig_LogEntry_Sf_SwigStatic, swig_LogEntry_meta, swig_LogEntry_bases, swig_LogEntry_base_names };

static int _wrap_LogWriter_write(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  SWIG_check_num_args("pj::LogWriter::write",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogWriter::write",1,"pj::LogWriter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::LogWriter::write",2,"pj::LogEntry const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogWriter,0))){
    SWIG_fail_ptr("LogWriter_write",1,SWIGTYPE_p_pj__LogWriter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("LogWriter_write",2,SWIGTYPE_p_pj__LogEntry);
  }
  
  (arg1)->write((pj::LogEntry const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogWriter(void *obj) {
pj::LogWriter *arg1 = (pj::LogWriter *) obj;
delete arg1;
}
static swig_lua_attribute swig_LogWriter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LogWriter_methods[]= {
    { "write", _wrap_LogWriter_write},
    {0,0}
};
static swig_lua_method swig_LogWriter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LogWriter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LogWriter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LogWriter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LogWriter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LogWriter_Sf_SwigStatic = {
    "LogWriter",
    swig_LogWriter_Sf_SwigStatic_methods,
    swig_LogWriter_Sf_SwigStatic_attributes,
    swig_LogWriter_Sf_SwigStatic_constants,
    swig_LogWriter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LogWriter_bases[] = {0};
static const char *swig_LogWriter_base_names[] = {0};
static swig_lua_class _wrap_class_LogWriter = { "LogWriter", "LogWriter", &SWIGTYPE_p_pj__LogWriter,0, swig_delete_LogWriter, swig_LogWriter_methods, swig_LogWriter_attributes, &swig_LogWriter_Sf_SwigStatic, swig_LogWriter_meta, swig_LogWriter_bases, swig_LogWriter_base_names };

static int _wrap_LogConfig_msgLogging_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::LogConfig::msgLogging",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::msgLogging",1,"pj::LogConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogConfig::msgLogging",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_msgLogging_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->msgLogging = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_msgLogging_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::LogConfig::msgLogging",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::msgLogging",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_msgLogging_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (unsigned int) ((arg1)->msgLogging);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_level_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::LogConfig::level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::level",1,"pj::LogConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogConfig::level",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_level_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_level_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::LogConfig::level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::level",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_level_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (unsigned int) ((arg1)->level);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_consoleLevel_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::LogConfig::consoleLevel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::consoleLevel",1,"pj::LogConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogConfig::consoleLevel",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_consoleLevel_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->consoleLevel = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_consoleLevel_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::LogConfig::consoleLevel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::consoleLevel",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_consoleLevel_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (unsigned int) ((arg1)->consoleLevel);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_decor_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::LogConfig::decor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::decor",1,"pj::LogConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogConfig::decor",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_decor_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->decor = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_decor_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::LogConfig::decor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::decor",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_decor_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (unsigned int) ((arg1)->decor);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_filename_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::LogConfig::filename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::filename",1,"pj::LogConfig *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::LogConfig::filename",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_filename_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->filename = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_filename_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *result = 0 ;
  
  SWIG_check_num_args("pj::LogConfig::filename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::filename",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_filename_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (pj::string *) & ((arg1)->filename);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_fileFlags_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::LogConfig::fileFlags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::fileFlags",1,"pj::LogConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::LogConfig::fileFlags",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_fileFlags_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->fileFlags = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_fileFlags_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::LogConfig::fileFlags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::fileFlags",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_fileFlags_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (unsigned int) ((arg1)->fileFlags);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_writer_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *arg2 = (pj::LogWriter *) 0 ;
  
  SWIG_check_num_args("pj::LogConfig::writer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::writer",1,"pj::LogConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::LogConfig::writer",2,"pj::LogWriter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_writer_set",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__LogWriter,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("LogConfig_writer_set",2,SWIGTYPE_p_pj__LogWriter);
  }
  
  if (arg1) (arg1)->writer = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_writer_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *result = 0 ;
  
  SWIG_check_num_args("pj::LogConfig::writer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::writer",1,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_writer_get",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  result = (pj::LogWriter *) ((arg1)->writer);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__LogWriter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LogConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *result = 0 ;
  
  SWIG_check_num_args("pj::LogConfig::LogConfig",0,0)
  result = (pj::LogConfig *)new pj::LogConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__LogConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::LogConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::readObject",1,"pj::LogConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::LogConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_readObject",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("LogConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::LogConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::LogConfig::writeObject",1,"pj::LogConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::LogConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("LogConfig_writeObject",1,SWIGTYPE_p_pj__LogConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("LogConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::LogConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LogConfig(void *obj) {
pj::LogConfig *arg1 = (pj::LogConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_LogConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LogConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LogConfig_attributes[] = {
    { "msgLogging", _wrap_LogConfig_msgLogging_get, _wrap_LogConfig_msgLogging_set },
    { "level", _wrap_LogConfig_level_get, _wrap_LogConfig_level_set },
    { "consoleLevel", _wrap_LogConfig_consoleLevel_get, _wrap_LogConfig_consoleLevel_set },
    { "decor", _wrap_LogConfig_decor_get, _wrap_LogConfig_decor_set },
    { "filename", _wrap_LogConfig_filename_get, _wrap_LogConfig_filename_set },
    { "fileFlags", _wrap_LogConfig_fileFlags_get, _wrap_LogConfig_fileFlags_set },
    { "writer", _wrap_LogConfig_writer_get, _wrap_LogConfig_writer_set },
    {0,0,0}
};
static swig_lua_method swig_LogConfig_methods[]= {
    { "readObject", _wrap_LogConfig_readObject},
    { "writeObject", _wrap_LogConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_LogConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LogConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LogConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LogConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LogConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LogConfig_Sf_SwigStatic = {
    "LogConfig",
    swig_LogConfig_Sf_SwigStatic_methods,
    swig_LogConfig_Sf_SwigStatic_attributes,
    swig_LogConfig_Sf_SwigStatic_constants,
    swig_LogConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LogConfig_bases[] = {0,0};
static const char *swig_LogConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_LogConfig = { "LogConfig", "LogConfig", &SWIGTYPE_p_pj__LogConfig,_proxy__wrap_new_LogConfig, swig_delete_LogConfig, swig_LogConfig_methods, swig_LogConfig_attributes, &swig_LogConfig_Sf_SwigStatic, swig_LogConfig_meta, swig_LogConfig_bases, swig_LogConfig_base_names };

static int _wrap_MediaConfig_clockRate_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::clockRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::clockRate",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::clockRate",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_clockRate_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->clockRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_clockRate_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::clockRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::clockRate",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_clockRate_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->clockRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndClockRate_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::sndClockRate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndClockRate",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::sndClockRate",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndClockRate_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sndClockRate = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndClockRate_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::sndClockRate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndClockRate",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndClockRate_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->sndClockRate);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_channelCount_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::channelCount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::channelCount",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::channelCount",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_channelCount_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->channelCount = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_channelCount_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::channelCount",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::channelCount",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_channelCount_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->channelCount);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_audioFramePtime_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::audioFramePtime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::audioFramePtime",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::audioFramePtime",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_audioFramePtime_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->audioFramePtime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_audioFramePtime_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::audioFramePtime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::audioFramePtime",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_audioFramePtime_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->audioFramePtime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_maxMediaPorts_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::maxMediaPorts",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::maxMediaPorts",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::maxMediaPorts",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_maxMediaPorts_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->maxMediaPorts = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_maxMediaPorts_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::maxMediaPorts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::maxMediaPorts",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_maxMediaPorts_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->maxMediaPorts);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_hasIoqueue_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::hasIoqueue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::hasIoqueue",1,"pj::MediaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::MediaConfig::hasIoqueue",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_hasIoqueue_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->hasIoqueue = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_hasIoqueue_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::MediaConfig::hasIoqueue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::hasIoqueue",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_hasIoqueue_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (bool) ((arg1)->hasIoqueue);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_threadCnt_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::threadCnt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::threadCnt",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::threadCnt",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_threadCnt_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->threadCnt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_threadCnt_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::threadCnt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::threadCnt",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_threadCnt_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->threadCnt);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_quality_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::quality",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::quality",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::quality",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_quality_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->quality = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_quality_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::quality",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::quality",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_quality_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->quality);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ptime_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::ptime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ptime",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::ptime",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ptime_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ptime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ptime_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::ptime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ptime",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ptime_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->ptime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_noVad_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::noVad",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::noVad",1,"pj::MediaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::MediaConfig::noVad",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_noVad_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->noVad = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_noVad_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::MediaConfig::noVad",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::noVad",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_noVad_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (bool) ((arg1)->noVad);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ilbcMode_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::ilbcMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ilbcMode",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::ilbcMode",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ilbcMode_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ilbcMode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ilbcMode_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::ilbcMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ilbcMode",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ilbcMode_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->ilbcMode);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_txDropPct_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::txDropPct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::txDropPct",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::txDropPct",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_txDropPct_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->txDropPct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_txDropPct_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::txDropPct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::txDropPct",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_txDropPct_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->txDropPct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_rxDropPct_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::rxDropPct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::rxDropPct",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::rxDropPct",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_rxDropPct_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->rxDropPct = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_rxDropPct_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::rxDropPct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::rxDropPct",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_rxDropPct_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->rxDropPct);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ecOptions_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::ecOptions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ecOptions",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::ecOptions",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ecOptions_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ecOptions = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ecOptions_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::ecOptions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ecOptions",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ecOptions_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->ecOptions);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ecTailLen_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::ecTailLen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ecTailLen",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::ecTailLen",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ecTailLen_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->ecTailLen = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_ecTailLen_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::ecTailLen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::ecTailLen",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_ecTailLen_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->ecTailLen);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndRecLatency_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::sndRecLatency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndRecLatency",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::sndRecLatency",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndRecLatency_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sndRecLatency = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndRecLatency_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::sndRecLatency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndRecLatency",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndRecLatency_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->sndRecLatency);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndPlayLatency_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::sndPlayLatency",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndPlayLatency",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::sndPlayLatency",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndPlayLatency_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sndPlayLatency = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndPlayLatency_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::MediaConfig::sndPlayLatency",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndPlayLatency",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndPlayLatency_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (unsigned int) ((arg1)->sndPlayLatency);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbInit_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::jbInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbInit",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::jbInit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbInit_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jbInit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbInit_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaConfig::jbInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbInit",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbInit_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (int) ((arg1)->jbInit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMinPre_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::jbMinPre",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMinPre",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::jbMinPre",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMinPre_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jbMinPre = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMinPre_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaConfig::jbMinPre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMinPre",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMinPre_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (int) ((arg1)->jbMinPre);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMaxPre_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::jbMaxPre",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMaxPre",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::jbMaxPre",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMaxPre_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jbMaxPre = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMaxPre_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaConfig::jbMaxPre",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMaxPre",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMaxPre_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (int) ((arg1)->jbMaxPre);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMax_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::jbMax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMax",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::jbMax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMax_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->jbMax = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_jbMax_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaConfig::jbMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::jbMax",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_jbMax_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (int) ((arg1)->jbMax);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndAutoCloseTime_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::sndAutoCloseTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndAutoCloseTime",1,"pj::MediaConfig *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::MediaConfig::sndAutoCloseTime",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndAutoCloseTime_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->sndAutoCloseTime = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_sndAutoCloseTime_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  SWIG_check_num_args("pj::MediaConfig::sndAutoCloseTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::sndAutoCloseTime",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_sndAutoCloseTime_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (int) ((arg1)->sndAutoCloseTime);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_vidPreviewEnableNative_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::MediaConfig::vidPreviewEnableNative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::vidPreviewEnableNative",1,"pj::MediaConfig *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::MediaConfig::vidPreviewEnableNative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_vidPreviewEnableNative_set",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->vidPreviewEnableNative = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_vidPreviewEnableNative_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::MediaConfig::vidPreviewEnableNative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::vidPreviewEnableNative",1,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_vidPreviewEnableNative_get",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  result = (bool) ((arg1)->vidPreviewEnableNative);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MediaConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::MediaConfig::MediaConfig",0,0)
  result = (pj::MediaConfig *)new pj::MediaConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::MediaConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::readObject",1,"pj::MediaConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::MediaConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_readObject",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("MediaConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MediaConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::MediaConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::MediaConfig::writeObject",1,"pj::MediaConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::MediaConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("MediaConfig_writeObject",1,SWIGTYPE_p_pj__MediaConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("MediaConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::MediaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MediaConfig(void *obj) {
pj::MediaConfig *arg1 = (pj::MediaConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_MediaConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MediaConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MediaConfig_attributes[] = {
    { "clockRate", _wrap_MediaConfig_clockRate_get, _wrap_MediaConfig_clockRate_set },
    { "sndClockRate", _wrap_MediaConfig_sndClockRate_get, _wrap_MediaConfig_sndClockRate_set },
    { "channelCount", _wrap_MediaConfig_channelCount_get, _wrap_MediaConfig_channelCount_set },
    { "audioFramePtime", _wrap_MediaConfig_audioFramePtime_get, _wrap_MediaConfig_audioFramePtime_set },
    { "maxMediaPorts", _wrap_MediaConfig_maxMediaPorts_get, _wrap_MediaConfig_maxMediaPorts_set },
    { "hasIoqueue", _wrap_MediaConfig_hasIoqueue_get, _wrap_MediaConfig_hasIoqueue_set },
    { "threadCnt", _wrap_MediaConfig_threadCnt_get, _wrap_MediaConfig_threadCnt_set },
    { "quality", _wrap_MediaConfig_quality_get, _wrap_MediaConfig_quality_set },
    { "ptime", _wrap_MediaConfig_ptime_get, _wrap_MediaConfig_ptime_set },
    { "noVad", _wrap_MediaConfig_noVad_get, _wrap_MediaConfig_noVad_set },
    { "ilbcMode", _wrap_MediaConfig_ilbcMode_get, _wrap_MediaConfig_ilbcMode_set },
    { "txDropPct", _wrap_MediaConfig_txDropPct_get, _wrap_MediaConfig_txDropPct_set },
    { "rxDropPct", _wrap_MediaConfig_rxDropPct_get, _wrap_MediaConfig_rxDropPct_set },
    { "ecOptions", _wrap_MediaConfig_ecOptions_get, _wrap_MediaConfig_ecOptions_set },
    { "ecTailLen", _wrap_MediaConfig_ecTailLen_get, _wrap_MediaConfig_ecTailLen_set },
    { "sndRecLatency", _wrap_MediaConfig_sndRecLatency_get, _wrap_MediaConfig_sndRecLatency_set },
    { "sndPlayLatency", _wrap_MediaConfig_sndPlayLatency_get, _wrap_MediaConfig_sndPlayLatency_set },
    { "jbInit", _wrap_MediaConfig_jbInit_get, _wrap_MediaConfig_jbInit_set },
    { "jbMinPre", _wrap_MediaConfig_jbMinPre_get, _wrap_MediaConfig_jbMinPre_set },
    { "jbMaxPre", _wrap_MediaConfig_jbMaxPre_get, _wrap_MediaConfig_jbMaxPre_set },
    { "jbMax", _wrap_MediaConfig_jbMax_get, _wrap_MediaConfig_jbMax_set },
    { "sndAutoCloseTime", _wrap_MediaConfig_sndAutoCloseTime_get, _wrap_MediaConfig_sndAutoCloseTime_set },
    { "vidPreviewEnableNative", _wrap_MediaConfig_vidPreviewEnableNative_get, _wrap_MediaConfig_vidPreviewEnableNative_set },
    {0,0,0}
};
static swig_lua_method swig_MediaConfig_methods[]= {
    { "readObject", _wrap_MediaConfig_readObject},
    { "writeObject", _wrap_MediaConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_MediaConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MediaConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MediaConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MediaConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MediaConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MediaConfig_Sf_SwigStatic = {
    "MediaConfig",
    swig_MediaConfig_Sf_SwigStatic_methods,
    swig_MediaConfig_Sf_SwigStatic_attributes,
    swig_MediaConfig_Sf_SwigStatic_constants,
    swig_MediaConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MediaConfig_bases[] = {0,0};
static const char *swig_MediaConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_MediaConfig = { "MediaConfig", "MediaConfig", &SWIGTYPE_p_pj__MediaConfig,_proxy__wrap_new_MediaConfig, swig_delete_MediaConfig, swig_MediaConfig_methods, swig_MediaConfig_attributes, &swig_MediaConfig_Sf_SwigStatic, swig_MediaConfig_meta, swig_MediaConfig_bases, swig_MediaConfig_base_names };

static int _wrap_EpConfig_uaConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *arg2 = (pj::UaConfig *) 0 ;
  
  SWIG_check_num_args("pj::EpConfig::uaConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::uaConfig",1,"pj::EpConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::EpConfig::uaConfig",2,"pj::UaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_uaConfig_set",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__UaConfig,0))){
    SWIG_fail_ptr("EpConfig_uaConfig_set",2,SWIGTYPE_p_pj__UaConfig);
  }
  
  if (arg1) (arg1)->uaConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_uaConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::uaConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::uaConfig",1,"pj::EpConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_uaConfig_get",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  result = (pj::UaConfig *)& ((arg1)->uaConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__UaConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_logConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *arg2 = (pj::LogConfig *) 0 ;
  
  SWIG_check_num_args("pj::EpConfig::logConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::logConfig",1,"pj::EpConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::EpConfig::logConfig",2,"pj::LogConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_logConfig_set",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__LogConfig,0))){
    SWIG_fail_ptr("EpConfig_logConfig_set",2,SWIGTYPE_p_pj__LogConfig);
  }
  
  if (arg1) (arg1)->logConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_logConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *result = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::logConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::logConfig",1,"pj::EpConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_logConfig_get",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  result = (pj::LogConfig *)& ((arg1)->logConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__LogConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_medConfig_set(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *arg2 = (pj::MediaConfig *) 0 ;
  
  SWIG_check_num_args("pj::EpConfig::medConfig",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::medConfig",1,"pj::EpConfig *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::EpConfig::medConfig",2,"pj::MediaConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_medConfig_set",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__MediaConfig,0))){
    SWIG_fail_ptr("EpConfig_medConfig_set",2,SWIGTYPE_p_pj__MediaConfig);
  }
  
  if (arg1) (arg1)->medConfig = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_medConfig_get(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *result = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::medConfig",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::medConfig",1,"pj::EpConfig *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_medConfig_get",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  result = (pj::MediaConfig *)& ((arg1)->medConfig);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__MediaConfig,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_readObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::readObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::readObject",1,"pj::EpConfig *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::EpConfig::readObject",2,"pj::ContainerNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_readObject",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("EpConfig_readObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EpConfig_writeObject(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::writeObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::EpConfig::writeObject",1,"pj::EpConfig const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::EpConfig::writeObject",2,"pj::ContainerNode &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("EpConfig_writeObject",1,SWIGTYPE_p_pj__EpConfig);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__ContainerNode,0))){
    SWIG_fail_ptr("EpConfig_writeObject",2,SWIGTYPE_p_pj__ContainerNode);
  }
  
  try {
    ((pj::EpConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EpConfig(lua_State* L) {
  int SWIG_arg = 0;
  pj::EpConfig *result = 0 ;
  
  SWIG_check_num_args("pj::EpConfig::EpConfig",0,0)
  result = (pj::EpConfig *)new pj::EpConfig();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__EpConfig,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EpConfig(void *obj) {
pj::EpConfig *arg1 = (pj::EpConfig *) obj;
delete arg1;
}
static int _proxy__wrap_new_EpConfig(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EpConfig);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EpConfig_attributes[] = {
    { "uaConfig", _wrap_EpConfig_uaConfig_get, _wrap_EpConfig_uaConfig_set },
    { "logConfig", _wrap_EpConfig_logConfig_get, _wrap_EpConfig_logConfig_set },
    { "medConfig", _wrap_EpConfig_medConfig_get, _wrap_EpConfig_medConfig_set },
    {0,0,0}
};
static swig_lua_method swig_EpConfig_methods[]= {
    { "readObject", _wrap_EpConfig_readObject},
    { "writeObject", _wrap_EpConfig_writeObject},
    {0,0}
};
static swig_lua_method swig_EpConfig_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EpConfig_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EpConfig_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EpConfig_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EpConfig_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EpConfig_Sf_SwigStatic = {
    "EpConfig",
    swig_EpConfig_Sf_SwigStatic_methods,
    swig_EpConfig_Sf_SwigStatic_attributes,
    swig_EpConfig_Sf_SwigStatic_constants,
    swig_EpConfig_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EpConfig_bases[] = {0,0};
static const char *swig_EpConfig_base_names[] = {"pj::PersistentObject *",0};
static swig_lua_class _wrap_class_EpConfig = { "EpConfig", "EpConfig", &SWIGTYPE_p_pj__EpConfig,_proxy__wrap_new_EpConfig, swig_delete_EpConfig, swig_EpConfig_methods, swig_EpConfig_attributes, &swig_EpConfig_Sf_SwigStatic, swig_EpConfig_meta, swig_EpConfig_bases, swig_EpConfig_base_names };

static int _wrap_PendingJob_execute(lua_State* L) {
  int SWIG_arg = 0;
  pj::PendingJob *arg1 = (pj::PendingJob *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pj::PendingJob::execute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::PendingJob::execute",1,"pj::PendingJob *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pj::PendingJob::execute",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__PendingJob,0))){
    SWIG_fail_ptr("PendingJob_execute",1,SWIGTYPE_p_pj__PendingJob);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->execute(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PendingJob(void *obj) {
pj::PendingJob *arg1 = (pj::PendingJob *) obj;
delete arg1;
}
static swig_lua_attribute swig_PendingJob_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_PendingJob_methods[]= {
    { "execute", _wrap_PendingJob_execute},
    {0,0}
};
static swig_lua_method swig_PendingJob_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_PendingJob_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_PendingJob_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_PendingJob_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_PendingJob_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_PendingJob_Sf_SwigStatic = {
    "PendingJob",
    swig_PendingJob_Sf_SwigStatic_methods,
    swig_PendingJob_Sf_SwigStatic_attributes,
    swig_PendingJob_Sf_SwigStatic_constants,
    swig_PendingJob_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_PendingJob_bases[] = {0};
static const char *swig_PendingJob_base_names[] = {0};
static swig_lua_class _wrap_class_PendingJob = { "PendingJob", "PendingJob", &SWIGTYPE_p_pj__PendingJob,0, swig_delete_PendingJob, swig_PendingJob_methods, swig_PendingJob_attributes, &swig_PendingJob_Sf_SwigStatic, swig_PendingJob_meta, swig_PendingJob_bases, swig_PendingJob_base_names };

static int _wrap_Endpoint_instance(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *result = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::instance",0,0)
  try {
    result = (pj::Endpoint *) &pj::Endpoint::instance();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Endpoint,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Endpoint(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *result = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::Endpoint",0,0)
  result = (pj::Endpoint *)new pj::Endpoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__Endpoint,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libVersion(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Version result;
  
  SWIG_check_num_args("pj::Endpoint::libVersion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libVersion",1,"pj::Endpoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libVersion",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = ((pj::Endpoint const *)arg1)->libVersion();
  {
    pj::Version * resultptr = new pj::Version((const pj::Version &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__Version,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libCreate(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::libCreate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libCreate",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libCreate",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    (arg1)->libCreate();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libGetState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsua_state result;
  
  SWIG_check_num_args("pj::Endpoint::libGetState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libGetState",1,"pj::Endpoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libGetState",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = (pjsua_state)((pj::Endpoint const *)arg1)->libGetState();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libInit(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::EpConfig *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::libInit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libInit",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::libInit",2,"pj::EpConfig const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libInit",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__EpConfig,0))){
    SWIG_fail_ptr("Endpoint_libInit",2,SWIGTYPE_p_pj__EpConfig);
  }
  
  try {
    (arg1)->libInit((pj::EpConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libStart(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::libStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libStart",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libStart",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    (arg1)->libStart();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libRegisterThread(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Endpoint::libRegisterThread",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libRegisterThread",1,"pj::Endpoint *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::libRegisterThread",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libRegisterThread",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    (arg1)->libRegisterThread((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libIsThreadRegistered(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Endpoint::libIsThreadRegistered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libIsThreadRegistered",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libIsThreadRegistered",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = (bool)(arg1)->libIsThreadRegistered();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libStopWorkerThreads(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::libStopWorkerThreads",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libStopWorkerThreads",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libStopWorkerThreads",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  (arg1)->libStopWorkerThreads();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libHandleEvents(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  int result;
  
  SWIG_check_num_args("pj::Endpoint::libHandleEvents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libHandleEvents",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::libHandleEvents",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libHandleEvents",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (int)(arg1)->libHandleEvents(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libDestroy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  
  SWIG_check_num_args("pj::Endpoint::libDestroy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libDestroy",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::libDestroy",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libDestroy",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    (arg1)->libDestroy(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libDestroy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::libDestroy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::libDestroy",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_libDestroy",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    (arg1)->libDestroy();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_libDestroy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Endpoint_libDestroy__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Endpoint_libDestroy__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Endpoint_libDestroy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Endpoint::libDestroy(unsigned int)\n"
    "    pj::Endpoint::libDestroy()\n");
  lua_error(L);return 0;
}


static int _wrap_Endpoint_utilStrError(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_status_t arg2 ;
  pj::string result;
  
  SWIG_check_num_args("pj::Endpoint::utilStrError",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilStrError",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::utilStrError",2,"pj_status_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilStrError",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (pj_status_t)lua_tonumber(L, 2);
  result = (arg1)->utilStrError(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilLogWrite__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  pj::string temp3 ;
  pj::string temp4 ;
  
  SWIG_check_num_args("pj::Endpoint::utilLogWrite",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",3,"pj::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",4,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilLogWrite",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  (arg1)->utilLogWrite(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilLogWrite__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::utilLogWrite",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::utilLogWrite",2,"pj::LogEntry &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilLogWrite",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__LogEntry,0))){
    SWIG_fail_ptr("Endpoint_utilLogWrite",2,SWIGTYPE_p_pj__LogEntry);
  }
  
  (arg1)->utilLogWrite(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilLogWrite(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_pj__LogEntry, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Endpoint_utilLogWrite__SWIG_1(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Endpoint_utilLogWrite__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Endpoint_utilLogWrite'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Endpoint::utilLogWrite(int,pj::string const &,pj::string const &)\n"
    "    pj::Endpoint::utilLogWrite(pj::LogEntry &)\n");
  lua_error(L);return 0;
}


static int _wrap_Endpoint_utilVerifySipUri(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::Endpoint::utilVerifySipUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilVerifySipUri",1,"pj::Endpoint *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::utilVerifySipUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilVerifySipUri",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (pj_status_t)(arg1)->utilVerifySipUri((pj::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilVerifyUri(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj_status_t result;
  
  SWIG_check_num_args("pj::Endpoint::utilVerifyUri",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilVerifyUri",1,"pj::Endpoint *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::utilVerifyUri",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilVerifyUri",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (pj_status_t)(arg1)->utilVerifyUri((pj::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilTimerSchedule(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  pj::Token arg3 = (pj::Token) 0 ;
  pj::Token result;
  
  SWIG_check_num_args("pj::Endpoint::utilTimerSchedule",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilTimerSchedule",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::utilTimerSchedule",2,"unsigned int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("pj::Endpoint::utilTimerSchedule",3,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilTimerSchedule",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3=(pj::Token)SWIG_MustGetPtr(L,3,0,0,3,"Endpoint_utilTimerSchedule");
  try {
    result = (pj::Token)(arg1)->utilTimerSchedule(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilTimerCancel(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::utilTimerCancel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilTimerCancel",1,"pj::Endpoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Endpoint::utilTimerCancel",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilTimerCancel",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"Endpoint_utilTimerCancel");
  (arg1)->utilTimerCancel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilAddPendingJob(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::PendingJob *arg2 = (pj::PendingJob *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::utilAddPendingJob",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilAddPendingJob",1,"pj::Endpoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Endpoint::utilAddPendingJob",2,"pj::PendingJob *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilAddPendingJob",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__PendingJob,0))){
    SWIG_fail_ptr("Endpoint_utilAddPendingJob",2,SWIGTYPE_p_pj__PendingJob);
  }
  
  (arg1)->utilAddPendingJob(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_utilSslGetAvailableCiphers(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  SWIG_check_num_args("pj::Endpoint::utilSslGetAvailableCiphers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::utilSslGetAvailableCiphers",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_utilSslGetAvailableCiphers",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    result = (arg1)->utilSslGetAvailableCiphers();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::IntVector * resultptr = new pj::IntVector((const pj::IntVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natDetectType(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::natDetectType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::natDetectType",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_natDetectType",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    (arg1)->natDetectType();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natGetType(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_stun_nat_type result;
  
  SWIG_check_num_args("pj::Endpoint::natGetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::natGetType",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_natGetType",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    result = (pj_stun_nat_type)(arg1)->natGetType();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natCheckStunServers(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  pj::Token arg4 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::natCheckStunServers",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::natCheckStunServers",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::natCheckStunServers",2,"pj::StringVector const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::Endpoint::natCheckStunServers",3,"bool");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("pj::Endpoint::natCheckStunServers",4,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_natCheckStunServers",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("Endpoint_natCheckStunServers",2,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4=(pj::Token)SWIG_MustGetPtr(L,4,0,0,4,"Endpoint_natCheckStunServers");
  try {
    (arg1)->natCheckStunServers((pj::StringVector const &)*arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natCancelCheckStunServers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::Endpoint::natCancelCheckStunServers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::natCancelCheckStunServers",1,"pj::Endpoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Endpoint::natCancelCheckStunServers",2,"pj::Token");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::Endpoint::natCancelCheckStunServers",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_natCancelCheckStunServers",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"Endpoint_natCancelCheckStunServers");
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->natCancelCheckStunServers(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natCancelCheckStunServers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::natCancelCheckStunServers",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::natCancelCheckStunServers",1,"pj::Endpoint *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("pj::Endpoint::natCancelCheckStunServers",2,"pj::Token");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_natCancelCheckStunServers",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2=(pj::Token)SWIG_MustGetPtr(L,2,0,0,2,"Endpoint_natCancelCheckStunServers");
  try {
    (arg1)->natCancelCheckStunServers(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_natCancelCheckStunServers(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Endpoint_natCancelCheckStunServers__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_pj__Endpoint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Endpoint_natCancelCheckStunServers__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Endpoint_natCancelCheckStunServers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    pj::Endpoint::natCancelCheckStunServers(pj::Token,bool)\n"
    "    pj::Endpoint::natCancelCheckStunServers(pj::Token)\n");
  lua_error(L);return 0;
}


static int _wrap_Endpoint_transportCreate(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsip_transport_type_e arg2 ;
  pj::TransportConfig *arg3 = 0 ;
  pj::TransportId result;
  
  SWIG_check_num_args("pj::Endpoint::transportCreate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::transportCreate",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::transportCreate",2,"pjsip_transport_type_e");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("pj::Endpoint::transportCreate",3,"pj::TransportConfig const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_transportCreate",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (pjsip_transport_type_e)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_pj__TransportConfig,0))){
    SWIG_fail_ptr("Endpoint_transportCreate",3,SWIGTYPE_p_pj__TransportConfig);
  }
  
  try {
    result = (pj::TransportId)(arg1)->transportCreate(arg2,(pj::TransportConfig const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_transportEnum(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  SWIG_check_num_args("pj::Endpoint::transportEnum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::transportEnum",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_transportEnum",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    result = (arg1)->transportEnum();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::IntVector * resultptr = new pj::IntVector((const pj::IntVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_transportGetInfo(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  pj::TransportInfo result;
  
  SWIG_check_num_args("pj::Endpoint::transportGetInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::transportGetInfo",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::transportGetInfo",2,"pj::TransportId");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_transportGetInfo",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  try {
    result = (arg1)->transportGetInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  {
    pj::TransportInfo * resultptr = new pj::TransportInfo((const pj::TransportInfo &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_pj__TransportInfo,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_transportSetEnable(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("pj::Endpoint::transportSetEnable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::transportSetEnable",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::transportSetEnable",2,"pj::TransportId");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("pj::Endpoint::transportSetEnable",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_transportSetEnable",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  try {
    (arg1)->transportSetEnable(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_transportClose(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  
  SWIG_check_num_args("pj::Endpoint::transportClose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::transportClose",1,"pj::Endpoint *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("pj::Endpoint::transportClose",2,"pj::TransportId");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_transportClose",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  arg2 = (pj::TransportId)lua_tonumber(L, 2);
  try {
    (arg1)->transportClose(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_hangupAllCalls(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  SWIG_check_num_args("pj::Endpoint::hangupAllCalls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::hangupAllCalls",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_hangupAllCalls",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  (arg1)->hangupAllCalls();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaAdd(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::mediaAdd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaAdd",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::mediaAdd",2,"pj::AudioMedia &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaAdd",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("Endpoint_mediaAdd",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  (arg1)->mediaAdd(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaRemove(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::mediaRemove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaRemove",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::mediaRemove",2,"pj::AudioMedia &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaRemove",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("Endpoint_mediaRemove",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  (arg1)->mediaRemove(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaExists(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("pj::Endpoint::mediaExists",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaExists",1,"pj::Endpoint const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::mediaExists",2,"pj::AudioMedia const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaExists",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__AudioMedia,0))){
    SWIG_fail_ptr("Endpoint_mediaExists",2,SWIGTYPE_p_pj__AudioMedia);
  }
  
  result = (bool)((pj::Endpoint const *)arg1)->mediaExists((pj::AudioMedia const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaMaxPorts(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::Endpoint::mediaMaxPorts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaMaxPorts",1,"pj::Endpoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaMaxPorts",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaMaxPorts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaActivePorts(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("pj::Endpoint::mediaActivePorts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaActivePorts",1,"pj::Endpoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaActivePorts",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaActivePorts();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_mediaEnumPorts(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMediaVector *result = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::mediaEnumPorts",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::mediaEnumPorts",1,"pj::Endpoint const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_mediaEnumPorts",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    result = (pj::AudioMediaVector *) &((pj::Endpoint const *)arg1)->mediaEnumPorts();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__AudioMedia_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_audDevManager(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudDevManager *result = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::audDevManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::audDevManager",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_audDevManager",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  result = (pj::AudDevManager *) &(arg1)->audDevManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_pj__AudDevManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_codecEnum(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector *result = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::codecEnum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::codecEnum",1,"pj::Endpoint *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_codecEnum",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  try {
    result = (pj::CodecInfoVector *) &(arg1)->codecEnum();
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_pj__CodecInfo_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_codecSetPriority(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Endpoint::codecSetPriority",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::codecSetPriority",1,"pj::Endpoint *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::codecSetPriority",2,"pj::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("pj::Endpoint::codecSetPriority",3,"pj_uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_codecSetPriority",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (pj_uint8_t)lua_tonumber(L, 3);
  try {
    (arg1)->codecSetPriority((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_codecGetParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string temp2 ;
  pj::CodecParam result;
  
  SWIG_check_num_args("pj::Endpoint::codecGetParam",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::codecGetParam",1,"pj::Endpoint const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::codecGetParam",2,"pj::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_codecGetParam",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  try {
    result = (pj::CodecParam)((pj::Endpoint const *)arg1)->codecGetParam((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_codecSetParam(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam arg3 = (pj::CodecParam) (pj::CodecParam)0 ;
  pj::string temp2 ;
  
  SWIG_check_num_args("pj::Endpoint::codecSetParam",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::codecSetParam",1,"pj::Endpoint *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("pj::Endpoint::codecSetParam",2,"pj::string const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("pj::Endpoint::codecSetParam",3,"pj::CodecParam const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_codecSetParam",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3=(pj::CodecParam)SWIG_MustGetPtr(L,3,0,0,3,"Endpoint_codecSetParam");
  try {
    (arg1)->codecSetParam((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e; /* ignore it */
    lua_pushfstring(L,"object exception:%s",SWIG_TypePrettyName(SWIGTYPE_pj__Error));
    SWIG_fail;
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_onNatDetectionComplete(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::onNatDetectionComplete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::onNatDetectionComplete",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::onNatDetectionComplete",2,"pj::OnNatDetectionCompleteParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_onNatDetectionComplete",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnNatDetectionCompleteParam,0))){
    SWIG_fail_ptr("Endpoint_onNatDetectionComplete",2,SWIGTYPE_p_pj__OnNatDetectionCompleteParam);
  }
  
  (arg1)->onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_onNatCheckStunServersComplete(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::onNatCheckStunServersComplete",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::onNatCheckStunServersComplete",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::onNatCheckStunServersComplete",2,"pj::OnNatCheckStunServersCompleteParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_onNatCheckStunServersComplete",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam,0))){
    SWIG_fail_ptr("Endpoint_onNatCheckStunServersComplete",2,SWIGTYPE_p_pj__OnNatCheckStunServersCompleteParam);
  }
  
  (arg1)->onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_onTransportState(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::onTransportState",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::onTransportState",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::onTransportState",2,"pj::OnTransportStateParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_onTransportState",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnTransportStateParam,0))){
    SWIG_fail_ptr("Endpoint_onTransportState",2,SWIGTYPE_p_pj__OnTransportStateParam);
  }
  
  (arg1)->onTransportState((pj::OnTransportStateParam const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_onTimer(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::onTimer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::onTimer",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::onTimer",2,"pj::OnTimerParam const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_onTimer",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnTimerParam,0))){
    SWIG_fail_ptr("Endpoint_onTimer",2,SWIGTYPE_p_pj__OnTimerParam);
  }
  
  (arg1)->onTimer((pj::OnTimerParam const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Endpoint_onSelectAccount(lua_State* L) {
  int SWIG_arg = 0;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  SWIG_check_num_args("pj::Endpoint::onSelectAccount",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pj::Endpoint::onSelectAccount",1,"pj::Endpoint *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("pj::Endpoint::onSelectAccount",2,"pj::OnSelectAccountParam &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_pj__Endpoint,0))){
    SWIG_fail_ptr("Endpoint_onSelectAccount",1,SWIGTYPE_p_pj__Endpoint);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_pj__OnSelectAccountParam,0))){
    SWIG_fail_ptr("Endpoint_onSelectAccount",2,SWIGTYPE_p_pj__OnSelectAccountParam);
  }
  
  (arg1)->onSelectAccount(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Endpoint(void *obj) {
pj::Endpoint *arg1 = (pj::Endpoint *) obj;
delete arg1;
}
static int _proxy__wrap_new_Endpoint(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Endpoint);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Endpoint_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Endpoint_methods[]= {
    { "libVersion", _wrap_Endpoint_libVersion},
    { "libCreate", _wrap_Endpoint_libCreate},
    { "libGetState", _wrap_Endpoint_libGetState},
    { "libInit", _wrap_Endpoint_libInit},
    { "libStart", _wrap_Endpoint_libStart},
    { "libRegisterThread", _wrap_Endpoint_libRegisterThread},
    { "libIsThreadRegistered", _wrap_Endpoint_libIsThreadRegistered},
    { "libStopWorkerThreads", _wrap_Endpoint_libStopWorkerThreads},
    { "libHandleEvents", _wrap_Endpoint_libHandleEvents},
    { "libDestroy", _wrap_Endpoint_libDestroy},
    { "utilStrError", _wrap_Endpoint_utilStrError},
    { "utilLogWrite", _wrap_Endpoint_utilLogWrite},
    { "utilVerifySipUri", _wrap_Endpoint_utilVerifySipUri},
    { "utilVerifyUri", _wrap_Endpoint_utilVerifyUri},
    { "utilTimerSchedule", _wrap_Endpoint_utilTimerSchedule},
    { "utilTimerCancel", _wrap_Endpoint_utilTimerCancel},
    { "utilAddPendingJob", _wrap_Endpoint_utilAddPendingJob},
    { "utilSslGetAvailableCiphers", _wrap_Endpoint_utilSslGetAvailableCiphers},
    { "natDetectType", _wrap_Endpoint_natDetectType},
    { "natGetType", _wrap_Endpoint_natGetType},
    { "natCheckStunServers", _wrap_Endpoint_natCheckStunServers},
    { "natCancelCheckStunServers", _wrap_Endpoint_natCancelCheckStunServers},
    { "transportCreate", _wrap_Endpoint_transportCreate},
    { "transportEnum", _wrap_Endpoint_transportEnum},
    { "transportGetInfo", _wrap_Endpoint_transportGetInfo},
    { "transportSetEnable", _wrap_Endpoint_transportSetEnable},
    { "transportClose", _wrap_Endpoint_transportClose},
    { "hangupAllCalls", _wrap_Endpoint_hangupAllCalls},
    { "mediaAdd", _wrap_Endpoint_mediaAdd},
    { "mediaRemove", _wrap_Endpoint_mediaRemove},
    { "mediaExists", _wrap_Endpoint_mediaExists},
    { "mediaMaxPorts", _wrap_Endpoint_mediaMaxPorts},
    { "mediaActivePorts", _wrap_Endpoint_mediaActivePorts},
    { "mediaEnumPorts", _wrap_Endpoint_mediaEnumPorts},
    { "audDevManager", _wrap_Endpoint_audDevManager},
    { "codecEnum", _wrap_Endpoint_codecEnum},
    { "codecSetPriority", _wrap_Endpoint_codecSetPriority},
    { "codecGetParam", _wrap_Endpoint_codecGetParam},
    { "codecSetParam", _wrap_Endpoint_codecSetParam},
    { "onNatDetectionComplete", _wrap_Endpoint_onNatDetectionComplete},
    { "onNatCheckStunServersComplete", _wrap_Endpoint_onNatCheckStunServersComplete},
    { "onTransportState", _wrap_Endpoint_onTransportState},
    { "onTimer", _wrap_Endpoint_onTimer},
    { "onSelectAccount", _wrap_Endpoint_onSelectAccount},
    {0,0}
};
static swig_lua_method swig_Endpoint_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Endpoint_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Endpoint_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Endpoint_Sf_SwigStatic_methods[]= {
    { "instance", _wrap_Endpoint_instance},
    {0,0}
};
static swig_lua_class* swig_Endpoint_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Endpoint_Sf_SwigStatic = {
    "Endpoint",
    swig_Endpoint_Sf_SwigStatic_methods,
    swig_Endpoint_Sf_SwigStatic_attributes,
    swig_Endpoint_Sf_SwigStatic_constants,
    swig_Endpoint_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Endpoint_bases[] = {0};
static const char *swig_Endpoint_base_names[] = {0};
static swig_lua_class _wrap_class_Endpoint = { "Endpoint", "Endpoint", &SWIGTYPE_p_pj__Endpoint,_proxy__wrap_new_Endpoint, swig_delete_Endpoint, swig_Endpoint_methods, swig_Endpoint_attributes, &swig_Endpoint_Sf_SwigStatic, swig_Endpoint_meta, swig_Endpoint_bases, swig_Endpoint_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("PJ_SUCCESS", PJ_SUCCESS)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TRUE", PJ_TRUE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_FALSE", PJ_FALSE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_O_RDONLY", PJ_O_RDONLY)},
    {SWIG_LUA_CONSTTAB_INT("PJ_O_WRONLY", PJ_O_WRONLY)},
    {SWIG_LUA_CONSTTAB_INT("PJ_O_RDWR", PJ_O_RDWR)},
    {SWIG_LUA_CONSTTAB_INT("PJ_O_APPEND", PJ_O_APPEND)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_DAY_NAME", PJ_LOG_HAS_DAY_NAME)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_YEAR", PJ_LOG_HAS_YEAR)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_MONTH", PJ_LOG_HAS_MONTH)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_DAY_OF_MON", PJ_LOG_HAS_DAY_OF_MON)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_TIME", PJ_LOG_HAS_TIME)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_MICRO_SEC", PJ_LOG_HAS_MICRO_SEC)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_SENDER", PJ_LOG_HAS_SENDER)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_NEWLINE", PJ_LOG_HAS_NEWLINE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_CR", PJ_LOG_HAS_CR)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_SPACE", PJ_LOG_HAS_SPACE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_COLOR", PJ_LOG_HAS_COLOR)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_LEVEL_TEXT", PJ_LOG_HAS_LEVEL_TEXT)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_THREAD_ID", PJ_LOG_HAS_THREAD_ID)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_THREAD_SWC", PJ_LOG_HAS_THREAD_SWC)},
    {SWIG_LUA_CONSTTAB_INT("PJ_LOG_HAS_INDENT", PJ_LOG_HAS_INDENT)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_TYPE_BEST_EFFORT", PJ_QOS_TYPE_BEST_EFFORT)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_TYPE_BACKGROUND", PJ_QOS_TYPE_BACKGROUND)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_TYPE_VIDEO", PJ_QOS_TYPE_VIDEO)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_TYPE_VOICE", PJ_QOS_TYPE_VOICE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_TYPE_CONTROL", PJ_QOS_TYPE_CONTROL)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_PARAM_HAS_DSCP", PJ_QOS_PARAM_HAS_DSCP)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_PARAM_HAS_SO_PRIO", PJ_QOS_PARAM_HAS_SO_PRIO)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_PARAM_HAS_WMM", PJ_QOS_PARAM_HAS_WMM)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_WMM_PRIO_BULK_EFFORT", PJ_QOS_WMM_PRIO_BULK_EFFORT)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_WMM_PRIO_BULK", PJ_QOS_WMM_PRIO_BULK)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_WMM_PRIO_VIDEO", PJ_QOS_WMM_PRIO_VIDEO)},
    {SWIG_LUA_CONSTTAB_INT("PJ_QOS_WMM_PRIO_VOICE", PJ_QOS_WMM_PRIO_VOICE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_UNKNOWN_CIPHER", PJ_TLS_UNKNOWN_CIPHER)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_NULL_WITH_NULL_NULL", PJ_TLS_NULL_WITH_NULL_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_NULL_MD5", PJ_TLS_RSA_WITH_NULL_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_NULL_SHA", PJ_TLS_RSA_WITH_NULL_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_NULL_SHA256", PJ_TLS_RSA_WITH_NULL_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_RC4_128_MD5", PJ_TLS_RSA_WITH_RC4_128_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_RC4_128_SHA", PJ_TLS_RSA_WITH_RC4_128_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA", PJ_TLS_RSA_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_AES_128_CBC_SHA", PJ_TLS_RSA_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_AES_256_CBC_SHA", PJ_TLS_RSA_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_AES_128_CBC_SHA256", PJ_TLS_RSA_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_AES_256_CBC_SHA256", PJ_TLS_RSA_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA", PJ_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA", PJ_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA", PJ_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA", PJ_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA", PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA", PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA", PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA", PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA", PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA", PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA", PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA", PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256", PJ_TLS_DH_DSS_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256", PJ_TLS_DH_RSA_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", PJ_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", PJ_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256", PJ_TLS_DH_DSS_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256", PJ_TLS_DH_RSA_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", PJ_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", PJ_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_RC4_128_MD5", PJ_TLS_DH_anon_WITH_RC4_128_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA", PJ_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA", PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA", PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256", PJ_TLS_DH_anon_WITH_AES_128_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256", PJ_TLS_DH_anon_WITH_AES_256_CBC_SHA256)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5", PJ_TLS_RSA_EXPORT_WITH_RC4_40_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5", PJ_TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_IDEA_CBC_SHA", PJ_TLS_RSA_WITH_IDEA_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_RSA_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_RSA_WITH_DES_CBC_SHA", PJ_TLS_RSA_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_DSS_WITH_DES_CBC_SHA", PJ_TLS_DH_DSS_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_RSA_WITH_DES_CBC_SHA", PJ_TLS_DH_RSA_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA", PJ_TLS_DHE_DSS_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA", PJ_TLS_DHE_RSA_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5", PJ_TLS_DH_anon_EXPORT_WITH_RC4_40_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA", PJ_TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TLS_DH_anon_WITH_DES_CBC_SHA", PJ_TLS_DH_anon_WITH_DES_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA", PJ_SSL_FORTEZZA_KEA_WITH_NULL_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA", PJ_SSL_FORTEZZA_KEA_WITH_FORTEZZA_CBC_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA", PJ_SSL_FORTEZZA_KEA_WITH_RC4_128_SHA)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_RC4_128_WITH_MD5", PJ_SSL_CK_RC4_128_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5", PJ_SSL_CK_RC4_128_EXPORT40_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_RC2_128_CBC_WITH_MD5", PJ_SSL_CK_RC2_128_CBC_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5", PJ_SSL_CK_RC2_128_CBC_EXPORT40_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_IDEA_128_CBC_WITH_MD5", PJ_SSL_CK_IDEA_128_CBC_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_DES_64_CBC_WITH_MD5", PJ_SSL_CK_DES_64_CBC_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5", PJ_SSL_CK_DES_192_EDE3_CBC_WITH_MD5)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_UNKNOWN", PJ_STUN_NAT_TYPE_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_ERR_UNKNOWN", PJ_STUN_NAT_TYPE_ERR_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_OPEN", PJ_STUN_NAT_TYPE_OPEN)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_BLOCKED", PJ_STUN_NAT_TYPE_BLOCKED)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_SYMMETRIC_UDP", PJ_STUN_NAT_TYPE_SYMMETRIC_UDP)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_FULL_CONE", PJ_STUN_NAT_TYPE_FULL_CONE)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_SYMMETRIC", PJ_STUN_NAT_TYPE_SYMMETRIC)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_RESTRICTED", PJ_STUN_NAT_TYPE_RESTRICTED)},
    {SWIG_LUA_CONSTTAB_INT("PJ_STUN_NAT_TYPE_PORT_RESTRICTED", PJ_STUN_NAT_TYPE_PORT_RESTRICTED)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TURN_TP_UDP", PJ_TURN_TP_UDP)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TURN_TP_TCP", PJ_TURN_TP_TCP)},
    {SWIG_LUA_CONSTTAB_INT("PJ_TURN_TP_TLS", PJ_TURN_TP_TLS)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_NONE", PJMEDIA_EVENT_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_FMT_CHANGED", PJMEDIA_EVENT_FMT_CHANGED)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_WND_CLOSING", PJMEDIA_EVENT_WND_CLOSING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_WND_CLOSED", PJMEDIA_EVENT_WND_CLOSED)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_WND_RESIZED", PJMEDIA_EVENT_WND_RESIZED)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_MOUSE_BTN_DOWN", PJMEDIA_EVENT_MOUSE_BTN_DOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_KEYFRAME_FOUND", PJMEDIA_EVENT_KEYFRAME_FOUND)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_KEYFRAME_MISSING", PJMEDIA_EVENT_KEYFRAME_MISSING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_EVENT_ORIENT_CHANGED", PJMEDIA_EVENT_ORIENT_CHANGED)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_SRTP_DISABLED", PJMEDIA_SRTP_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_SRTP_OPTIONAL", PJMEDIA_SRTP_OPTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_SRTP_MANDATORY", PJMEDIA_SRTP_MANDATORY)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_VID_STREAM_RC_NONE", PJMEDIA_VID_STREAM_RC_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING", PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_VID_DEFAULT_CAPTURE_DEV", PJMEDIA_VID_DEFAULT_CAPTURE_DEV)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_VID_DEFAULT_RENDER_DEV", PJMEDIA_VID_DEFAULT_RENDER_DEV)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_VID_INVALID_DEV", PJMEDIA_VID_INVALID_DEV)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_ROUTE_DEFAULT", PJMEDIA_AUD_DEV_ROUTE_DEFAULT)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER", PJMEDIA_AUD_DEV_ROUTE_LOUDSPEAKER)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_ROUTE_EARPIECE", PJMEDIA_AUD_DEV_ROUTE_EARPIECE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH", PJMEDIA_AUD_DEV_ROUTE_BLUETOOTH)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_EXT_FORMAT", PJMEDIA_AUD_DEV_CAP_EXT_FORMAT)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY", PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY", PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING", PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING", PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER", PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER", PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE", PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE", PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_EC", PJMEDIA_AUD_DEV_CAP_EC)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_EC_TAIL", PJMEDIA_AUD_DEV_CAP_EC_TAIL)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_VAD", PJMEDIA_AUD_DEV_CAP_VAD)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_CNG", PJMEDIA_AUD_DEV_CAP_CNG)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_PLC", PJMEDIA_AUD_DEV_CAP_PLC)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_AUD_DEV_CAP_MAX", PJMEDIA_AUD_DEV_CAP_MAX)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FILE_WRITE_PCM", PJMEDIA_FILE_WRITE_PCM)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FILE_WRITE_ALAW", PJMEDIA_FILE_WRITE_ALAW)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FILE_WRITE_ULAW", PJMEDIA_FILE_WRITE_ULAW)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FILE_NO_LOOP", PJMEDIA_FILE_NO_LOOP)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TYPE_NONE", PJMEDIA_TYPE_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TYPE_AUDIO", PJMEDIA_TYPE_AUDIO)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TYPE_VIDEO", PJMEDIA_TYPE_VIDEO)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TYPE_APPLICATION", PJMEDIA_TYPE_APPLICATION)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TYPE_UNKNOWN", PJMEDIA_TYPE_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_NONE", PJMEDIA_DIR_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_ENCODING", PJMEDIA_DIR_ENCODING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_CAPTURE", PJMEDIA_DIR_CAPTURE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_DECODING", PJMEDIA_DIR_DECODING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_PLAYBACK", PJMEDIA_DIR_PLAYBACK)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_RENDER", PJMEDIA_DIR_RENDER)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_ENCODING_DECODING", PJMEDIA_DIR_ENCODING_DECODING)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_CAPTURE_PLAYBACK", PJMEDIA_DIR_CAPTURE_PLAYBACK)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_DIR_CAPTURE_RENDER", PJMEDIA_DIR_CAPTURE_RENDER)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TP_PROTO_NONE", PJMEDIA_TP_PROTO_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TP_PROTO_RTP_AVP", PJMEDIA_TP_PROTO_RTP_AVP)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TP_PROTO_RTP_SAVP", PJMEDIA_TP_PROTO_RTP_SAVP)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_TP_PROTO_UNKNOWN", PJMEDIA_TP_PROTO_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_L16", PJMEDIA_FORMAT_L16)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_PCM", PJMEDIA_FORMAT_PCM)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_PCMA", PJMEDIA_FORMAT_PCMA)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_ALAW", PJMEDIA_FORMAT_ALAW)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_PCMU", PJMEDIA_FORMAT_PCMU)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_ULAW", PJMEDIA_FORMAT_ULAW)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_AMR", PJMEDIA_FORMAT_AMR)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_G729", PJMEDIA_FORMAT_G729)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_ILBC", PJMEDIA_FORMAT_ILBC)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_RGB24", PJMEDIA_FORMAT_RGB24)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_RGBA", PJMEDIA_FORMAT_RGBA)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_BGRA", PJMEDIA_FORMAT_BGRA)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_RGB32", PJMEDIA_FORMAT_RGB32)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_DIB", PJMEDIA_FORMAT_DIB)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_GBRP", PJMEDIA_FORMAT_GBRP)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_AYUV", PJMEDIA_FORMAT_AYUV)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_YUY2", PJMEDIA_FORMAT_YUY2)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_UYVY", PJMEDIA_FORMAT_UYVY)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_YVYU", PJMEDIA_FORMAT_YVYU)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_I420", PJMEDIA_FORMAT_I420)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_IYUV", PJMEDIA_FORMAT_IYUV)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_YV12", PJMEDIA_FORMAT_YV12)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_I422", PJMEDIA_FORMAT_I422)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_I420JPEG", PJMEDIA_FORMAT_I420JPEG)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_I422JPEG", PJMEDIA_FORMAT_I422JPEG)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_H261", PJMEDIA_FORMAT_H261)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_H263", PJMEDIA_FORMAT_H263)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_H263P", PJMEDIA_FORMAT_H263P)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_H264", PJMEDIA_FORMAT_H264)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_MJPEG", PJMEDIA_FORMAT_MJPEG)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_MPEG1VIDEO", PJMEDIA_FORMAT_MPEG1VIDEO)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_MPEG2VIDEO", PJMEDIA_FORMAT_MPEG2VIDEO)},
    {SWIG_LUA_CONSTTAB_INT("PJMEDIA_FORMAT_MPEG4", PJMEDIA_FORMAT_MPEG4)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_CRED_DATA_PLAIN_PASSWD", PJSIP_CRED_DATA_PLAIN_PASSWD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_CRED_DATA_DIGEST", PJSIP_CRED_DATA_DIGEST)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_CRED_DATA_EXT_AKA", PJSIP_CRED_DATA_EXT_AKA)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_DIALOG_CAP_UNSUPPORTED", PJSIP_DIALOG_CAP_UNSUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_DIALOG_CAP_SUPPORTED", PJSIP_DIALOG_CAP_SUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_DIALOG_CAP_UNKNOWN", PJSIP_DIALOG_CAP_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_UNKNOWN", PJSIP_EVENT_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_TIMER", PJSIP_EVENT_TIMER)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_TX_MSG", PJSIP_EVENT_TX_MSG)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_RX_MSG", PJSIP_EVENT_RX_MSG)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_TRANSPORT_ERROR", PJSIP_EVENT_TRANSPORT_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_TSX_STATE", PJSIP_EVENT_TSX_STATE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVENT_USER", PJSIP_EVENT_USER)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_TRYING", PJSIP_SC_TRYING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_RINGING", PJSIP_SC_RINGING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_CALL_BEING_FORWARDED", PJSIP_SC_CALL_BEING_FORWARDED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_QUEUED", PJSIP_SC_QUEUED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_PROGRESS", PJSIP_SC_PROGRESS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_OK", PJSIP_SC_OK)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_ACCEPTED", PJSIP_SC_ACCEPTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_MULTIPLE_CHOICES", PJSIP_SC_MULTIPLE_CHOICES)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_MOVED_PERMANENTLY", PJSIP_SC_MOVED_PERMANENTLY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_MOVED_TEMPORARILY", PJSIP_SC_MOVED_TEMPORARILY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_USE_PROXY", PJSIP_SC_USE_PROXY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_ALTERNATIVE_SERVICE", PJSIP_SC_ALTERNATIVE_SERVICE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BAD_REQUEST", PJSIP_SC_BAD_REQUEST)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_UNAUTHORIZED", PJSIP_SC_UNAUTHORIZED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_PAYMENT_REQUIRED", PJSIP_SC_PAYMENT_REQUIRED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_FORBIDDEN", PJSIP_SC_FORBIDDEN)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_NOT_FOUND", PJSIP_SC_NOT_FOUND)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_METHOD_NOT_ALLOWED", PJSIP_SC_METHOD_NOT_ALLOWED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_NOT_ACCEPTABLE", PJSIP_SC_NOT_ACCEPTABLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED", PJSIP_SC_PROXY_AUTHENTICATION_REQUIRED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_TIMEOUT", PJSIP_SC_REQUEST_TIMEOUT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_GONE", PJSIP_SC_GONE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_ENTITY_TOO_LARGE", PJSIP_SC_REQUEST_ENTITY_TOO_LARGE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_URI_TOO_LONG", PJSIP_SC_REQUEST_URI_TOO_LONG)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_UNSUPPORTED_MEDIA_TYPE", PJSIP_SC_UNSUPPORTED_MEDIA_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_UNSUPPORTED_URI_SCHEME", PJSIP_SC_UNSUPPORTED_URI_SCHEME)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BAD_EXTENSION", PJSIP_SC_BAD_EXTENSION)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_EXTENSION_REQUIRED", PJSIP_SC_EXTENSION_REQUIRED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_SESSION_TIMER_TOO_SMALL", PJSIP_SC_SESSION_TIMER_TOO_SMALL)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_INTERVAL_TOO_BRIEF", PJSIP_SC_INTERVAL_TOO_BRIEF)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_TEMPORARILY_UNAVAILABLE", PJSIP_SC_TEMPORARILY_UNAVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_CALL_TSX_DOES_NOT_EXIST", PJSIP_SC_CALL_TSX_DOES_NOT_EXIST)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_LOOP_DETECTED", PJSIP_SC_LOOP_DETECTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_TOO_MANY_HOPS", PJSIP_SC_TOO_MANY_HOPS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_ADDRESS_INCOMPLETE", PJSIP_SC_ADDRESS_INCOMPLETE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_AC_AMBIGUOUS", PJSIP_AC_AMBIGUOUS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BUSY_HERE", PJSIP_SC_BUSY_HERE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_TERMINATED", PJSIP_SC_REQUEST_TERMINATED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_NOT_ACCEPTABLE_HERE", PJSIP_SC_NOT_ACCEPTABLE_HERE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BAD_EVENT", PJSIP_SC_BAD_EVENT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_UPDATED", PJSIP_SC_REQUEST_UPDATED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_REQUEST_PENDING", PJSIP_SC_REQUEST_PENDING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_UNDECIPHERABLE", PJSIP_SC_UNDECIPHERABLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_INTERNAL_SERVER_ERROR", PJSIP_SC_INTERNAL_SERVER_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_NOT_IMPLEMENTED", PJSIP_SC_NOT_IMPLEMENTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BAD_GATEWAY", PJSIP_SC_BAD_GATEWAY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_SERVICE_UNAVAILABLE", PJSIP_SC_SERVICE_UNAVAILABLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_SERVER_TIMEOUT", PJSIP_SC_SERVER_TIMEOUT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_VERSION_NOT_SUPPORTED", PJSIP_SC_VERSION_NOT_SUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_MESSAGE_TOO_LARGE", PJSIP_SC_MESSAGE_TOO_LARGE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_PRECONDITION_FAILURE", PJSIP_SC_PRECONDITION_FAILURE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_BUSY_EVERYWHERE", PJSIP_SC_BUSY_EVERYWHERE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_DECLINE", PJSIP_SC_DECLINE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_DOES_NOT_EXIST_ANYWHERE", PJSIP_SC_DOES_NOT_EXIST_ANYWHERE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE", PJSIP_SC_NOT_ACCEPTABLE_ANYWHERE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_TSX_TIMEOUT", PJSIP_SC_TSX_TIMEOUT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC_TSX_TRANSPORT_ERROR", PJSIP_SC_TSX_TRANSPORT_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SC__force_32bit", PJSIP_SC__force_32bit)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ACCEPT", PJSIP_H_ACCEPT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ACCEPT_ENCODING_UNIMP", PJSIP_H_ACCEPT_ENCODING_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ACCEPT_LANGUAGE_UNIMP", PJSIP_H_ACCEPT_LANGUAGE_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ALERT_INFO_UNIMP", PJSIP_H_ALERT_INFO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ALLOW", PJSIP_H_ALLOW)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_AUTHENTICATION_INFO_UNIMP", PJSIP_H_AUTHENTICATION_INFO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_AUTHORIZATION", PJSIP_H_AUTHORIZATION)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CALL_ID", PJSIP_H_CALL_ID)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CALL_INFO_UNIMP", PJSIP_H_CALL_INFO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTACT", PJSIP_H_CONTACT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTENT_DISPOSITION_UNIMP", PJSIP_H_CONTENT_DISPOSITION_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTENT_ENCODING_UNIMP", PJSIP_H_CONTENT_ENCODING_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTENT_LANGUAGE_UNIMP", PJSIP_H_CONTENT_LANGUAGE_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTENT_LENGTH", PJSIP_H_CONTENT_LENGTH)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CONTENT_TYPE", PJSIP_H_CONTENT_TYPE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_CSEQ", PJSIP_H_CSEQ)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_DATE_UNIMP", PJSIP_H_DATE_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ERROR_INFO_UNIMP", PJSIP_H_ERROR_INFO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_EXPIRES", PJSIP_H_EXPIRES)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_FROM", PJSIP_H_FROM)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_IN_REPLY_TO_UNIMP", PJSIP_H_IN_REPLY_TO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_MAX_FORWARDS", PJSIP_H_MAX_FORWARDS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_MIME_VERSION_UNIMP", PJSIP_H_MIME_VERSION_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_MIN_EXPIRES", PJSIP_H_MIN_EXPIRES)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ORGANIZATION_UNIMP", PJSIP_H_ORGANIZATION_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_PRIORITY_UNIMP", PJSIP_H_PRIORITY_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_PROXY_AUTHENTICATE", PJSIP_H_PROXY_AUTHENTICATE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_PROXY_AUTHORIZATION", PJSIP_H_PROXY_AUTHORIZATION)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_PROXY_REQUIRE_UNIMP", PJSIP_H_PROXY_REQUIRE_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_RECORD_ROUTE", PJSIP_H_RECORD_ROUTE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_REPLY_TO_UNIMP", PJSIP_H_REPLY_TO_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_REQUIRE", PJSIP_H_REQUIRE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_RETRY_AFTER", PJSIP_H_RETRY_AFTER)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_ROUTE", PJSIP_H_ROUTE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_SERVER_UNIMP", PJSIP_H_SERVER_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_SUBJECT_UNIMP", PJSIP_H_SUBJECT_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_SUPPORTED", PJSIP_H_SUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_TIMESTAMP_UNIMP", PJSIP_H_TIMESTAMP_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_TO", PJSIP_H_TO)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_UNSUPPORTED", PJSIP_H_UNSUPPORTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_USER_AGENT_UNIMP", PJSIP_H_USER_AGENT_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_VIA", PJSIP_H_VIA)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_WARNING_UNIMP", PJSIP_H_WARNING_UNIMP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_WWW_AUTHENTICATE", PJSIP_H_WWW_AUTHENTICATE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_H_OTHER", PJSIP_H_OTHER)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_UNSPECIFIED", PJSIP_TRANSPORT_UNSPECIFIED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_UDP", PJSIP_TRANSPORT_UDP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_TCP", PJSIP_TRANSPORT_TCP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_TLS", PJSIP_TRANSPORT_TLS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_SCTP", PJSIP_TRANSPORT_SCTP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_LOOP", PJSIP_TRANSPORT_LOOP)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_LOOP_DGRAM", PJSIP_TRANSPORT_LOOP_DGRAM)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_START_OTHER", PJSIP_TRANSPORT_START_OTHER)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_IPV6", PJSIP_TRANSPORT_IPV6)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_UDP6", PJSIP_TRANSPORT_UDP6)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_TCP6", PJSIP_TRANSPORT_TCP6)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_TLS6", PJSIP_TRANSPORT_TLS6)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_RELIABLE", PJSIP_TRANSPORT_RELIABLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_SECURE", PJSIP_TRANSPORT_SECURE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TRANSPORT_DATAGRAM", PJSIP_TRANSPORT_DATAGRAM)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TP_STATE_CONNECTED", PJSIP_TP_STATE_CONNECTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TP_STATE_DISCONNECTED", PJSIP_TP_STATE_DISCONNECTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TP_STATE_SHUTDOWN", PJSIP_TP_STATE_SHUTDOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TP_STATE_DESTROY", PJSIP_TP_STATE_DESTROY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SSL_UNSPECIFIED_METHOD", PJSIP_SSL_UNSPECIFIED_METHOD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TLSV1_METHOD", PJSIP_TLSV1_METHOD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SSLV2_METHOD", PJSIP_SSLV2_METHOD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SSLV3_METHOD", PJSIP_SSLV3_METHOD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_SSLV23_METHOD", PJSIP_SSLV23_METHOD)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_NULL", PJSIP_TSX_STATE_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_CALLING", PJSIP_TSX_STATE_CALLING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_TRYING", PJSIP_TSX_STATE_TRYING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_PROCEEDING", PJSIP_TSX_STATE_PROCEEDING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_COMPLETED", PJSIP_TSX_STATE_COMPLETED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_CONFIRMED", PJSIP_TSX_STATE_CONFIRMED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_TERMINATED", PJSIP_TSX_STATE_TERMINATED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_DESTROYED", PJSIP_TSX_STATE_DESTROYED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_TSX_STATE_MAX", PJSIP_TSX_STATE_MAX)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_ROLE_UAC", PJSIP_ROLE_UAC)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_ROLE_UAS", PJSIP_ROLE_UAS)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_UAC_ROLE", PJSIP_UAC_ROLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_UAS_ROLE", PJSIP_UAS_ROLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_REDIRECT_REJECT", PJSIP_REDIRECT_REJECT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_REDIRECT_ACCEPT", PJSIP_REDIRECT_ACCEPT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_REDIRECT_ACCEPT_REPLACE", PJSIP_REDIRECT_ACCEPT_REPLACE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_REDIRECT_PENDING", PJSIP_REDIRECT_PENDING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_REDIRECT_STOP", PJSIP_REDIRECT_STOP)},
    {SWIG_LUA_CONSTTAB_INT("PJRPID_ACTIVITY_UNKNOWN", PJRPID_ACTIVITY_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJRPID_ACTIVITY_AWAY", PJRPID_ACTIVITY_AWAY)},
    {SWIG_LUA_CONSTTAB_INT("PJRPID_ACTIVITY_BUSY", PJRPID_ACTIVITY_BUSY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_NULL", PJSIP_EVSUB_STATE_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_SENT", PJSIP_EVSUB_STATE_SENT)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_ACCEPTED", PJSIP_EVSUB_STATE_ACCEPTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_PENDING", PJSIP_EVSUB_STATE_PENDING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_ACTIVE", PJSIP_EVSUB_STATE_ACTIVE)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_TERMINATED", PJSIP_EVSUB_STATE_TERMINATED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_EVSUB_STATE_UNKNOWN", PJSIP_EVSUB_STATE_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_NULL", PJSIP_INV_STATE_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_CALLING", PJSIP_INV_STATE_CALLING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_INCOMING", PJSIP_INV_STATE_INCOMING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_EARLY", PJSIP_INV_STATE_EARLY)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_CONNECTING", PJSIP_INV_STATE_CONNECTING)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_CONFIRMED", PJSIP_INV_STATE_CONFIRMED)},
    {SWIG_LUA_CONSTTAB_INT("PJSIP_INV_STATE_DISCONNECTED", PJSIP_INV_STATE_DISCONNECTED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_INVALID_ID", PJSUA_INVALID_ID)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_NULL", PJSUA_STATE_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_CREATED", PJSUA_STATE_CREATED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_INIT", PJSUA_STATE_INIT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_STARTING", PJSUA_STATE_STARTING)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_RUNNING", PJSUA_STATE_RUNNING)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STATE_CLOSING", PJSUA_STATE_CLOSING)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STUN_USE_DEFAULT", PJSUA_STUN_USE_DEFAULT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_STUN_USE_DISABLED", PJSUA_STUN_USE_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_HOLD_TYPE_RFC3264", PJSUA_CALL_HOLD_TYPE_RFC3264)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_HOLD_TYPE_RFC2543", PJSUA_CALL_HOLD_TYPE_RFC2543)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_DESTROY_NO_RX_MSG", PJSUA_DESTROY_NO_RX_MSG)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_DESTROY_NO_TX_MSG", PJSUA_DESTROY_NO_TX_MSG)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_DESTROY_NO_NETWORK", PJSUA_DESTROY_NO_NETWORK)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_100REL_NOT_USED", PJSUA_100REL_NOT_USED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_100REL_MANDATORY", PJSUA_100REL_MANDATORY)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_100REL_OPTIONAL", PJSUA_100REL_OPTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_SIP_TIMER_INACTIVE", PJSUA_SIP_TIMER_INACTIVE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_SIP_TIMER_OPTIONAL", PJSUA_SIP_TIMER_OPTIONAL)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_SIP_TIMER_REQUIRED", PJSUA_SIP_TIMER_REQUIRED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_SIP_TIMER_ALWAYS", PJSUA_SIP_TIMER_ALWAYS)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_IPV6_DISABLED", PJSUA_IPV6_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_IPV6_ENABLED", PJSUA_IPV6_ENABLED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_BUDDY_STATUS_UNKNOWN", PJSUA_BUDDY_STATUS_UNKNOWN)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_BUDDY_STATUS_ONLINE", PJSUA_BUDDY_STATUS_ONLINE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_BUDDY_STATUS_OFFLINE", PJSUA_BUDDY_STATUS_OFFLINE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_MEDIA_NONE", PJSUA_CALL_MEDIA_NONE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_MEDIA_ACTIVE", PJSUA_CALL_MEDIA_ACTIVE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_MEDIA_LOCAL_HOLD", PJSUA_CALL_MEDIA_LOCAL_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_MEDIA_REMOTE_HOLD", PJSUA_CALL_MEDIA_REMOTE_HOLD)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_MEDIA_ERROR", PJSUA_CALL_MEDIA_ERROR)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_NULL", PJSUA_MED_TP_NULL)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_CREATING", PJSUA_MED_TP_CREATING)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_IDLE", PJSUA_MED_TP_IDLE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_INIT", PJSUA_MED_TP_INIT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_RUNNING", PJSUA_MED_TP_RUNNING)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_DISABLED", PJSUA_MED_TP_DISABLED)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_NO_OP", PJSUA_CALL_VID_STRM_NO_OP)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_ADD", PJSUA_CALL_VID_STRM_ADD)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_REMOVE", PJSUA_CALL_VID_STRM_REMOVE)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_CHANGE_DIR", PJSUA_CALL_VID_STRM_CHANGE_DIR)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV", PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_START_TRANSMIT", PJSUA_CALL_VID_STRM_START_TRANSMIT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_STOP_TRANSMIT", PJSUA_CALL_VID_STRM_STOP_TRANSMIT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_VID_STRM_SEND_KEYFRAME", PJSUA_CALL_VID_STRM_SEND_KEYFRAME)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_VID_REQ_KEYFRAME_SIP_INFO", PJSUA_VID_REQ_KEYFRAME_SIP_INFO)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_VID_REQ_KEYFRAME_RTCP_PLI", PJSUA_VID_REQ_KEYFRAME_RTCP_PLI)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_UNHOLD", PJSUA_CALL_UNHOLD)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_UPDATE_CONTACT", PJSUA_CALL_UPDATE_CONTACT)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_CALL_INCLUDE_DISABLED_MEDIA", PJSUA_CALL_INCLUDE_DISABLED_MEDIA)},
    {SWIG_LUA_CONSTTAB_INT("PJSUA_MED_TP_CLOSE_MEMBER", PJSUA_MED_TP_CLOSE_MEMBER)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_ID", pj::INVALID_ID)},
    {SWIG_LUA_CONSTTAB_INT("SUCCESS", pj::SUCCESS)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "AudioMedia_getPortInfoFromId", _wrap_AudioMedia_getPortInfoFromId},
    { "AudioMedia_typecastFromMedia", _wrap_AudioMedia_typecastFromMedia},
    { "AudioMediaPlayer_typecastFromAudioMedia", _wrap_AudioMediaPlayer_typecastFromAudioMedia},
    { "AudioMediaRecorder_typecastFromAudioMedia", _wrap_AudioMediaRecorder_typecastFromAudioMedia},
    { "Account_lookup", _wrap_Account_lookup},
    { "Call_lookup", _wrap_Call_lookup},
    { "Endpoint_instance", _wrap_Endpoint_instance},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_pj_qos_params,
&_wrap_class_pjmedia_tone_digit,
&_wrap_class_pjmedia_tone_digit_map,
&_wrap_class_pjmedia_tone_desc,
&_wrap_class_string,
&_wrap_class_StringVector,
&_wrap_class_IntVector,
&_wrap_class_Error,
&_wrap_class_Version,
&_wrap_class_TimeVal,
&_wrap_class_PersistentObject,
&_wrap_class_PersistentDocument,
&_wrap_class_ContainerNode,
&_wrap_class_AuthCredInfo,
&_wrap_class_TlsConfig,
&_wrap_class_TransportConfig,
&_wrap_class_TransportInfo,
&_wrap_class_SipRxData,
&_wrap_class_SipTxData,
&_wrap_class_SipTransaction,
&_wrap_class_TimerEvent,
&_wrap_class_TsxStateEvent,
&_wrap_class_TxMsgEvent,
&_wrap_class_TxErrorEvent,
&_wrap_class_RxMsgEvent,
&_wrap_class_UserEvent,
&_wrap_class_SipEvent,
&_wrap_class_SipMediaType,
&_wrap_class_SipHeader,
&_wrap_class_SipMultipartPart,
&_wrap_class_SipTxOption,
&_wrap_class_SendInstantMessageParam,
&_wrap_class_SendTypingIndicationParam,
&_wrap_class_SipHeaderVector,
&_wrap_class_AuthCredInfoVector,
&_wrap_class_SipMultipartPartVector,
&_wrap_class_BuddyVector,
&_wrap_class_AudioMediaVector,
&_wrap_class_ToneDescVector,
&_wrap_class_ToneDigitVector,
&_wrap_class_ToneDigitMapVector,
&_wrap_class_MediaFormatVector,
&_wrap_class_AudioDevInfoVector,
&_wrap_class_CodecInfoVector,
&_wrap_class_MediaFormat,
&_wrap_class_MediaFormatAudio,
&_wrap_class_MediaFormatVideo,
&_wrap_class_ConfPortInfo,
&_wrap_class_Media,
&_wrap_class_AudioMedia,
&_wrap_class_AudioMediaPlayerInfo,
&_wrap_class_AudioMediaPlayer,
&_wrap_class_AudioMediaRecorder,
&_wrap_class_ToneDesc,
&_wrap_class_ToneDigit,
&_wrap_class_ToneDigitMapDigit,
&_wrap_class_ToneGenerator,
&_wrap_class_AudioDevInfo,
&_wrap_class_AudDevManager,
&_wrap_class_CodecInfo,
&_wrap_class_PresenceStatus,
&_wrap_class_BuddyConfig,
&_wrap_class_BuddyInfo,
&_wrap_class_Buddy,
&_wrap_class_AccountRegConfig,
&_wrap_class_AccountSipConfig,
&_wrap_class_AccountCallConfig,
&_wrap_class_AccountPresConfig,
&_wrap_class_AccountMwiConfig,
&_wrap_class_AccountNatConfig,
&_wrap_class_AccountMediaConfig,
&_wrap_class_AccountVideoConfig,
&_wrap_class_AccountConfig,
&_wrap_class_AccountInfo,
&_wrap_class_OnIncomingCallParam,
&_wrap_class_OnRegStartedParam,
&_wrap_class_OnRegStateParam,
&_wrap_class_OnIncomingSubscribeParam,
&_wrap_class_OnInstantMessageParam,
&_wrap_class_OnInstantMessageStatusParam,
&_wrap_class_OnTypingIndicationParam,
&_wrap_class_OnMwiInfoParam,
&_wrap_class_PresNotifyParam,
&_wrap_class_FindBuddyMatch,
&_wrap_class_Account,
&_wrap_class_MathStat,
&_wrap_class_RtcpStreamStat,
&_wrap_class_RtcpSdes,
&_wrap_class_RtcpStat,
&_wrap_class_JbufState,
&_wrap_class_SdpSession,
&_wrap_class_MediaFmtChangedEvent,
&_wrap_class_MediaEvent,
&_wrap_class_MediaTransportInfo,
&_wrap_class_CallSetting,
&_wrap_class_CallMediaInfo,
&_wrap_class_CallInfo,
&_wrap_class_StreamInfo,
&_wrap_class_StreamStat,
&_wrap_class_OnCallStateParam,
&_wrap_class_OnCallTsxStateParam,
&_wrap_class_OnCallMediaStateParam,
&_wrap_class_OnCallSdpCreatedParam,
&_wrap_class_OnStreamCreatedParam,
&_wrap_class_OnStreamDestroyedParam,
&_wrap_class_OnDtmfDigitParam,
&_wrap_class_OnCallTransferRequestParam,
&_wrap_class_OnCallTransferStatusParam,
&_wrap_class_OnCallReplaceRequestParam,
&_wrap_class_OnCallReplacedParam,
&_wrap_class_OnCallRxOfferParam,
&_wrap_class_OnCallRedirectedParam,
&_wrap_class_OnCallMediaEventParam,
&_wrap_class_OnCallMediaTransportStateParam,
&_wrap_class_OnCreateMediaTransportParam,
&_wrap_class_CallOpParam,
&_wrap_class_CallSendRequestParam,
&_wrap_class_CallVidSetStreamParam,
&_wrap_class_Call,
&_wrap_class_CallMediaInfoVector,
&_wrap_class_JsonDocument,
&_wrap_class_OnNatDetectionCompleteParam,
&_wrap_class_OnNatCheckStunServersCompleteParam,
&_wrap_class_OnTimerParam,
&_wrap_class_OnTransportStateParam,
&_wrap_class_OnSelectAccountParam,
&_wrap_class_UaConfig,
&_wrap_class_LogEntry,
&_wrap_class_LogWriter,
&_wrap_class_LogConfig,
&_wrap_class_MediaConfig,
&_wrap_class_EpConfig,
&_wrap_class_PendingJob,
&_wrap_class_Endpoint,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "pjsua2",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_pj__ToneDescTo_p_pjmedia_tone_desc(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pjmedia_tone_desc *)  ((pj::ToneDesc *) x));
}
static void *_p_pj__JsonDocumentTo_p_pj__PersistentDocument(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentDocument *)  ((pj::JsonDocument *) x));
}
static void *_p_pj__AuthCredInfoTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AuthCredInfo *) x));
}
static void *_p_pj__UaConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::UaConfig *) x));
}
static void *_p_pj__AccountVideoConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountVideoConfig *) x));
}
static void *_p_pj__AccountMediaConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountMediaConfig *) x));
}
static void *_p_pj__AccountMwiConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountMwiConfig *) x));
}
static void *_p_pj__AccountPresConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountPresConfig *) x));
}
static void *_p_pj__AccountRegConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountRegConfig *) x));
}
static void *_p_pj__BuddyConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::BuddyConfig *) x));
}
static void *_p_pj__TlsConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::TlsConfig *) x));
}
static void *_p_pj__LogConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::LogConfig *) x));
}
static void *_p_pj__MediaConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::MediaConfig *) x));
}
static void *_p_pj__AccountConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountConfig *) x));
}
static void *_p_pj__AccountNatConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountNatConfig *) x));
}
static void *_p_pj__AccountCallConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountCallConfig *) x));
}
static void *_p_pj__AccountSipConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::AccountSipConfig *) x));
}
static void *_p_pj__TransportConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::TransportConfig *) x));
}
static void *_p_pj__EpConfigTo_p_pj__PersistentObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::PersistentObject *)  ((pj::EpConfig *) x));
}
static void *_p_pj__AudioMediaRecorderTo_p_pj__AudioMedia(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::AudioMedia *)  ((pj::AudioMediaRecorder *) x));
}
static void *_p_pj__ToneGeneratorTo_p_pj__AudioMedia(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::AudioMedia *)  ((pj::ToneGenerator *) x));
}
static void *_p_pj__AudioMediaPlayerTo_p_pj__AudioMedia(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::AudioMedia *)  ((pj::AudioMediaPlayer *) x));
}
static void *_p_pj__ToneDigitTo_p_pjmedia_tone_digit(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pjmedia_tone_digit *)  ((pj::ToneDigit *) x));
}
static void *_p_pj__MediaFormatAudioTo_p_pj__MediaFormat(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::MediaFormat *)  ((pj::MediaFormatAudio *) x));
}
static void *_p_pj__MediaFormatVideoTo_p_pj__MediaFormat(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::MediaFormat *)  ((pj::MediaFormatVideo *) x));
}
static void *_p_pj__AudioMediaTo_p_pj__Media(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::Media *)  ((pj::AudioMedia *) x));
}
static void *_p_pj__AudioMediaRecorderTo_p_pj__Media(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::Media *) (pj::AudioMedia *) ((pj::AudioMediaRecorder *) x));
}
static void *_p_pj__ToneGeneratorTo_p_pj__Media(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::Media *) (pj::AudioMedia *) ((pj::ToneGenerator *) x));
}
static void *_p_pj__AudioMediaPlayerTo_p_pj__Media(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((pj::Media *) (pj::AudioMedia *) ((pj::AudioMediaPlayer *) x));
}
static swig_type_info _swigt__p_int = {"_p_int", "pjsua_acc_id *|int *|pjmedia_vid_dev_index *|pj_int32_t *|pjsua_vid_win_id *|pj::TransportId *|pjsua_call_id *|pj_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|pj::MediaPort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj__Account = {"_p_pj__Account", "pj::Account *", 0, 0, (void*)&_wrap_class_Account, 0};
static swig_type_info _swigt__p_pj__AccountCallConfig = {"_p_pj__AccountCallConfig", "pj::AccountCallConfig *", 0, 0, (void*)&_wrap_class_AccountCallConfig, 0};
static swig_type_info _swigt__p_pj__AccountConfig = {"_p_pj__AccountConfig", "pj::AccountConfig *", 0, 0, (void*)&_wrap_class_AccountConfig, 0};
static swig_type_info _swigt__p_pj__AccountInfo = {"_p_pj__AccountInfo", "pj::AccountInfo *", 0, 0, (void*)&_wrap_class_AccountInfo, 0};
static swig_type_info _swigt__p_pj__AccountMediaConfig = {"_p_pj__AccountMediaConfig", "pj::AccountMediaConfig *", 0, 0, (void*)&_wrap_class_AccountMediaConfig, 0};
static swig_type_info _swigt__p_pj__AccountMwiConfig = {"_p_pj__AccountMwiConfig", "pj::AccountMwiConfig *", 0, 0, (void*)&_wrap_class_AccountMwiConfig, 0};
static swig_type_info _swigt__p_pj__AccountNatConfig = {"_p_pj__AccountNatConfig", "pj::AccountNatConfig *", 0, 0, (void*)&_wrap_class_AccountNatConfig, 0};
static swig_type_info _swigt__p_pj__AccountPresConfig = {"_p_pj__AccountPresConfig", "pj::AccountPresConfig *", 0, 0, (void*)&_wrap_class_AccountPresConfig, 0};
static swig_type_info _swigt__p_pj__AccountRegConfig = {"_p_pj__AccountRegConfig", "pj::AccountRegConfig *", 0, 0, (void*)&_wrap_class_AccountRegConfig, 0};
static swig_type_info _swigt__p_pj__AccountSipConfig = {"_p_pj__AccountSipConfig", "pj::AccountSipConfig *", 0, 0, (void*)&_wrap_class_AccountSipConfig, 0};
static swig_type_info _swigt__p_pj__AccountVideoConfig = {"_p_pj__AccountVideoConfig", "pj::AccountVideoConfig *", 0, 0, (void*)&_wrap_class_AccountVideoConfig, 0};
static swig_type_info _swigt__p_pj__AudDevManager = {"_p_pj__AudDevManager", "pj::AudDevManager *", 0, 0, (void*)&_wrap_class_AudDevManager, 0};
static swig_type_info _swigt__p_pj__AudioDevInfo = {"_p_pj__AudioDevInfo", "pj::AudioDevInfo *", 0, 0, (void*)&_wrap_class_AudioDevInfo, 0};
static swig_type_info _swigt__p_pj__AudioMedia = {"_p_pj__AudioMedia", "pj::AudioMedia *", 0, 0, (void*)&_wrap_class_AudioMedia, 0};
static swig_type_info _swigt__p_pj__AudioMediaPlayer = {"_p_pj__AudioMediaPlayer", "pj::AudioMediaPlayer *", 0, 0, (void*)&_wrap_class_AudioMediaPlayer, 0};
static swig_type_info _swigt__p_pj__AudioMediaPlayerInfo = {"_p_pj__AudioMediaPlayerInfo", "pj::AudioMediaPlayerInfo *", 0, 0, (void*)&_wrap_class_AudioMediaPlayerInfo, 0};
static swig_type_info _swigt__p_pj__AudioMediaRecorder = {"_p_pj__AudioMediaRecorder", "pj::AudioMediaRecorder *", 0, 0, (void*)&_wrap_class_AudioMediaRecorder, 0};
static swig_type_info _swigt__p_pj__AuthCredInfo = {"_p_pj__AuthCredInfo", "pj::AuthCredInfo *", 0, 0, (void*)&_wrap_class_AuthCredInfo, 0};
static swig_type_info _swigt__p_pj__Buddy = {"_p_pj__Buddy", "pj::Buddy *", 0, 0, (void*)&_wrap_class_Buddy, 0};
static swig_type_info _swigt__p_pj__BuddyConfig = {"_p_pj__BuddyConfig", "pj::BuddyConfig *", 0, 0, (void*)&_wrap_class_BuddyConfig, 0};
static swig_type_info _swigt__p_pj__BuddyInfo = {"_p_pj__BuddyInfo", "pj::BuddyInfo *", 0, 0, (void*)&_wrap_class_BuddyInfo, 0};
static swig_type_info _swigt__p_pj__Call = {"_p_pj__Call", "pj::Call *", 0, 0, (void*)&_wrap_class_Call, 0};
static swig_type_info _swigt__p_pj__CallInfo = {"_p_pj__CallInfo", "pj::CallInfo *", 0, 0, (void*)&_wrap_class_CallInfo, 0};
static swig_type_info _swigt__p_pj__CallMediaInfo = {"_p_pj__CallMediaInfo", "pj::CallMediaInfo *", 0, 0, (void*)&_wrap_class_CallMediaInfo, 0};
static swig_type_info _swigt__p_pj__CallOpParam = {"_p_pj__CallOpParam", "pj::CallOpParam *", 0, 0, (void*)&_wrap_class_CallOpParam, 0};
static swig_type_info _swigt__p_pj__CallSendRequestParam = {"_p_pj__CallSendRequestParam", "pj::CallSendRequestParam *", 0, 0, (void*)&_wrap_class_CallSendRequestParam, 0};
static swig_type_info _swigt__p_pj__CallSetting = {"_p_pj__CallSetting", "pj::CallSetting *", 0, 0, (void*)&_wrap_class_CallSetting, 0};
static swig_type_info _swigt__p_pj__CallVidSetStreamParam = {"_p_pj__CallVidSetStreamParam", "pj::CallVidSetStreamParam *", 0, 0, (void*)&_wrap_class_CallVidSetStreamParam, 0};
static swig_type_info _swigt__p_pj__CodecInfo = {"_p_pj__CodecInfo", "pj::CodecInfo *", 0, 0, (void*)&_wrap_class_CodecInfo, 0};
static swig_type_info _swigt__p_pj__ConfPortInfo = {"_p_pj__ConfPortInfo", "pj::ConfPortInfo *", 0, 0, (void*)&_wrap_class_ConfPortInfo, 0};
static swig_type_info _swigt__p_pj__ContainerNode = {"_p_pj__ContainerNode", "pj::ContainerNode *", 0, 0, (void*)&_wrap_class_ContainerNode, 0};
static swig_type_info _swigt__p_pj__Endpoint = {"_p_pj__Endpoint", "pj::Endpoint *", 0, 0, (void*)&_wrap_class_Endpoint, 0};
static swig_type_info _swigt__p_pj__EpConfig = {"_p_pj__EpConfig", "pj::EpConfig *", 0, 0, (void*)&_wrap_class_EpConfig, 0};
static swig_type_info _swigt__p_pj__Error = {"_p_pj__Error", "pj::Error *", 0, 0, (void*)&_wrap_class_Error, 0};
static swig_type_info _swigt__p_pj__FindBuddyMatch = {"_p_pj__FindBuddyMatch", "pj::FindBuddyMatch *", 0, 0, (void*)&_wrap_class_FindBuddyMatch, 0};
static swig_type_info _swigt__p_pj__JbufState = {"_p_pj__JbufState", "pj::JbufState *", 0, 0, (void*)&_wrap_class_JbufState, 0};
static swig_type_info _swigt__p_pj__JsonDocument = {"_p_pj__JsonDocument", "pj::JsonDocument *", 0, 0, (void*)&_wrap_class_JsonDocument, 0};
static swig_type_info _swigt__p_pj__LogConfig = {"_p_pj__LogConfig", "pj::LogConfig *", 0, 0, (void*)&_wrap_class_LogConfig, 0};
static swig_type_info _swigt__p_pj__LogEntry = {"_p_pj__LogEntry", "pj::LogEntry *", 0, 0, (void*)&_wrap_class_LogEntry, 0};
static swig_type_info _swigt__p_pj__LogWriter = {"_p_pj__LogWriter", "pj::LogWriter *", 0, 0, (void*)&_wrap_class_LogWriter, 0};
static swig_type_info _swigt__p_pj__MathStat = {"_p_pj__MathStat", "pj::MathStat *", 0, 0, (void*)&_wrap_class_MathStat, 0};
static swig_type_info _swigt__p_pj__Media = {"_p_pj__Media", "pj::Media *", 0, 0, (void*)&_wrap_class_Media, 0};
static swig_type_info _swigt__p_pj__MediaConfig = {"_p_pj__MediaConfig", "pj::MediaConfig *", 0, 0, (void*)&_wrap_class_MediaConfig, 0};
static swig_type_info _swigt__p_pj__MediaEvent = {"_p_pj__MediaEvent", "pj::MediaEvent *", 0, 0, (void*)&_wrap_class_MediaEvent, 0};
static swig_type_info _swigt__p_pj__MediaFmtChangedEvent = {"_p_pj__MediaFmtChangedEvent", "pj::MediaFmtChangedEvent *", 0, 0, (void*)&_wrap_class_MediaFmtChangedEvent, 0};
static swig_type_info _swigt__p_pj__MediaFormat = {"_p_pj__MediaFormat", "pj::MediaFormat *", 0, 0, (void*)&_wrap_class_MediaFormat, 0};
static swig_type_info _swigt__p_pj__MediaFormatAudio = {"_p_pj__MediaFormatAudio", "pj::MediaFormatAudio *", 0, 0, (void*)&_wrap_class_MediaFormatAudio, 0};
static swig_type_info _swigt__p_pj__MediaFormatVideo = {"_p_pj__MediaFormatVideo", "pj::MediaFormatVideo *", 0, 0, (void*)&_wrap_class_MediaFormatVideo, 0};
static swig_type_info _swigt__p_pj__MediaTransportInfo = {"_p_pj__MediaTransportInfo", "pj::MediaTransportInfo *", 0, 0, (void*)&_wrap_class_MediaTransportInfo, 0};
static swig_type_info _swigt__p_pj__OnCallMediaEventParam = {"_p_pj__OnCallMediaEventParam", "pj::OnCallMediaEventParam *", 0, 0, (void*)&_wrap_class_OnCallMediaEventParam, 0};
static swig_type_info _swigt__p_pj__OnCallMediaStateParam = {"_p_pj__OnCallMediaStateParam", "pj::OnCallMediaStateParam *", 0, 0, (void*)&_wrap_class_OnCallMediaStateParam, 0};
static swig_type_info _swigt__p_pj__OnCallMediaTransportStateParam = {"_p_pj__OnCallMediaTransportStateParam", "pj::OnCallMediaTransportStateParam *", 0, 0, (void*)&_wrap_class_OnCallMediaTransportStateParam, 0};
static swig_type_info _swigt__p_pj__OnCallRedirectedParam = {"_p_pj__OnCallRedirectedParam", "pj::OnCallRedirectedParam *", 0, 0, (void*)&_wrap_class_OnCallRedirectedParam, 0};
static swig_type_info _swigt__p_pj__OnCallReplaceRequestParam = {"_p_pj__OnCallReplaceRequestParam", "pj::OnCallReplaceRequestParam *", 0, 0, (void*)&_wrap_class_OnCallReplaceRequestParam, 0};
static swig_type_info _swigt__p_pj__OnCallReplacedParam = {"_p_pj__OnCallReplacedParam", "pj::OnCallReplacedParam *", 0, 0, (void*)&_wrap_class_OnCallReplacedParam, 0};
static swig_type_info _swigt__p_pj__OnCallRxOfferParam = {"_p_pj__OnCallRxOfferParam", "pj::OnCallRxOfferParam *", 0, 0, (void*)&_wrap_class_OnCallRxOfferParam, 0};
static swig_type_info _swigt__p_pj__OnCallSdpCreatedParam = {"_p_pj__OnCallSdpCreatedParam", "pj::OnCallSdpCreatedParam *", 0, 0, (void*)&_wrap_class_OnCallSdpCreatedParam, 0};
static swig_type_info _swigt__p_pj__OnCallStateParam = {"_p_pj__OnCallStateParam", "pj::OnCallStateParam *", 0, 0, (void*)&_wrap_class_OnCallStateParam, 0};
static swig_type_info _swigt__p_pj__OnCallTransferRequestParam = {"_p_pj__OnCallTransferRequestParam", "pj::OnCallTransferRequestParam *", 0, 0, (void*)&_wrap_class_OnCallTransferRequestParam, 0};
static swig_type_info _swigt__p_pj__OnCallTransferStatusParam = {"_p_pj__OnCallTransferStatusParam", "pj::OnCallTransferStatusParam *", 0, 0, (void*)&_wrap_class_OnCallTransferStatusParam, 0};
static swig_type_info _swigt__p_pj__OnCallTsxStateParam = {"_p_pj__OnCallTsxStateParam", "pj::OnCallTsxStateParam *", 0, 0, (void*)&_wrap_class_OnCallTsxStateParam, 0};
static swig_type_info _swigt__p_pj__OnCreateMediaTransportParam = {"_p_pj__OnCreateMediaTransportParam", "pj::OnCreateMediaTransportParam *", 0, 0, (void*)&_wrap_class_OnCreateMediaTransportParam, 0};
static swig_type_info _swigt__p_pj__OnDtmfDigitParam = {"_p_pj__OnDtmfDigitParam", "pj::OnDtmfDigitParam *", 0, 0, (void*)&_wrap_class_OnDtmfDigitParam, 0};
static swig_type_info _swigt__p_pj__OnIncomingCallParam = {"_p_pj__OnIncomingCallParam", "pj::OnIncomingCallParam *", 0, 0, (void*)&_wrap_class_OnIncomingCallParam, 0};
static swig_type_info _swigt__p_pj__OnIncomingSubscribeParam = {"_p_pj__OnIncomingSubscribeParam", "pj::OnIncomingSubscribeParam *", 0, 0, (void*)&_wrap_class_OnIncomingSubscribeParam, 0};
static swig_type_info _swigt__p_pj__OnInstantMessageParam = {"_p_pj__OnInstantMessageParam", "pj::OnInstantMessageParam *", 0, 0, (void*)&_wrap_class_OnInstantMessageParam, 0};
static swig_type_info _swigt__p_pj__OnInstantMessageStatusParam = {"_p_pj__OnInstantMessageStatusParam", "pj::OnInstantMessageStatusParam *", 0, 0, (void*)&_wrap_class_OnInstantMessageStatusParam, 0};
static swig_type_info _swigt__p_pj__OnMwiInfoParam = {"_p_pj__OnMwiInfoParam", "pj::OnMwiInfoParam *", 0, 0, (void*)&_wrap_class_OnMwiInfoParam, 0};
static swig_type_info _swigt__p_pj__OnNatCheckStunServersCompleteParam = {"_p_pj__OnNatCheckStunServersCompleteParam", "pj::OnNatCheckStunServersCompleteParam *", 0, 0, (void*)&_wrap_class_OnNatCheckStunServersCompleteParam, 0};
static swig_type_info _swigt__p_pj__OnNatDetectionCompleteParam = {"_p_pj__OnNatDetectionCompleteParam", "pj::OnNatDetectionCompleteParam *", 0, 0, (void*)&_wrap_class_OnNatDetectionCompleteParam, 0};
static swig_type_info _swigt__p_pj__OnRegStartedParam = {"_p_pj__OnRegStartedParam", "pj::OnRegStartedParam *", 0, 0, (void*)&_wrap_class_OnRegStartedParam, 0};
static swig_type_info _swigt__p_pj__OnRegStateParam = {"_p_pj__OnRegStateParam", "pj::OnRegStateParam *", 0, 0, (void*)&_wrap_class_OnRegStateParam, 0};
static swig_type_info _swigt__p_pj__OnSelectAccountParam = {"_p_pj__OnSelectAccountParam", "pj::OnSelectAccountParam *", 0, 0, (void*)&_wrap_class_OnSelectAccountParam, 0};
static swig_type_info _swigt__p_pj__OnStreamCreatedParam = {"_p_pj__OnStreamCreatedParam", "pj::OnStreamCreatedParam *", 0, 0, (void*)&_wrap_class_OnStreamCreatedParam, 0};
static swig_type_info _swigt__p_pj__OnStreamDestroyedParam = {"_p_pj__OnStreamDestroyedParam", "pj::OnStreamDestroyedParam *", 0, 0, (void*)&_wrap_class_OnStreamDestroyedParam, 0};
static swig_type_info _swigt__p_pj__OnTimerParam = {"_p_pj__OnTimerParam", "pj::OnTimerParam *", 0, 0, (void*)&_wrap_class_OnTimerParam, 0};
static swig_type_info _swigt__p_pj__OnTransportStateParam = {"_p_pj__OnTransportStateParam", "pj::OnTransportStateParam *", 0, 0, (void*)&_wrap_class_OnTransportStateParam, 0};
static swig_type_info _swigt__p_pj__OnTypingIndicationParam = {"_p_pj__OnTypingIndicationParam", "pj::OnTypingIndicationParam *", 0, 0, (void*)&_wrap_class_OnTypingIndicationParam, 0};
static swig_type_info _swigt__p_pj__PendingJob = {"_p_pj__PendingJob", "pj::PendingJob *", 0, 0, (void*)&_wrap_class_PendingJob, 0};
static swig_type_info _swigt__p_pj__PersistentDocument = {"_p_pj__PersistentDocument", "pj::PersistentDocument *", 0, 0, (void*)&_wrap_class_PersistentDocument, 0};
static swig_type_info _swigt__p_pj__PersistentObject = {"_p_pj__PersistentObject", "pj::PersistentObject *", 0, 0, (void*)&_wrap_class_PersistentObject, 0};
static swig_type_info _swigt__p_pj__PresNotifyParam = {"_p_pj__PresNotifyParam", "pj::PresNotifyParam *", 0, 0, (void*)&_wrap_class_PresNotifyParam, 0};
static swig_type_info _swigt__p_pj__PresenceStatus = {"_p_pj__PresenceStatus", "pj::PresenceStatus *", 0, 0, (void*)&_wrap_class_PresenceStatus, 0};
static swig_type_info _swigt__p_pj__RtcpSdes = {"_p_pj__RtcpSdes", "pj::RtcpSdes *", 0, 0, (void*)&_wrap_class_RtcpSdes, 0};
static swig_type_info _swigt__p_pj__RtcpStat = {"_p_pj__RtcpStat", "pj::RtcpStat *", 0, 0, (void*)&_wrap_class_RtcpStat, 0};
static swig_type_info _swigt__p_pj__RtcpStreamStat = {"_p_pj__RtcpStreamStat", "pj::RtcpStreamStat *", 0, 0, (void*)&_wrap_class_RtcpStreamStat, 0};
static swig_type_info _swigt__p_pj__RxMsgEvent = {"_p_pj__RxMsgEvent", "pj::RxMsgEvent *", 0, 0, (void*)&_wrap_class_RxMsgEvent, 0};
static swig_type_info _swigt__p_pj__SdpSession = {"_p_pj__SdpSession", "pj::SdpSession *", 0, 0, (void*)&_wrap_class_SdpSession, 0};
static swig_type_info _swigt__p_pj__SendInstantMessageParam = {"_p_pj__SendInstantMessageParam", "pj::SendInstantMessageParam *", 0, 0, (void*)&_wrap_class_SendInstantMessageParam, 0};
static swig_type_info _swigt__p_pj__SendTypingIndicationParam = {"_p_pj__SendTypingIndicationParam", "pj::SendTypingIndicationParam *", 0, 0, (void*)&_wrap_class_SendTypingIndicationParam, 0};
static swig_type_info _swigt__p_pj__SipEvent = {"_p_pj__SipEvent", "pj::SipEvent *", 0, 0, (void*)&_wrap_class_SipEvent, 0};
static swig_type_info _swigt__p_pj__SipHeader = {"_p_pj__SipHeader", "pj::SipHeader *", 0, 0, (void*)&_wrap_class_SipHeader, 0};
static swig_type_info _swigt__p_pj__SipMediaType = {"_p_pj__SipMediaType", "pj::SipMediaType *", 0, 0, (void*)&_wrap_class_SipMediaType, 0};
static swig_type_info _swigt__p_pj__SipMultipartPart = {"_p_pj__SipMultipartPart", "pj::SipMultipartPart *", 0, 0, (void*)&_wrap_class_SipMultipartPart, 0};
static swig_type_info _swigt__p_pj__SipRxData = {"_p_pj__SipRxData", "pj::SipRxData *", 0, 0, (void*)&_wrap_class_SipRxData, 0};
static swig_type_info _swigt__p_pj__SipTransaction = {"_p_pj__SipTransaction", "pj::SipTransaction *", 0, 0, (void*)&_wrap_class_SipTransaction, 0};
static swig_type_info _swigt__p_pj__SipTxData = {"_p_pj__SipTxData", "pj::SipTxData *", 0, 0, (void*)&_wrap_class_SipTxData, 0};
static swig_type_info _swigt__p_pj__SipTxOption = {"_p_pj__SipTxOption", "pj::SipTxOption *", 0, 0, (void*)&_wrap_class_SipTxOption, 0};
static swig_type_info _swigt__p_pj__StreamInfo = {"_p_pj__StreamInfo", "pj::StreamInfo *", 0, 0, (void*)&_wrap_class_StreamInfo, 0};
static swig_type_info _swigt__p_pj__StreamStat = {"_p_pj__StreamStat", "pj::StreamStat *", 0, 0, (void*)&_wrap_class_StreamStat, 0};
static swig_type_info _swigt__p_pj__TimeVal = {"_p_pj__TimeVal", "pj::TimeVal *", 0, 0, (void*)&_wrap_class_TimeVal, 0};
static swig_type_info _swigt__p_pj__TimerEvent = {"_p_pj__TimerEvent", "pj::TimerEvent *", 0, 0, (void*)&_wrap_class_TimerEvent, 0};
static swig_type_info _swigt__p_pj__TlsConfig = {"_p_pj__TlsConfig", "pj::TlsConfig *", 0, 0, (void*)&_wrap_class_TlsConfig, 0};
static swig_type_info _swigt__p_pj__ToneDesc = {"_p_pj__ToneDesc", "pj::ToneDesc *", 0, 0, (void*)&_wrap_class_ToneDesc, 0};
static swig_type_info _swigt__p_pj__ToneDigit = {"_p_pj__ToneDigit", "pj::ToneDigit *", 0, 0, (void*)&_wrap_class_ToneDigit, 0};
static swig_type_info _swigt__p_pj__ToneDigitMapDigit = {"_p_pj__ToneDigitMapDigit", "pj::ToneDigitMapDigit *", 0, 0, (void*)&_wrap_class_ToneDigitMapDigit, 0};
static swig_type_info _swigt__p_pj__ToneGenerator = {"_p_pj__ToneGenerator", "pj::ToneGenerator *", 0, 0, (void*)&_wrap_class_ToneGenerator, 0};
static swig_type_info _swigt__p_pj__TransportConfig = {"_p_pj__TransportConfig", "pj::TransportConfig *", 0, 0, (void*)&_wrap_class_TransportConfig, 0};
static swig_type_info _swigt__p_pj__TransportInfo = {"_p_pj__TransportInfo", "pj::TransportInfo *", 0, 0, (void*)&_wrap_class_TransportInfo, 0};
static swig_type_info _swigt__p_pj__TsxStateEvent = {"_p_pj__TsxStateEvent", "pj::TsxStateEvent *", 0, 0, (void*)&_wrap_class_TsxStateEvent, 0};
static swig_type_info _swigt__p_pj__TxErrorEvent = {"_p_pj__TxErrorEvent", "pj::TxErrorEvent *", 0, 0, (void*)&_wrap_class_TxErrorEvent, 0};
static swig_type_info _swigt__p_pj__TxMsgEvent = {"_p_pj__TxMsgEvent", "pj::TxMsgEvent *", 0, 0, (void*)&_wrap_class_TxMsgEvent, 0};
static swig_type_info _swigt__p_pj__UaConfig = {"_p_pj__UaConfig", "pj::UaConfig *", 0, 0, (void*)&_wrap_class_UaConfig, 0};
static swig_type_info _swigt__p_pj__UserEvent = {"_p_pj__UserEvent", "pj::UserEvent *", 0, 0, (void*)&_wrap_class_UserEvent, 0};
static swig_type_info _swigt__p_pj__Version = {"_p_pj__Version", "pj::Version *", 0, 0, (void*)&_wrap_class_Version, 0};
static swig_type_info _swigt__p_pj_bool_t = {"_p_pj_bool_t", "pj_bool_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_qos_flag = {"_p_pj_qos_flag", "enum pj_qos_flag *|pj_qos_flag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_qos_params = {"_p_pj_qos_params", "pj_qos_params *", 0, 0, (void*)&_wrap_class_pj_qos_params, 0};
static swig_type_info _swigt__p_pj_qos_type = {"_p_pj_qos_type", "enum pj_qos_type *|pj_qos_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_qos_wmm_prio = {"_p_pj_qos_wmm_prio", "enum pj_qos_wmm_prio *|pj_qos_wmm_prio *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_ssize_t = {"_p_pj_ssize_t", "pj_ssize_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_ssl_cipher = {"_p_pj_ssl_cipher", "enum pj_ssl_cipher *|pj_ssl_cipher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_stun_nat_type = {"_p_pj_stun_nat_type", "enum pj_stun_nat_type *|pj_stun_nat_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pj_turn_tp_type = {"_p_pj_turn_tp_type", "enum pj_turn_tp_type *|pj_turn_tp_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_aud_dev_cap = {"_p_pjmedia_aud_dev_cap", "enum pjmedia_aud_dev_cap *|pjmedia_aud_dev_cap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_aud_dev_route = {"_p_pjmedia_aud_dev_route", "enum pjmedia_aud_dev_route *|pjmedia_aud_dev_route *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_dir = {"_p_pjmedia_dir", "enum pjmedia_dir *|pjmedia_dir *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_event_type = {"_p_pjmedia_event_type", "enum pjmedia_event_type *|pjmedia_event_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_format_id = {"_p_pjmedia_format_id", "enum pjmedia_format_id *|pjmedia_format_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_srtp_use = {"_p_pjmedia_srtp_use", "enum pjmedia_srtp_use *|pjmedia_srtp_use *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_tone_desc = {"_p_pjmedia_tone_desc", "pjmedia_tone_desc *", 0, 0, (void*)&_wrap_class_pjmedia_tone_desc, 0};
static swig_type_info _swigt__p_pjmedia_tone_digit = {"_p_pjmedia_tone_digit", "pjmedia_tone_digit *", 0, 0, (void*)&_wrap_class_pjmedia_tone_digit, 0};
static swig_type_info _swigt__p_pjmedia_tone_digit_map = {"_p_pjmedia_tone_digit_map", "pjmedia_tone_digit_map *", 0, 0, (void*)&_wrap_class_pjmedia_tone_digit_map, 0};
static swig_type_info _swigt__p_pjmedia_tp_proto = {"_p_pjmedia_tp_proto", "enum pjmedia_tp_proto *|pjmedia_tp_proto *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_type = {"_p_pjmedia_type", "enum pjmedia_type *|pjmedia_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjmedia_vid_stream_rc_method = {"_p_pjmedia_vid_stream_rc_method", "enum pjmedia_vid_stream_rc_method *|pjmedia_vid_stream_rc_method *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjrpid_activity = {"_p_pjrpid_activity", "enum pjrpid_activity *|pjrpid_activity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_cred_data_type = {"_p_pjsip_cred_data_type", "enum pjsip_cred_data_type *|pjsip_cred_data_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_dialog_cap_status = {"_p_pjsip_dialog_cap_status", "enum pjsip_dialog_cap_status *|pjsip_dialog_cap_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_event_id_e = {"_p_pjsip_event_id_e", "enum pjsip_event_id_e *|pjsip_event_id_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_evsub_state = {"_p_pjsip_evsub_state", "enum pjsip_evsub_state *|pjsip_evsub_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_hdr_e = {"_p_pjsip_hdr_e", "enum pjsip_hdr_e *|pjsip_hdr_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_inv_state = {"_p_pjsip_inv_state", "enum pjsip_inv_state *|pjsip_inv_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_redirect_op = {"_p_pjsip_redirect_op", "enum pjsip_redirect_op *|pjsip_redirect_op *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_role_e = {"_p_pjsip_role_e", "enum pjsip_role_e *|pjsip_role_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_ssl_method = {"_p_pjsip_ssl_method", "enum pjsip_ssl_method *|pjsip_ssl_method *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_status_code = {"_p_pjsip_status_code", "enum pjsip_status_code *|pjsip_status_code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_transport_state = {"_p_pjsip_transport_state", "enum pjsip_transport_state *|pjsip_transport_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_transport_type_e = {"_p_pjsip_transport_type_e", "enum pjsip_transport_type_e *|pjsip_transport_type_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsip_tsx_state_e = {"_p_pjsip_tsx_state_e", "enum pjsip_tsx_state_e *|pjsip_tsx_state_e *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_100rel_use = {"_p_pjsua_100rel_use", "enum pjsua_100rel_use *|pjsua_100rel_use *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_buddy_status = {"_p_pjsua_buddy_status", "enum pjsua_buddy_status *|pjsua_buddy_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_call_flag = {"_p_pjsua_call_flag", "enum pjsua_call_flag *|pjsua_call_flag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_call_hold_type = {"_p_pjsua_call_hold_type", "enum pjsua_call_hold_type *|pjsua_call_hold_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_call_media_status = {"_p_pjsua_call_media_status", "enum pjsua_call_media_status *|pjsua_call_media_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_call_vid_strm_op = {"_p_pjsua_call_vid_strm_op", "enum pjsua_call_vid_strm_op *|pjsua_call_vid_strm_op *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_create_media_transport_flag = {"_p_pjsua_create_media_transport_flag", "enum pjsua_create_media_transport_flag *|pjsua_create_media_transport_flag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_destroy_flag = {"_p_pjsua_destroy_flag", "enum pjsua_destroy_flag *|pjsua_destroy_flag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_ipv6_use = {"_p_pjsua_ipv6_use", "enum pjsua_ipv6_use *|pjsua_ipv6_use *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_med_tp_st = {"_p_pjsua_med_tp_st", "enum pjsua_med_tp_st *|pjsua_med_tp_st *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_sip_timer_use = {"_p_pjsua_sip_timer_use", "enum pjsua_sip_timer_use *|pjsua_sip_timer_use *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_state = {"_p_pjsua_state", "enum pjsua_state *|pjsua_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_stun_use = {"_p_pjsua_stun_use", "enum pjsua_stun_use *|pjsua_stun_use *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pjsua_vid_req_keyframe_method = {"_p_pjsua_vid_req_keyframe_method", "enum pjsua_vid_req_keyframe_method *|pjsua_vid_req_keyframe_method *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "pj::SocketAddress *|std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__vectorT_int_t = {"_p_std__vectorT_int_t", "std::vector< int > *|pj::IntVector *", 0, 0, (void*)&_wrap_class_IntVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__AudioDevInfo_p_t = {"_p_std__vectorT_pj__AudioDevInfo_p_t", "std::vector< pj::AudioDevInfo * > *|pj::AudioDevInfoVector *", 0, 0, (void*)&_wrap_class_AudioDevInfoVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__AudioMedia_p_t = {"_p_std__vectorT_pj__AudioMedia_p_t", "std::vector< pj::AudioMedia * > *|pj::AudioMediaVector *", 0, 0, (void*)&_wrap_class_AudioMediaVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__AuthCredInfo_t = {"_p_std__vectorT_pj__AuthCredInfo_t", "std::vector< pj::AuthCredInfo > *|pj::AuthCredInfoVector *", 0, 0, (void*)&_wrap_class_AuthCredInfoVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__Buddy_p_t = {"_p_std__vectorT_pj__Buddy_p_t", "std::vector< pj::Buddy * > *|pj::BuddyVector *", 0, 0, (void*)&_wrap_class_BuddyVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__CallMediaInfo_t = {"_p_std__vectorT_pj__CallMediaInfo_t", "std::vector< pj::CallMediaInfo > *|pj::CallMediaInfoVector *", 0, 0, (void*)&_wrap_class_CallMediaInfoVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__CodecInfo_p_t = {"_p_std__vectorT_pj__CodecInfo_p_t", "std::vector< pj::CodecInfo * > *|pj::CodecInfoVector *", 0, 0, (void*)&_wrap_class_CodecInfoVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__MediaFormat_p_t = {"_p_std__vectorT_pj__MediaFormat_p_t", "std::vector< pj::MediaFormat * > *|pj::MediaFormatVector *", 0, 0, (void*)&_wrap_class_MediaFormatVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__SipHeader_t = {"_p_std__vectorT_pj__SipHeader_t", "std::vector< pj::SipHeader > *|pj::SipHeaderVector *", 0, 0, (void*)&_wrap_class_SipHeaderVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__SipMultipartPart_t = {"_p_std__vectorT_pj__SipMultipartPart_t", "std::vector< pj::SipMultipartPart > *|pj::SipMultipartPartVector *", 0, 0, (void*)&_wrap_class_SipMultipartPartVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__ToneDesc_t = {"_p_std__vectorT_pj__ToneDesc_t", "std::vector< pj::ToneDesc > *|pj::ToneDescVector *", 0, 0, (void*)&_wrap_class_ToneDescVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__ToneDigitMapDigit_t = {"_p_std__vectorT_pj__ToneDigitMapDigit_t", "std::vector< pj::ToneDigitMapDigit > *|pj::ToneDigitMapVector *", 0, 0, (void*)&_wrap_class_ToneDigitMapVector, 0};
static swig_type_info _swigt__p_std__vectorT_pj__ToneDigit_t = {"_p_std__vectorT_pj__ToneDigit_t", "std::vector< pj::ToneDigit > *|pj::ToneDigitVector *", 0, 0, (void*)&_wrap_class_ToneDigitVector, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|pj::StringVector *", 0, 0, (void*)&_wrap_class_StringVector, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|pj_uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "pj_uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|pj_uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "pj::CodecParam|pj::MediaStream|pj::MediaPort|pj::MediaTransport|pj::TransportHandle|pj::Token|void *|pj::TimerEntry|pj::GenericData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__pj__Error = {"_pj__Error", "pj::Error", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_int,
  &_swigt__p_p_void,
  &_swigt__p_pj__Account,
  &_swigt__p_pj__AccountCallConfig,
  &_swigt__p_pj__AccountConfig,
  &_swigt__p_pj__AccountInfo,
  &_swigt__p_pj__AccountMediaConfig,
  &_swigt__p_pj__AccountMwiConfig,
  &_swigt__p_pj__AccountNatConfig,
  &_swigt__p_pj__AccountPresConfig,
  &_swigt__p_pj__AccountRegConfig,
  &_swigt__p_pj__AccountSipConfig,
  &_swigt__p_pj__AccountVideoConfig,
  &_swigt__p_pj__AudDevManager,
  &_swigt__p_pj__AudioDevInfo,
  &_swigt__p_pj__AudioMedia,
  &_swigt__p_pj__AudioMediaPlayer,
  &_swigt__p_pj__AudioMediaPlayerInfo,
  &_swigt__p_pj__AudioMediaRecorder,
  &_swigt__p_pj__AuthCredInfo,
  &_swigt__p_pj__Buddy,
  &_swigt__p_pj__BuddyConfig,
  &_swigt__p_pj__BuddyInfo,
  &_swigt__p_pj__Call,
  &_swigt__p_pj__CallInfo,
  &_swigt__p_pj__CallMediaInfo,
  &_swigt__p_pj__CallOpParam,
  &_swigt__p_pj__CallSendRequestParam,
  &_swigt__p_pj__CallSetting,
  &_swigt__p_pj__CallVidSetStreamParam,
  &_swigt__p_pj__CodecInfo,
  &_swigt__p_pj__ConfPortInfo,
  &_swigt__p_pj__ContainerNode,
  &_swigt__p_pj__Endpoint,
  &_swigt__p_pj__EpConfig,
  &_swigt__p_pj__Error,
  &_swigt__p_pj__FindBuddyMatch,
  &_swigt__p_pj__JbufState,
  &_swigt__p_pj__JsonDocument,
  &_swigt__p_pj__LogConfig,
  &_swigt__p_pj__LogEntry,
  &_swigt__p_pj__LogWriter,
  &_swigt__p_pj__MathStat,
  &_swigt__p_pj__Media,
  &_swigt__p_pj__MediaConfig,
  &_swigt__p_pj__MediaEvent,
  &_swigt__p_pj__MediaFmtChangedEvent,
  &_swigt__p_pj__MediaFormat,
  &_swigt__p_pj__MediaFormatAudio,
  &_swigt__p_pj__MediaFormatVideo,
  &_swigt__p_pj__MediaTransportInfo,
  &_swigt__p_pj__OnCallMediaEventParam,
  &_swigt__p_pj__OnCallMediaStateParam,
  &_swigt__p_pj__OnCallMediaTransportStateParam,
  &_swigt__p_pj__OnCallRedirectedParam,
  &_swigt__p_pj__OnCallReplaceRequestParam,
  &_swigt__p_pj__OnCallReplacedParam,
  &_swigt__p_pj__OnCallRxOfferParam,
  &_swigt__p_pj__OnCallSdpCreatedParam,
  &_swigt__p_pj__OnCallStateParam,
  &_swigt__p_pj__OnCallTransferRequestParam,
  &_swigt__p_pj__OnCallTransferStatusParam,
  &_swigt__p_pj__OnCallTsxStateParam,
  &_swigt__p_pj__OnCreateMediaTransportParam,
  &_swigt__p_pj__OnDtmfDigitParam,
  &_swigt__p_pj__OnIncomingCallParam,
  &_swigt__p_pj__OnIncomingSubscribeParam,
  &_swigt__p_pj__OnInstantMessageParam,
  &_swigt__p_pj__OnInstantMessageStatusParam,
  &_swigt__p_pj__OnMwiInfoParam,
  &_swigt__p_pj__OnNatCheckStunServersCompleteParam,
  &_swigt__p_pj__OnNatDetectionCompleteParam,
  &_swigt__p_pj__OnRegStartedParam,
  &_swigt__p_pj__OnRegStateParam,
  &_swigt__p_pj__OnSelectAccountParam,
  &_swigt__p_pj__OnStreamCreatedParam,
  &_swigt__p_pj__OnStreamDestroyedParam,
  &_swigt__p_pj__OnTimerParam,
  &_swigt__p_pj__OnTransportStateParam,
  &_swigt__p_pj__OnTypingIndicationParam,
  &_swigt__p_pj__PendingJob,
  &_swigt__p_pj__PersistentDocument,
  &_swigt__p_pj__PersistentObject,
  &_swigt__p_pj__PresNotifyParam,
  &_swigt__p_pj__PresenceStatus,
  &_swigt__p_pj__RtcpSdes,
  &_swigt__p_pj__RtcpStat,
  &_swigt__p_pj__RtcpStreamStat,
  &_swigt__p_pj__RxMsgEvent,
  &_swigt__p_pj__SdpSession,
  &_swigt__p_pj__SendInstantMessageParam,
  &_swigt__p_pj__SendTypingIndicationParam,
  &_swigt__p_pj__SipEvent,
  &_swigt__p_pj__SipHeader,
  &_swigt__p_pj__SipMediaType,
  &_swigt__p_pj__SipMultipartPart,
  &_swigt__p_pj__SipRxData,
  &_swigt__p_pj__SipTransaction,
  &_swigt__p_pj__SipTxData,
  &_swigt__p_pj__SipTxOption,
  &_swigt__p_pj__StreamInfo,
  &_swigt__p_pj__StreamStat,
  &_swigt__p_pj__TimeVal,
  &_swigt__p_pj__TimerEvent,
  &_swigt__p_pj__TlsConfig,
  &_swigt__p_pj__ToneDesc,
  &_swigt__p_pj__ToneDigit,
  &_swigt__p_pj__ToneDigitMapDigit,
  &_swigt__p_pj__ToneGenerator,
  &_swigt__p_pj__TransportConfig,
  &_swigt__p_pj__TransportInfo,
  &_swigt__p_pj__TsxStateEvent,
  &_swigt__p_pj__TxErrorEvent,
  &_swigt__p_pj__TxMsgEvent,
  &_swigt__p_pj__UaConfig,
  &_swigt__p_pj__UserEvent,
  &_swigt__p_pj__Version,
  &_swigt__p_pj_bool_t,
  &_swigt__p_pj_qos_flag,
  &_swigt__p_pj_qos_params,
  &_swigt__p_pj_qos_type,
  &_swigt__p_pj_qos_wmm_prio,
  &_swigt__p_pj_ssize_t,
  &_swigt__p_pj_ssl_cipher,
  &_swigt__p_pj_stun_nat_type,
  &_swigt__p_pj_turn_tp_type,
  &_swigt__p_pjmedia_aud_dev_cap,
  &_swigt__p_pjmedia_aud_dev_route,
  &_swigt__p_pjmedia_dir,
  &_swigt__p_pjmedia_event_type,
  &_swigt__p_pjmedia_format_id,
  &_swigt__p_pjmedia_srtp_use,
  &_swigt__p_pjmedia_tone_desc,
  &_swigt__p_pjmedia_tone_digit,
  &_swigt__p_pjmedia_tone_digit_map,
  &_swigt__p_pjmedia_tp_proto,
  &_swigt__p_pjmedia_type,
  &_swigt__p_pjmedia_vid_stream_rc_method,
  &_swigt__p_pjrpid_activity,
  &_swigt__p_pjsip_cred_data_type,
  &_swigt__p_pjsip_dialog_cap_status,
  &_swigt__p_pjsip_event_id_e,
  &_swigt__p_pjsip_evsub_state,
  &_swigt__p_pjsip_hdr_e,
  &_swigt__p_pjsip_inv_state,
  &_swigt__p_pjsip_redirect_op,
  &_swigt__p_pjsip_role_e,
  &_swigt__p_pjsip_ssl_method,
  &_swigt__p_pjsip_status_code,
  &_swigt__p_pjsip_transport_state,
  &_swigt__p_pjsip_transport_type_e,
  &_swigt__p_pjsip_tsx_state_e,
  &_swigt__p_pjsua_100rel_use,
  &_swigt__p_pjsua_buddy_status,
  &_swigt__p_pjsua_call_flag,
  &_swigt__p_pjsua_call_hold_type,
  &_swigt__p_pjsua_call_media_status,
  &_swigt__p_pjsua_call_vid_strm_op,
  &_swigt__p_pjsua_create_media_transport_flag,
  &_swigt__p_pjsua_destroy_flag,
  &_swigt__p_pjsua_ipv6_use,
  &_swigt__p_pjsua_med_tp_st,
  &_swigt__p_pjsua_sip_timer_use,
  &_swigt__p_pjsua_state,
  &_swigt__p_pjsua_stun_use,
  &_swigt__p_pjsua_vid_req_keyframe_method,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_int_t,
  &_swigt__p_std__vectorT_pj__AudioDevInfo_p_t,
  &_swigt__p_std__vectorT_pj__AudioMedia_p_t,
  &_swigt__p_std__vectorT_pj__AuthCredInfo_t,
  &_swigt__p_std__vectorT_pj__Buddy_p_t,
  &_swigt__p_std__vectorT_pj__CallMediaInfo_t,
  &_swigt__p_std__vectorT_pj__CodecInfo_p_t,
  &_swigt__p_std__vectorT_pj__MediaFormat_p_t,
  &_swigt__p_std__vectorT_pj__SipHeader_t,
  &_swigt__p_std__vectorT_pj__SipMultipartPart_t,
  &_swigt__p_std__vectorT_pj__ToneDesc_t,
  &_swigt__p_std__vectorT_pj__ToneDigitMapDigit_t,
  &_swigt__p_std__vectorT_pj__ToneDigit_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__pj__Error,
};

static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Account[] = {  {&_swigt__p_pj__Account, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountCallConfig[] = {  {&_swigt__p_pj__AccountCallConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountConfig[] = {  {&_swigt__p_pj__AccountConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountInfo[] = {  {&_swigt__p_pj__AccountInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountMediaConfig[] = {  {&_swigt__p_pj__AccountMediaConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountMwiConfig[] = {  {&_swigt__p_pj__AccountMwiConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountNatConfig[] = {  {&_swigt__p_pj__AccountNatConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountPresConfig[] = {  {&_swigt__p_pj__AccountPresConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountRegConfig[] = {  {&_swigt__p_pj__AccountRegConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountSipConfig[] = {  {&_swigt__p_pj__AccountSipConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AccountVideoConfig[] = {  {&_swigt__p_pj__AccountVideoConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudDevManager[] = {  {&_swigt__p_pj__AudDevManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudioDevInfo[] = {  {&_swigt__p_pj__AudioDevInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudioMedia[] = {  {&_swigt__p_pj__AudioMedia, 0, 0, 0},  {&_swigt__p_pj__AudioMediaRecorder, _p_pj__AudioMediaRecorderTo_p_pj__AudioMedia, 0, 0},  {&_swigt__p_pj__ToneGenerator, _p_pj__ToneGeneratorTo_p_pj__AudioMedia, 0, 0},  {&_swigt__p_pj__AudioMediaPlayer, _p_pj__AudioMediaPlayerTo_p_pj__AudioMedia, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudioMediaPlayer[] = {  {&_swigt__p_pj__AudioMediaPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudioMediaPlayerInfo[] = {  {&_swigt__p_pj__AudioMediaPlayerInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AudioMediaRecorder[] = {  {&_swigt__p_pj__AudioMediaRecorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__AuthCredInfo[] = {  {&_swigt__p_pj__AuthCredInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Buddy[] = {  {&_swigt__p_pj__Buddy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__BuddyConfig[] = {  {&_swigt__p_pj__BuddyConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__BuddyInfo[] = {  {&_swigt__p_pj__BuddyInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Call[] = {  {&_swigt__p_pj__Call, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallInfo[] = {  {&_swigt__p_pj__CallInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallMediaInfo[] = {  {&_swigt__p_pj__CallMediaInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallOpParam[] = {  {&_swigt__p_pj__CallOpParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallSendRequestParam[] = {  {&_swigt__p_pj__CallSendRequestParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallSetting[] = {  {&_swigt__p_pj__CallSetting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CallVidSetStreamParam[] = {  {&_swigt__p_pj__CallVidSetStreamParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__CodecInfo[] = {  {&_swigt__p_pj__CodecInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ConfPortInfo[] = {  {&_swigt__p_pj__ConfPortInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ContainerNode[] = {  {&_swigt__p_pj__ContainerNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Endpoint[] = {  {&_swigt__p_pj__Endpoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__EpConfig[] = {  {&_swigt__p_pj__EpConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Error[] = {  {&_swigt__p_pj__Error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__FindBuddyMatch[] = {  {&_swigt__p_pj__FindBuddyMatch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__JbufState[] = {  {&_swigt__p_pj__JbufState, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__JsonDocument[] = {  {&_swigt__p_pj__JsonDocument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__LogConfig[] = {  {&_swigt__p_pj__LogConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__LogEntry[] = {  {&_swigt__p_pj__LogEntry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__LogWriter[] = {  {&_swigt__p_pj__LogWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MathStat[] = {  {&_swigt__p_pj__MathStat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Media[] = {  {&_swigt__p_pj__AudioMedia, _p_pj__AudioMediaTo_p_pj__Media, 0, 0},  {&_swigt__p_pj__AudioMediaRecorder, _p_pj__AudioMediaRecorderTo_p_pj__Media, 0, 0},  {&_swigt__p_pj__ToneGenerator, _p_pj__ToneGeneratorTo_p_pj__Media, 0, 0},  {&_swigt__p_pj__Media, 0, 0, 0},  {&_swigt__p_pj__AudioMediaPlayer, _p_pj__AudioMediaPlayerTo_p_pj__Media, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaConfig[] = {  {&_swigt__p_pj__MediaConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaEvent[] = {  {&_swigt__p_pj__MediaEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaFmtChangedEvent[] = {  {&_swigt__p_pj__MediaFmtChangedEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaFormat[] = {  {&_swigt__p_pj__MediaFormatAudio, _p_pj__MediaFormatAudioTo_p_pj__MediaFormat, 0, 0},  {&_swigt__p_pj__MediaFormatVideo, _p_pj__MediaFormatVideoTo_p_pj__MediaFormat, 0, 0},  {&_swigt__p_pj__MediaFormat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaFormatAudio[] = {  {&_swigt__p_pj__MediaFormatAudio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaFormatVideo[] = {  {&_swigt__p_pj__MediaFormatVideo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__MediaTransportInfo[] = {  {&_swigt__p_pj__MediaTransportInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallMediaEventParam[] = {  {&_swigt__p_pj__OnCallMediaEventParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallMediaStateParam[] = {  {&_swigt__p_pj__OnCallMediaStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallMediaTransportStateParam[] = {  {&_swigt__p_pj__OnCallMediaTransportStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallRedirectedParam[] = {  {&_swigt__p_pj__OnCallRedirectedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallReplaceRequestParam[] = {  {&_swigt__p_pj__OnCallReplaceRequestParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallReplacedParam[] = {  {&_swigt__p_pj__OnCallReplacedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallRxOfferParam[] = {  {&_swigt__p_pj__OnCallRxOfferParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallSdpCreatedParam[] = {  {&_swigt__p_pj__OnCallSdpCreatedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallStateParam[] = {  {&_swigt__p_pj__OnCallStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallTransferRequestParam[] = {  {&_swigt__p_pj__OnCallTransferRequestParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallTransferStatusParam[] = {  {&_swigt__p_pj__OnCallTransferStatusParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCallTsxStateParam[] = {  {&_swigt__p_pj__OnCallTsxStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnCreateMediaTransportParam[] = {  {&_swigt__p_pj__OnCreateMediaTransportParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnDtmfDigitParam[] = {  {&_swigt__p_pj__OnDtmfDigitParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnIncomingCallParam[] = {  {&_swigt__p_pj__OnIncomingCallParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnIncomingSubscribeParam[] = {  {&_swigt__p_pj__OnIncomingSubscribeParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnInstantMessageParam[] = {  {&_swigt__p_pj__OnInstantMessageParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnInstantMessageStatusParam[] = {  {&_swigt__p_pj__OnInstantMessageStatusParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnMwiInfoParam[] = {  {&_swigt__p_pj__OnMwiInfoParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnNatCheckStunServersCompleteParam[] = {  {&_swigt__p_pj__OnNatCheckStunServersCompleteParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnNatDetectionCompleteParam[] = {  {&_swigt__p_pj__OnNatDetectionCompleteParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnRegStartedParam[] = {  {&_swigt__p_pj__OnRegStartedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnRegStateParam[] = {  {&_swigt__p_pj__OnRegStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnSelectAccountParam[] = {  {&_swigt__p_pj__OnSelectAccountParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnStreamCreatedParam[] = {  {&_swigt__p_pj__OnStreamCreatedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnStreamDestroyedParam[] = {  {&_swigt__p_pj__OnStreamDestroyedParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnTimerParam[] = {  {&_swigt__p_pj__OnTimerParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnTransportStateParam[] = {  {&_swigt__p_pj__OnTransportStateParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__OnTypingIndicationParam[] = {  {&_swigt__p_pj__OnTypingIndicationParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__PendingJob[] = {  {&_swigt__p_pj__PendingJob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__PersistentDocument[] = {  {&_swigt__p_pj__PersistentDocument, 0, 0, 0},  {&_swigt__p_pj__JsonDocument, _p_pj__JsonDocumentTo_p_pj__PersistentDocument, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__PersistentObject[] = {  {&_swigt__p_pj__PersistentObject, 0, 0, 0},  {&_swigt__p_pj__AuthCredInfo, _p_pj__AuthCredInfoTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__UaConfig, _p_pj__UaConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountVideoConfig, _p_pj__AccountVideoConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountMediaConfig, _p_pj__AccountMediaConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountMwiConfig, _p_pj__AccountMwiConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountPresConfig, _p_pj__AccountPresConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountRegConfig, _p_pj__AccountRegConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__BuddyConfig, _p_pj__BuddyConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__TlsConfig, _p_pj__TlsConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__LogConfig, _p_pj__LogConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__MediaConfig, _p_pj__MediaConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountConfig, _p_pj__AccountConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountNatConfig, _p_pj__AccountNatConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountCallConfig, _p_pj__AccountCallConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__AccountSipConfig, _p_pj__AccountSipConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__TransportConfig, _p_pj__TransportConfigTo_p_pj__PersistentObject, 0, 0},  {&_swigt__p_pj__EpConfig, _p_pj__EpConfigTo_p_pj__PersistentObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__PresNotifyParam[] = {  {&_swigt__p_pj__PresNotifyParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__PresenceStatus[] = {  {&_swigt__p_pj__PresenceStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__RtcpSdes[] = {  {&_swigt__p_pj__RtcpSdes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__RtcpStat[] = {  {&_swigt__p_pj__RtcpStat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__RtcpStreamStat[] = {  {&_swigt__p_pj__RtcpStreamStat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__RxMsgEvent[] = {  {&_swigt__p_pj__RxMsgEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SdpSession[] = {  {&_swigt__p_pj__SdpSession, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SendInstantMessageParam[] = {  {&_swigt__p_pj__SendInstantMessageParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SendTypingIndicationParam[] = {  {&_swigt__p_pj__SendTypingIndicationParam, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipEvent[] = {  {&_swigt__p_pj__SipEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipHeader[] = {  {&_swigt__p_pj__SipHeader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipMediaType[] = {  {&_swigt__p_pj__SipMediaType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipMultipartPart[] = {  {&_swigt__p_pj__SipMultipartPart, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipRxData[] = {  {&_swigt__p_pj__SipRxData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipTransaction[] = {  {&_swigt__p_pj__SipTransaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipTxData[] = {  {&_swigt__p_pj__SipTxData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__SipTxOption[] = {  {&_swigt__p_pj__SipTxOption, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__StreamInfo[] = {  {&_swigt__p_pj__StreamInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__StreamStat[] = {  {&_swigt__p_pj__StreamStat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TimeVal[] = {  {&_swigt__p_pj__TimeVal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TimerEvent[] = {  {&_swigt__p_pj__TimerEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TlsConfig[] = {  {&_swigt__p_pj__TlsConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ToneDesc[] = {  {&_swigt__p_pj__ToneDesc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ToneDigit[] = {  {&_swigt__p_pj__ToneDigit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ToneDigitMapDigit[] = {  {&_swigt__p_pj__ToneDigitMapDigit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__ToneGenerator[] = {  {&_swigt__p_pj__ToneGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TransportConfig[] = {  {&_swigt__p_pj__TransportConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TransportInfo[] = {  {&_swigt__p_pj__TransportInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TsxStateEvent[] = {  {&_swigt__p_pj__TsxStateEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TxErrorEvent[] = {  {&_swigt__p_pj__TxErrorEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__TxMsgEvent[] = {  {&_swigt__p_pj__TxMsgEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__UaConfig[] = {  {&_swigt__p_pj__UaConfig, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__UserEvent[] = {  {&_swigt__p_pj__UserEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj__Version[] = {  {&_swigt__p_pj__Version, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_bool_t[] = {  {&_swigt__p_pj_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_qos_flag[] = {  {&_swigt__p_pj_qos_flag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_qos_params[] = {  {&_swigt__p_pj_qos_params, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_qos_type[] = {  {&_swigt__p_pj_qos_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_qos_wmm_prio[] = {  {&_swigt__p_pj_qos_wmm_prio, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_ssize_t[] = {  {&_swigt__p_pj_ssize_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_ssl_cipher[] = {  {&_swigt__p_pj_ssl_cipher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_stun_nat_type[] = {  {&_swigt__p_pj_stun_nat_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pj_turn_tp_type[] = {  {&_swigt__p_pj_turn_tp_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_aud_dev_cap[] = {  {&_swigt__p_pjmedia_aud_dev_cap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_aud_dev_route[] = {  {&_swigt__p_pjmedia_aud_dev_route, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_dir[] = {  {&_swigt__p_pjmedia_dir, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_event_type[] = {  {&_swigt__p_pjmedia_event_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_format_id[] = {  {&_swigt__p_pjmedia_format_id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_srtp_use[] = {  {&_swigt__p_pjmedia_srtp_use, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_tone_desc[] = {  {&_swigt__p_pj__ToneDesc, _p_pj__ToneDescTo_p_pjmedia_tone_desc, 0, 0},  {&_swigt__p_pjmedia_tone_desc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_tone_digit[] = {  {&_swigt__p_pj__ToneDigit, _p_pj__ToneDigitTo_p_pjmedia_tone_digit, 0, 0},  {&_swigt__p_pjmedia_tone_digit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_tone_digit_map[] = {  {&_swigt__p_pjmedia_tone_digit_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_tp_proto[] = {  {&_swigt__p_pjmedia_tp_proto, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_type[] = {  {&_swigt__p_pjmedia_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjmedia_vid_stream_rc_method[] = {  {&_swigt__p_pjmedia_vid_stream_rc_method, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjrpid_activity[] = {  {&_swigt__p_pjrpid_activity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_cred_data_type[] = {  {&_swigt__p_pjsip_cred_data_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_dialog_cap_status[] = {  {&_swigt__p_pjsip_dialog_cap_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_event_id_e[] = {  {&_swigt__p_pjsip_event_id_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_evsub_state[] = {  {&_swigt__p_pjsip_evsub_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_hdr_e[] = {  {&_swigt__p_pjsip_hdr_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_inv_state[] = {  {&_swigt__p_pjsip_inv_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_redirect_op[] = {  {&_swigt__p_pjsip_redirect_op, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_role_e[] = {  {&_swigt__p_pjsip_role_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_ssl_method[] = {  {&_swigt__p_pjsip_ssl_method, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_status_code[] = {  {&_swigt__p_pjsip_status_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_transport_state[] = {  {&_swigt__p_pjsip_transport_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_transport_type_e[] = {  {&_swigt__p_pjsip_transport_type_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsip_tsx_state_e[] = {  {&_swigt__p_pjsip_tsx_state_e, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_100rel_use[] = {  {&_swigt__p_pjsua_100rel_use, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_buddy_status[] = {  {&_swigt__p_pjsua_buddy_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_call_flag[] = {  {&_swigt__p_pjsua_call_flag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_call_hold_type[] = {  {&_swigt__p_pjsua_call_hold_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_call_media_status[] = {  {&_swigt__p_pjsua_call_media_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_call_vid_strm_op[] = {  {&_swigt__p_pjsua_call_vid_strm_op, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_create_media_transport_flag[] = {  {&_swigt__p_pjsua_create_media_transport_flag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_destroy_flag[] = {  {&_swigt__p_pjsua_destroy_flag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_ipv6_use[] = {  {&_swigt__p_pjsua_ipv6_use, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_med_tp_st[] = {  {&_swigt__p_pjsua_med_tp_st, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_sip_timer_use[] = {  {&_swigt__p_pjsua_sip_timer_use, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_state[] = {  {&_swigt__p_pjsua_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_stun_use[] = {  {&_swigt__p_pjsua_stun_use, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pjsua_vid_req_keyframe_method[] = {  {&_swigt__p_pjsua_vid_req_keyframe_method, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_t[] = {  {&_swigt__p_std__vectorT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__AudioDevInfo_p_t[] = {  {&_swigt__p_std__vectorT_pj__AudioDevInfo_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__AudioMedia_p_t[] = {  {&_swigt__p_std__vectorT_pj__AudioMedia_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__AuthCredInfo_t[] = {  {&_swigt__p_std__vectorT_pj__AuthCredInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__Buddy_p_t[] = {  {&_swigt__p_std__vectorT_pj__Buddy_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__CallMediaInfo_t[] = {  {&_swigt__p_std__vectorT_pj__CallMediaInfo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__CodecInfo_p_t[] = {  {&_swigt__p_std__vectorT_pj__CodecInfo_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__MediaFormat_p_t[] = {  {&_swigt__p_std__vectorT_pj__MediaFormat_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__SipHeader_t[] = {  {&_swigt__p_std__vectorT_pj__SipHeader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__SipMultipartPart_t[] = {  {&_swigt__p_std__vectorT_pj__SipMultipartPart_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__ToneDesc_t[] = {  {&_swigt__p_std__vectorT_pj__ToneDesc_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__ToneDigitMapDigit_t[] = {  {&_swigt__p_std__vectorT_pj__ToneDigitMapDigit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_pj__ToneDigit_t[] = {  {&_swigt__p_std__vectorT_pj__ToneDigit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__pj__Error[] = {  {&_swigt__pj__Error, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_int,
  _swigc__p_p_void,
  _swigc__p_pj__Account,
  _swigc__p_pj__AccountCallConfig,
  _swigc__p_pj__AccountConfig,
  _swigc__p_pj__AccountInfo,
  _swigc__p_pj__AccountMediaConfig,
  _swigc__p_pj__AccountMwiConfig,
  _swigc__p_pj__AccountNatConfig,
  _swigc__p_pj__AccountPresConfig,
  _swigc__p_pj__AccountRegConfig,
  _swigc__p_pj__AccountSipConfig,
  _swigc__p_pj__AccountVideoConfig,
  _swigc__p_pj__AudDevManager,
  _swigc__p_pj__AudioDevInfo,
  _swigc__p_pj__AudioMedia,
  _swigc__p_pj__AudioMediaPlayer,
  _swigc__p_pj__AudioMediaPlayerInfo,
  _swigc__p_pj__AudioMediaRecorder,
  _swigc__p_pj__AuthCredInfo,
  _swigc__p_pj__Buddy,
  _swigc__p_pj__BuddyConfig,
  _swigc__p_pj__BuddyInfo,
  _swigc__p_pj__Call,
  _swigc__p_pj__CallInfo,
  _swigc__p_pj__CallMediaInfo,
  _swigc__p_pj__CallOpParam,
  _swigc__p_pj__CallSendRequestParam,
  _swigc__p_pj__CallSetting,
  _swigc__p_pj__CallVidSetStreamParam,
  _swigc__p_pj__CodecInfo,
  _swigc__p_pj__ConfPortInfo,
  _swigc__p_pj__ContainerNode,
  _swigc__p_pj__Endpoint,
  _swigc__p_pj__EpConfig,
  _swigc__p_pj__Error,
  _swigc__p_pj__FindBuddyMatch,
  _swigc__p_pj__JbufState,
  _swigc__p_pj__JsonDocument,
  _swigc__p_pj__LogConfig,
  _swigc__p_pj__LogEntry,
  _swigc__p_pj__LogWriter,
  _swigc__p_pj__MathStat,
  _swigc__p_pj__Media,
  _swigc__p_pj__MediaConfig,
  _swigc__p_pj__MediaEvent,
  _swigc__p_pj__MediaFmtChangedEvent,
  _swigc__p_pj__MediaFormat,
  _swigc__p_pj__MediaFormatAudio,
  _swigc__p_pj__MediaFormatVideo,
  _swigc__p_pj__MediaTransportInfo,
  _swigc__p_pj__OnCallMediaEventParam,
  _swigc__p_pj__OnCallMediaStateParam,
  _swigc__p_pj__OnCallMediaTransportStateParam,
  _swigc__p_pj__OnCallRedirectedParam,
  _swigc__p_pj__OnCallReplaceRequestParam,
  _swigc__p_pj__OnCallReplacedParam,
  _swigc__p_pj__OnCallRxOfferParam,
  _swigc__p_pj__OnCallSdpCreatedParam,
  _swigc__p_pj__OnCallStateParam,
  _swigc__p_pj__OnCallTransferRequestParam,
  _swigc__p_pj__OnCallTransferStatusParam,
  _swigc__p_pj__OnCallTsxStateParam,
  _swigc__p_pj__OnCreateMediaTransportParam,
  _swigc__p_pj__OnDtmfDigitParam,
  _swigc__p_pj__OnIncomingCallParam,
  _swigc__p_pj__OnIncomingSubscribeParam,
  _swigc__p_pj__OnInstantMessageParam,
  _swigc__p_pj__OnInstantMessageStatusParam,
  _swigc__p_pj__OnMwiInfoParam,
  _swigc__p_pj__OnNatCheckStunServersCompleteParam,
  _swigc__p_pj__OnNatDetectionCompleteParam,
  _swigc__p_pj__OnRegStartedParam,
  _swigc__p_pj__OnRegStateParam,
  _swigc__p_pj__OnSelectAccountParam,
  _swigc__p_pj__OnStreamCreatedParam,
  _swigc__p_pj__OnStreamDestroyedParam,
  _swigc__p_pj__OnTimerParam,
  _swigc__p_pj__OnTransportStateParam,
  _swigc__p_pj__OnTypingIndicationParam,
  _swigc__p_pj__PendingJob,
  _swigc__p_pj__PersistentDocument,
  _swigc__p_pj__PersistentObject,
  _swigc__p_pj__PresNotifyParam,
  _swigc__p_pj__PresenceStatus,
  _swigc__p_pj__RtcpSdes,
  _swigc__p_pj__RtcpStat,
  _swigc__p_pj__RtcpStreamStat,
  _swigc__p_pj__RxMsgEvent,
  _swigc__p_pj__SdpSession,
  _swigc__p_pj__SendInstantMessageParam,
  _swigc__p_pj__SendTypingIndicationParam,
  _swigc__p_pj__SipEvent,
  _swigc__p_pj__SipHeader,
  _swigc__p_pj__SipMediaType,
  _swigc__p_pj__SipMultipartPart,
  _swigc__p_pj__SipRxData,
  _swigc__p_pj__SipTransaction,
  _swigc__p_pj__SipTxData,
  _swigc__p_pj__SipTxOption,
  _swigc__p_pj__StreamInfo,
  _swigc__p_pj__StreamStat,
  _swigc__p_pj__TimeVal,
  _swigc__p_pj__TimerEvent,
  _swigc__p_pj__TlsConfig,
  _swigc__p_pj__ToneDesc,
  _swigc__p_pj__ToneDigit,
  _swigc__p_pj__ToneDigitMapDigit,
  _swigc__p_pj__ToneGenerator,
  _swigc__p_pj__TransportConfig,
  _swigc__p_pj__TransportInfo,
  _swigc__p_pj__TsxStateEvent,
  _swigc__p_pj__TxErrorEvent,
  _swigc__p_pj__TxMsgEvent,
  _swigc__p_pj__UaConfig,
  _swigc__p_pj__UserEvent,
  _swigc__p_pj__Version,
  _swigc__p_pj_bool_t,
  _swigc__p_pj_qos_flag,
  _swigc__p_pj_qos_params,
  _swigc__p_pj_qos_type,
  _swigc__p_pj_qos_wmm_prio,
  _swigc__p_pj_ssize_t,
  _swigc__p_pj_ssl_cipher,
  _swigc__p_pj_stun_nat_type,
  _swigc__p_pj_turn_tp_type,
  _swigc__p_pjmedia_aud_dev_cap,
  _swigc__p_pjmedia_aud_dev_route,
  _swigc__p_pjmedia_dir,
  _swigc__p_pjmedia_event_type,
  _swigc__p_pjmedia_format_id,
  _swigc__p_pjmedia_srtp_use,
  _swigc__p_pjmedia_tone_desc,
  _swigc__p_pjmedia_tone_digit,
  _swigc__p_pjmedia_tone_digit_map,
  _swigc__p_pjmedia_tp_proto,
  _swigc__p_pjmedia_type,
  _swigc__p_pjmedia_vid_stream_rc_method,
  _swigc__p_pjrpid_activity,
  _swigc__p_pjsip_cred_data_type,
  _swigc__p_pjsip_dialog_cap_status,
  _swigc__p_pjsip_event_id_e,
  _swigc__p_pjsip_evsub_state,
  _swigc__p_pjsip_hdr_e,
  _swigc__p_pjsip_inv_state,
  _swigc__p_pjsip_redirect_op,
  _swigc__p_pjsip_role_e,
  _swigc__p_pjsip_ssl_method,
  _swigc__p_pjsip_status_code,
  _swigc__p_pjsip_transport_state,
  _swigc__p_pjsip_transport_type_e,
  _swigc__p_pjsip_tsx_state_e,
  _swigc__p_pjsua_100rel_use,
  _swigc__p_pjsua_buddy_status,
  _swigc__p_pjsua_call_flag,
  _swigc__p_pjsua_call_hold_type,
  _swigc__p_pjsua_call_media_status,
  _swigc__p_pjsua_call_vid_strm_op,
  _swigc__p_pjsua_create_media_transport_flag,
  _swigc__p_pjsua_destroy_flag,
  _swigc__p_pjsua_ipv6_use,
  _swigc__p_pjsua_med_tp_st,
  _swigc__p_pjsua_sip_timer_use,
  _swigc__p_pjsua_state,
  _swigc__p_pjsua_stun_use,
  _swigc__p_pjsua_vid_req_keyframe_method,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_int_t,
  _swigc__p_std__vectorT_pj__AudioDevInfo_p_t,
  _swigc__p_std__vectorT_pj__AudioMedia_p_t,
  _swigc__p_std__vectorT_pj__AuthCredInfo_t,
  _swigc__p_std__vectorT_pj__Buddy_p_t,
  _swigc__p_std__vectorT_pj__CallMediaInfo_t,
  _swigc__p_std__vectorT_pj__CodecInfo_p_t,
  _swigc__p_std__vectorT_pj__MediaFormat_p_t,
  _swigc__p_std__vectorT_pj__SipHeader_t,
  _swigc__p_std__vectorT_pj__SipMultipartPart_t,
  _swigc__p_std__vectorT_pj__ToneDesc_t,
  _swigc__p_std__vectorT_pj__ToneDigitMapDigit_t,
  _swigc__p_std__vectorT_pj__ToneDigit_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__pj__Error,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

